ЁЯФН ржкрзНрж░рзЛржмрж▓рзЗржо ржнрж╛рж▓рзЛ ржХрж░рзЗ ржмрзБржЭрж┐ (Understanding the Problem)
ржкрзНрж░рждрж┐ржЯрж┐ рж░рж╛ржЙржирзНржбрзЗ:

Round 1 тЖТ рж╕ржм ржмрж╛рж▓рзНржм ON ржХрж░рж╛ рж╣рзЯ

Round 2 тЖТ ржкрзНрж░рждрж┐ 2 ржиржорзНржмрж░ ржмрж╛рж▓рзНржм toggle (ржпрзЗржоржи: 2, 4, 6...)

Round 3 тЖТ ржкрзНрж░рждрж┐ 3 ржиржорзНржмрж░ ржмрж╛рж▓рзНржм toggle (ржпрзЗржоржи: 3, 6, 9...)

...

Round i тЖТ ржкрзНрж░рждрж┐ i-рждржо ржмрж╛рж▓рзНржм toggle

Toggle ржорж╛ржирзЗ рж╣рж▓рзЛ ржпржжрж┐ ON ржерж╛ржХрзЗ OFF рж╣ржмрзЗ, ржЖрж░ ржпржжрж┐ OFF ржерж╛ржХрзЗ ON рж╣ржмрзЗред

ЁЯОп ржЯрж╛рж░рзНржЧрзЗржЯ:
рж╢рзЗрж╖рзЗ ржХрзЯржЯрж┐ ржмрж╛рж▓рзНржм ON ржерж╛ржХржмрзЗ?

тЬЕ ржЗржорзНржкрж░ржЯрзНржпрж╛ржирзНржЯ ржЕржмржЬрж╛рж░ржнрзЗрж╢ржи (Observation)
ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрж╛рж▓рзНржм k ржХржмрзЗ toggle рж╣ржмрзЗ?

ЁЯСЙ рж╕рзЗ рждржЦржи toggle рж╣ржмрзЗ ржпржЦржи i ржПржоржи ржПржХржЯрж╛ рж╕ржВржЦрзНржпрж╛ рж╣ржмрзЗ ржпрж╛ k ржХрзЗ divide ржХрж░рзЗ: ржЕрж░рзНржерж╛рзО i is a divisor of k.

ЁЯУМ ржЕрж░рзНржерж╛рзО:
ржПржХржЯрж╛ ржмрж╛рж▓рзНржм k total ржХрждржмрж╛рж░ toggle рж╣ржмрзЗ = k ржПрж░ total divisor рж╕ржВржЦрзНржпрж╛ред

ЁЯФБ ржПржЦржи,

ржпржжрж┐ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛рж░ even рж╕ржВржЦрзНржпржХ divisor ржерж╛ржХрзЗ, рждржмрзЗ рж╕рзЗ ржмрж╛рж░ржмрж╛рж░ toggle рж╣рзЯрзЗ рж╢рзЗрж╖рзЗ OFF рж╣рзЯрзЗ ржпрж╛ржмрзЗред

ржЖрж░ ржпржжрж┐ odd рж╕ржВржЦрзНржпржХ divisor ржерж╛ржХрзЗ, рждржмрзЗ рж╢рзЗрж╖рзЗ ON ржерж╛ржХржмрзЗред

ЁЯТб рждрж╛ржЗ, ржХрзЛржи рж╕ржВржЦрзНржпрж╛ ржЧрзБрж▓рзЛрж░ odd number of divisors ржерж╛ржХрзЗ?
ЁЯСЙ Perfect Square рж╕ржВржЦрзНржпрж╛ ржЧрзБрж▓рзЛрж░!

ржпрзЗржоржи:

9 тЖТ divisor: 1, 3, 9 тЖТ total 3 (odd) тЖТ ON

6 тЖТ divisor: 1, 2, 3, 6 тЖТ total 4 (even) тЖТ OFF

Conclusion: рж╢рзБржзрзБржорж╛рждрзНрж░ perfect square index ржЧрзБрж▓рзЛрж░ ржмрж╛рж▓рзНржм ржЧрзБрж▓рзЛ рж╢рзЗрж╖рзЗ ON ржерж╛ржХржмрзЗред

ЁЯФв ржПржЦржи ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЬ:
1 ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд ржХрзЯржЯрж╛ perfect square ржЖржЫрзЗ?

ржЙрждрзНрждрж░ рж╣ржмрзЗ: floor(sqrt(n))

ЁЯза ржПржЦржи ржХрж┐ржнрж╛ржмрзЗ ржХрзЛржб ржХрж░ржмрзЛ (How to think & write code)?
тИЪn ржмрзЗрж░ ржХрж░ржмрзЛ

ржпрждржЧрзБрж▓рзЛ ржкрзВрж░рзНржг рж╕ржВржЦрзНржпрж╛ i ржЖржЫрзЗ ржпрзЗржЦрж╛ржирзЗ i*i <= n, рж╕рзЗржЧрзБрж▓рзЛржЗ рж╣рж▓рзЛ perfect squares

ржЖржорж░рж╛ binary search ржжрж┐рзЯрзЗ efficient way-рждрзЗ ржмрзЗрж░ ржХрж░ржмрзЛ, тИЪn ржПрж░ ржирж┐ржЪрзЗрж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ред

тЬЕ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ (Code Explanation):
cpp
Copy
Edit
class Solution 
{
public:
    // ржПржЗ ржлрж╛ржВрж╢ржиржЯрж╛ ржжрж┐рзЯрзЗ ржЖржорж░рж╛ тИЪn ржПрж░ ржирж┐ржЪрзЗрж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░ржмрзЛ
    int TestPerfectSquare(int n)
    {
        int low = 0;
        int high = n;

        while (low <= high)
        {
            int mid = low + (high - low) / 2;
            if (1LL * mid * mid < n)
            {
                low = mid + 1;
            }
            else if (1LL * mid * mid == n)
            {
                return mid; // exact square found
            }
            else
            {
                high = mid - 1;
            }
        }
        return high; // closest integer less than or equal to тИЪn
    }

    int bulbSwitch(int n) 
    {
        if (n == 0 || n == 1) return n; // base case
        int ans = TestPerfectSquare(n); // count of perfect squares тЙд n
        return ans;
    }
};
тЬЕ ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕ ржмрзНржпрж╛ржЦрзНржпрж╛ (Test Cases)
Test Case 1:
Input: n = 3
Perfect squares тЙд 3: 1 тЖТ рждрж╛ржЗ рж╢рзБржзрзБ 1 ржиржорзНржмрж░ ржмрж╛рж▓рзНржм ON ржерж╛ржХржмрзЗ
тЬЕ Output: 1

Test Case 2:
Input: n = 0
ржХрзЛржирзЛ ржмрж╛рж▓рзНржмржЗ ржирж╛ржЗ
тЬЕ Output: 0

Test Case 3:
Input: n = 1
Perfect squares: 1
тЬЕ Output: 1

Test Case 4:
Input: n = 10
Perfect squares: 1, 4, 9
тЬЕ Output: 3

тЬЕ ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐:
TestPerfectSquare(n) тЖТ Binary Search тЖТ O(log n)

So, overall: O(log n) time & O(1) space

ЁЯза ржХрж┐ржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛ рж╢рж┐ржЦржмрзЛ (How to approach this type):
ржПржЗ ржзрж░ржгрзЗрж░ toggle, ON/OFF, repeated action ржПрж░ рж╕ржорж╕рзНржпрж╛ ржжрзЗржЦрж▓рзЗ divisor / pattern ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛ ржнрж╛рж▓рзЛред

Perfect square ржП focus ржХрж░рж▓рзЗржЗ ржорзВрж▓ logic ржзрж░рж╛ ржпрж╛рзЯред


Full Code:
----------

  class Solution 
{
public:
int TestPerfectSquare(int n)
    {
        int low=0;
        int high=n;
        bool test=false;
        
        while(low<=high)
            {
                int mid=low+(high-low)/2;
                if(1LL*mid*mid<n)
                {
                    low=mid+1;
                }
                else if(1LL*mid*mid==n)
                {
                   
                    return mid;
                  
                }
                else
                {
                    high=mid-1;
                }
                    
            }
        return high;
        
    }

    int bulbSwitch(int n) 
    {
        int count=0;
        if(n==0||n==1) return n;
      
int ans=TestPerfectSquare(n);
        return ans;
    }
};
