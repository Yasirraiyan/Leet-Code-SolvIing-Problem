üîπ Problem ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶π‡¶¨‡ßá

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá:

Sorted array arr

‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: k (‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã element ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá) ‡¶Ü‡¶∞ x (target number)

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú:
üëâ k ‡¶ü‡¶æ element return ‡¶ï‡¶∞‡¶æ, ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã x ‡¶è‡¶∞ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø‡•§
‡¶Ü‡¶∞ return ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ascending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

Closest element ‡¶è‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§:

‡¶Ø‡¶¶‡¶ø |a - x| < |b - x| ‚Üí ‡¶§‡¶æ‡¶π‡¶≤‡ßá a ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ï‡¶æ‡¶õ‡ßá‡•§

‡¶Ø‡¶¶‡¶ø |a - x| == |b - x| ‚Üí ‡¶õ‡ßã‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶á ‡¶Ü‡¶ó‡ßá ‡¶®‡ßá‡¶¨‡ßá‡•§

üîπ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÄ approach ‡¶®‡¶ø‡¶≤‡ßá?

üëâ ‡¶§‡ßÅ‡¶Æ‡¶ø Priority Queue (Min-Heap) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá:

Distance ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨:
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ arr[i] ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø abs(arr[i] - x) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã‡•§
‡¶è‡¶ü‡¶æ basically ‡¶¨‡¶≤‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá, element ‡¶ü‡¶æ x ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶§‡¶ü‡¶æ ‡¶¶‡ßÇ‡¶∞‡ßá‡•§

int j = abs(arr[i] - x);
pq.push({j, arr[i]});


‡¶è‡¶ñ‡¶æ‡¶®‡ßá priority queue ‡¶§‡ßá (distance, value) push ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶§‡ßÅ‡¶Æ‡¶ø greater<pair<int,int>> ‡¶á‡¶â‡¶ú ‡¶ï‡¶∞‡¶õ‡ßã ‚Üí ‡¶è‡¶ü‡¶æ min-heap ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã behave ‡¶ï‡¶∞‡¶õ‡ßá‡•§

‡¶Æ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßü smallest distance ‡¶Ü‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶π‡¶≤‡ßá smallest value ‡¶â‡¶™‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§

K elements ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ:
Priority queue ‡¶•‡ßá‡¶ï‡ßá k ‡¶¨‡¶æ‡¶∞ pop ‡¶ï‡¶∞‡¶≤‡ßá ‡¶™‡ßá‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßã ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ï‡¶æ‡¶õ‡ßá‡¶∞ k elements‡•§

while(!pq.empty() && count < k) {
    int top1 = pq.top().second;
    v.push_back(top1);
    pq.pop();
    count++;
}


Ascending order ‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã:
Priority queue distance ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ smallest ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ final answer sorted array ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
‡¶§‡¶æ‡¶á ‡¶∂‡ßá‡¶∑‡ßá:

sort(v.begin(), v.end());

üîπ Technique

üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø Heap / Priority Queue technique

Distance ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ element ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã

K ‡¶ü‡¶æ element ‡¶®‡ßá‡¶ì‡ßü‡¶æ

‡¶∂‡ßá‡¶∑‡ßá sort ‡¶ï‡¶∞‡ßá answer return

‡¶è‡¶ü‡¶æ accepted ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ constraints (array length up to 10^4) ‡¶è‡¶á approach handle ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§

üîπ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶¨‡¶æ ‡¶Ø‡¶æ‡ßü Approach (Thinking process)

Problem ‡¶™‡ßú‡ßá‡¶á ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶π‡¶¨‡ßá ‚Üí "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ï‡¶æ‡¶õ‡ßá‡¶∞ element ‡¶ö‡¶æ‡¶á"
‚áí ‡¶§‡¶æ‡¶π‡¶≤‡ßá distance / difference ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá‡¶á ‡¶π‡¶¨‡ßá‡•§

Distance ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ smallest ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
‚áí ‡¶è‡¶ü‡¶æ natural fit for Min-Heap ‡¶¨‡¶æ Sorting approach‡•§

‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ k fixed number, ‡¶§‡¶æ‡¶á Heap ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶ü‡¶æ efficient‡•§

üîπ Test Case ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßã‡¶ù‡¶æ
Case 1:
arr = [1,2,3,4,5], k = 4, x = 3


Distance ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨:

|1-3|=2, |2-3|=1, |3-3|=0, |4-3|=1, |5-3|=2


Heap ‚Üí [(0,3),(1,2),(1,4),(2,1),(2,5)]

‡¶™‡ßç‡¶∞‡¶•‡¶Æ 4 pop ‡¶ï‡¶∞‡¶≤‡ßá ‡¶™‡¶æ‡¶¨‡ßã ‚Üí [3,2,4,1]

Sort ‚Üí [1,2,3,4] ‚úÖ

Case 2:
arr = [1,1,2,3,4,5], k = 4, x = -1


Distance ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨:

|1-(-1)|=2, |1-(-1)|=2, |2-(-1)|=3, |3-(-1)|=4, |4-(-1)|=5, |5-(-1)|=6


Heap ‚Üí [(2,1),(2,1),(3,2),(4,3),(5,4),(6,5)]

‡¶™‡ßç‡¶∞‡¶•‡¶Æ 4 pop ‚Üí [1,1,2,3]

Sort ‚Üí [1,1,2,3] ‚úÖ

üîπ Complexity

Heap build: O(n log n) (‡¶ï‡¶æ‡¶∞‡¶£ ‡¶∏‡¶¨ element push ‡¶π‡¶ö‡ßç‡¶õ‡ßá heap ‡¶è)

Pop k elements: O(k log n)

Sort final array: O(k log k)
üëâ Overall: O(n log n)

‚úÖ ‡¶è‡¶á solution accepted ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø distance ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï closest element ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø perfect method‡•§ 


Full Code:
------------


  class Solution
 {
public:

 
    vector<int> findClosestElements(vector<int>& arr, int k, int x) 
    {
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
       vector<int>v;
       for(int i=0;i<arr.size();i++)
       {
        int j=abs(arr[i]-x);
        pq.push({j,arr[i]});
        /*if(pq.size()>k)
        {
            pq.pop();
        }
        */
       }
       int count=0;
       while(!pq.empty()&&count<k)
       {
        int top1=pq.top().second;

       v.push_back(top1);
       pq.pop();
       count++;
       if(count==k) break;
       }
       sort(v.begin(),v.end());
       return v;
    }
};
