üß† ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Understanding the Problem)
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶≤‡¶õ‡ßá:

‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø ‡¶Ü‡¶õ‡ßá ‚Äî s1 ‡¶è‡¶¨‡¶Ç s2, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá space ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡•§

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶Æ‡¶® ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã:

s1-‡¶è ‡¶†‡¶ø‡¶ï ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç s2-‡¶§‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶ì ‡¶Ü‡¶∏‡ßá‡¶®‡¶ø
‡¶Ö‡¶•‡¶¨‡¶æ

s2-‡¶§‡ßá ‡¶†‡¶ø‡¶ï ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç s1-‡¶§‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶ì ‡¶Ü‡¶∏‡ßá‡¶®‡¶ø

Output: ‡¶è‡¶Æ‡¶® ‡¶∏‡¶¨ uncommon word-‡¶è‡¶∞ list‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Line-by-Line Bangla Explanation)
cpp
Copy
Edit
class Solution {
public:
    vector<string> uncommonFromSentences(string s1, string s2) 
üî∏ class Solution ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá uncommonFromSentences ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü s1 ‡¶è‡¶¨‡¶Ç s2 ‡¶®‡¶æ‡¶Æ‡¶ï ‡¶¶‡ßÅ‡¶ü‡¶ø string ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá vector<string> ‚Äî ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé uncommon ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡•§

cpp
Copy
Edit
vector<string> words1;
stringstream ss1(s1);  
string word1;

while (ss1 >> word1) {
    words1.push_back(word1);
}
üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø s1 ‡¶ï‡ßá word ‡¶è ‡¶≠‡ßá‡¶ô‡ßá words1 ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶õ‡ßã‡•§
üî∏ stringstream ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá space ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶ >> ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞‡ßá ‡¶™‡ßú‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

cpp
Copy
Edit
vector<string> words2;
stringstream ss2(s2);  
string word2;

while (ss2 >> word2) {
    words2.push_back(word2);
}
üîπ ‡¶è‡¶ï‡¶á‡¶≠‡¶æ‡¶¨‡ßá s2 ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡¶ü‡¶æ‡¶ï‡ßá ‡¶≠‡ßá‡¶ô‡ßá words2 ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶≤‡ßá‡•§

cpp
Copy
Edit
unordered_set<string> set1, set2;
unordered_map<string,int> freq1, freq2;
üî∏ set1 ‡¶ì set2: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßã‡¶® ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶Ü‡¶õ‡ßá, ‡¶§‡¶æ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá (for existence checking)‡•§
üî∏ freq1 ‡¶ì freq2: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶ï‡ßü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá, ‡¶§‡¶æ ‡¶ó‡ßÅ‡¶®‡¶§‡ßá (frequency tracking)‡•§

cpp
Copy
Edit
for(int i = 0; i < words1.size(); i++) {
    set1.insert(words1[i]);
    freq1[words1[i]]++;
}
üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá s1 ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶ set1 ‡¶è‡¶¨‡¶Ç freq1 ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶õ‡ßã‡•§

cpp
Copy
Edit
for(int j = 0; j < words2.size(); j++) {
    set2.insert(words2[j]);
    freq2[words2[j]]++;
}
üîπ ‡¶è‡¶ï‡¶á ‡¶ï‡¶æ‡¶ú s2 ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

cpp
Copy
Edit
vector<string> ans;
üî∏ Output result ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

cpp
Copy
Edit
for(int k = 0; k < words2.size(); k++) {
    if ((set1.find(words2[k]) == set1.end()) && (freq2[words2[k]] == 1)) {
        ans.push_back(words2[k]);
    }
}
üîπ ‡¶è‡¶á ‡¶≤‡ßÅ‡¶™‡ßá s2-‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶õ‡ßã:

‡¶Ø‡¶¶‡¶ø ‡¶ì‡¶á ‡¶∂‡¶¨‡ßç‡¶¶ s1-‡¶è ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá

‡¶è‡¶¨‡¶Ç s2-‡¶§‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶Ü‡¶∏‡ßá ‚Üí ‡¶§‡¶ñ‡¶®‡¶á ‡¶∏‡ßá‡¶á uncommon word‡•§

cpp
Copy
Edit
for(int m = 0; m < words1.size(); m++) {
    if ((set2.find(words1[m]) == set2.end()) && (freq1[words1[m]] == 1)) {
        ans.push_back(words1[m]);
    }
}
üîπ ‡¶è‡¶ï‡¶á‡¶≠‡¶æ‡¶¨‡ßá s1-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶õ‡ßá s2-‡¶§‡ßá ‡¶®‡ßá‡¶á ‡¶è‡¶¨‡¶Ç s1-‡¶è ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‚Üí ‡¶∏‡ßá‡¶á uncommon word‡•§

cpp
Copy
Edit
return ans;
üî∏ ‡¶∂‡ßá‡¶∑‡ßá uncommon ‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ list return ‡¶ï‡¶∞‡¶õ‡ßã‡•§

üß™ Test Case ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á (With Explanation):
cpp
Copy
Edit
int main() {
    Solution sol;
    vector<string> result = sol.uncommonFromSentences("this apple is sweet", "this apple is sour");
    for(string word : result) cout << word << " ";
    return 0;
}
Input:
ini
Copy
Edit
s1 = "this apple is sweet"
s2 = "this apple is sour"
Step by Step:
s1 ‚Üí {this, apple, is, sweet}

s2 ‚Üí {this, apple, is, sour}

Frequency map:

freq1 ‚Üí this(1), apple(1), is(1), sweet(1)

freq2 ‚Üí this(1), apple(1), is(1), sour(1)

Now check:

sweet: only in s1, freq = 1 ‚úÖ

sour: only in s2, freq = 1 ‚úÖ

Output:
css
Copy
Edit
["sweet", "sour"]
‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡ßá‡¶® ‡¶∏‡¶†‡¶ø‡¶ï?
‡¶§‡ßÅ‡¶Æ‡¶ø word frequency + existence ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‚Äú‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá ‡¶Ü‡¶õ‡ßá, ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ‡ßü ‡¶®‡ßá‡¶á ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá‚Äù ‚Üí ‡¶è‡¶ü‡¶æ‡¶á ‡¶§‡ßã uncommon definition‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø line-by-line check ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá‡•§

üìå ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá word ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡ßá‡¶ô‡ßá list ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßã ‚úÖ

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ frequency ‡¶è‡¶¨‡¶Ç presence check ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø set ‡¶ì map ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‚úÖ

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ logic ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá output ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßã ‚úÖ

Full Code:
----------
class Solution 
{
public:
    vector<string> uncommonFromSentences(string s1, string s2) 
    {
      vector<string> words1;

    stringstream ss1(s1);  
    string word1;

    while (ss1>> word1) 
    {       
        words1.push_back(word1); 
    }
  vector<string> words2;

    stringstream ss2(s2);  
    string word2;

    while (ss2>> word2) 
    {       
        words2.push_back(word2); 
    }  
    unordered_set<string>set1;
    unordered_set<string>set2;
    unordered_map<string,int>freq1;
     unordered_map<string,int>freq2;
    for(int i=0;i<words1.size();i++)
    {
      set1.insert(words1[i]);
      freq1[words1[i]]++;
    }
    for(int j=0;j<words2.size();j++)
    {
      set2.insert(words2[j]);
      freq2[words2[j]]++;
    }
    vector<string>ans;
    for(int k=0;k<words2.size();k++)
    {
      if((set1.find(words2[k])==set1.end())&&(freq2[words2[k]]==1))
      {
          ans.push_back(words2[k]);
      }
    }
    for(int m=0;m<words1.size();m++)
    {
      if(set2.find(words1[m])==set2.end()&&(freq1[words1[m]]==1))
      {
          ans.push_back(words1[m]);
      }
    }
return ans;
    }
};
