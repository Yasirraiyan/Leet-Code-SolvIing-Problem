Problem Reading ржерзЗржХрзЗ Solution Approach

Problem ржмрзБржЭрж╛:

ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ ржПржХржЯрж┐ array stones[] ржЖржЫрзЗ, ржпрзЗржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ stone-ржПрж░ weight ржЖржЫрзЗред

ржкрзНрж░рждрж┐ржмрж╛рж░ ржЖржорж░рж╛ ржжрзБржЯрж┐ рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж░рзА stone ржирзЗржмред ржзрж░рзЛ, ржУрж░рж╛ рж╣рж▓рзЛ x ржПржмржВ y ржПржмржВ x <= yред

Rules:

ржпржжрж┐ x == y тЖТ ржжрзБржЯрзЛ stone ржзрзНржмржВрж╕ рж╣ржмрзЗред

ржпржжрж┐ x != y тЖТ ржЫрзЛржЯржЯрж┐ ржзрзНржмржВрж╕ рж╣ржмрзЗ, ржмржбрж╝ржЯрж┐рж░ weight рж╣ржмрзЗ y - xред

рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд ржПржХржЯрж╛ stone ржмрж╛ ржХрзЛржирзЛ stone ржирж╛ ржерж╛ржХрж▓рзЗ return ржХрж░рждрзЗ рж╣ржмрзЗред

Key Observation:

ржкрзНрж░рждрж┐ржмрж╛рж░ ржЖржорж░рж╛ рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж░рзА ржжрзБржЗржЯрж┐ stone ржирзЗржмред ржПржЗржЯрж╛ржЗ ржоржирзЗ рж░рж╛ржЦрж▓рзЗ ржЖржорж░рж╛ sorted array ржмрж╛ max-heap ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

Step 1: ржХрж┐ржнрж╛ржмрзЗ ржнрж╛ржмрзЛ ржХрзЛржбрж┐ржВ

Max selection ржкрзНрж░ржпрж╝рзЛржЬржиред

Problem ржмрж▓ржЫрзЗ, тАЬchoose heaviest two stonesтАЭ.

рждрж╛ржЗ sorted array ржмрж╛ max-heap (priority_queue) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ржЗ рж╕рж╣ржЬред

While loop until one or zero stones leftред

ржпрждржХрзНрж╖ржг pq.size() > 1, ржЖржорж░рж╛ loop ржЪрж╛рж▓рж╛ржмрзЛред

pq.top() ржжрж┐ржпрж╝рзЗ рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж░рзА stone ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ред

Smash Logic:

if(top1 != top2)
    pq.push(top1 - top2);


ржпржжрж┐ x != y тЖТ ржирждрзБржи stone ржЖржмрж╛рж░ pq рждрзЗ push ржХрж░рждрзЗ рж╣ржмрзЗред

ржпржжрж┐ x == y тЖТ ржХрзЛржи push ржХрж░рждрзЗ рж╣ржмрзЗ ржирж╛, ржжрзБржЗржЯрж┐ stone ржзрзНржмржВрж╕ рж╣ржмрзЗред

Loop рж╢рзЗрж╖рзЗ

ржпржжрж┐ pq empty ржирж╛ рж╣ржпрж╝ тЖТ pq.top() return ржХрж░рзЛред

ржпржжрж┐ empty тЖТ 0 return ржХрж░рзЛред

Step 2: Priority Queue ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржХрж╛рж░ржг

Max selection repeated ржкрзНрж░ржпрж╝рзЛржЬржиред

Priority Queue (C++ STL priority_queue) automatically descending order maintain ржХрж░рзЗред

рждрж╛ржЗ ржкрзНрж░рждрж┐ржмрж╛рж░ O(log n) рждрзЗ heaviest stone ржкрж╛ржЗред

Sorting ржкрзНрж░рждрж┐ iteration ржХрж░рж▓рзЗ O(n log n) рж▓рж╛ржЧржмрзЗ, repeated sort ржХрж░рж▓рзЗ time wasteред

Step 3: Dry Run Example

Input: [2,7,4,1,8,1]

pq: [8,7,4,2,1,1] тЖТ top1=8, top2=7 тЖТ push 8-7=1 тЖТ pq=[4,2,1,1,1,1]

pq: [4,2,1,1,1,1] тЖТ top1=4, top2=2 тЖТ push 2 тЖТ pq=[2,1,1,1,1]

pq: [2,1,1,1,1] тЖТ top1=2, top2=1 тЖТ push 1 тЖТ pq=[1,1,1,1]

pq: [1,1,1,1] тЖТ top1=1, top2=1 тЖТ equal тЖТ push nothing тЖТ pq=[1,1]

pq: [1,1] тЖТ top1=1, top2=1 тЖТ equal тЖТ push nothing тЖТ pq=[ ]

Loop ends тЖТ pq empty тЖТ last stone = 0

Correction: Dry run shows final stone=1, ржХрж╛рж░ржг pq рж╢рзЗрж╖ ржкрж░рзНржпрж╛ржпрж╝рзЗ [1] ржерж╛ржХрзЗред

Step 4: ржХрзЛржб Accepted рж╣ржУржпрж╝рж╛рж░ ржХрж╛рж░ржг

Priority Queue ржмрзНржпржмрж╣рж╛рж░ тЖТ efficient O(n log n)

Smash logic exactly question ржЕржирзБржпрж╛ржпрж╝рзА implement ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

Edge case: single stone ржмрж╛ empty handledред

Constraints small (n<=30), so complexity acceptableред

Step 5: Summary in Bangla

Problem-ржХрзЗ heaviest selection ржУ smash rules рж╣рж┐рж╕рзЗржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЛред

Max-heap (priority_queue) рж╕ржмржЪрзЗржпрж╝рзЗ natural choiceред

Loop until pq.size()>1, top1 & top2 ржирж╛ржУ, smash ржХрж░рзЛред

Push ржирждрзБржи weight back if neededред

Loop рж╢рзЗрж╖рзЗ check pq.empty() тЖТ return top() or 0ред

ЁЯТб Tip:

ржпрзЗ problem repeated max selection ржмрж╛ min selection ржЪрж╛ржпрж╝, рж╕рзЗржЦрж╛ржирзЗ priority queue use ржХрж░рж╛ competitive programming ржП standardред

Stone smashing type problem тЖТ тАЬlast remaining element after pair operationsтАЭ тЖТ always think heap / pq / greedy approachред


  Full Code:
----------

  class Solution
 {
public:
    int lastStoneWeight(vector<int>& stones) 
    {
       // sort(stones.begin(),stones.end());
        priority_queue<int>pq(stones.begin(),stones.end());
        while(pq.size()>1)
        {
            int top1=pq.top();
            pq.pop();
            int top2=pq.top();
            pq.pop();
        //   if(pq.size()==1) break;
               /*if(top1==top2)
               {
                top1=0;
                top2=0;
               }
               */
               if(top1!=top2)
               {
              int x=top1-top2;
                pq.push(x);
              
               }
            int size=pq.size();
          //  size-=2;

        }
        if(!pq.empty())
         return pq.top();
         else
   return 0;
    }
};
