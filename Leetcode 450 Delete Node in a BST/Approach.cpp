üîç Problem Summary (450. Delete Node in a BST)

‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø Binary Search Tree (BST) ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø key value‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã:

1. BST ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶á key ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø node ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§


2. ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶æ‡¶ì, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá delete ‡¶ï‡¶∞‡¶æ‡•§


3. Updated BST return ‡¶ï‡¶∞‡¶æ‡•§




---

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Approach: BFS + Rebuild BST

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßÅ‡¶∞‡ßã BST-‡¶ï‡ßá BFS (level-order traversal) ‡¶¶‡¶ø‡ßü‡ßá traverse ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø list (vector) ‡¶è ‡¶´‡ßá‡¶≤‡ßá‡¶õ‡ßã‡•§ ‡¶è‡¶∞‡¶™‡¶∞:

key ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® node ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨ node ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® BST ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

‡¶Ö‡¶¨‡¶∂‡ßá‡¶∑‡ßá ‡¶®‡¶§‡ßÅ‡¶® BST return ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§


üîÅ Step-by-step Breakdown:


---

‚ú® 1. insert() Function:

TreeNode* insert(TreeNode* root, TreeNode* node)
{
    if(root == nullptr) return node;
    if(node->val < root->val)
        root->left = insert(root->left, node);
    else
        root->right = insert(root->right, node);
    return root;
}

‚û§ ‡¶ï‡¶æ‡¶ú:

‡¶è‡¶ü‡¶ø standard BST insert function‡•§ ‡¶®‡¶§‡ßÅ‡¶® node BST-‡¶∞ rule ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶¨‡¶∏‡¶æ‡ßü‡•§

‚û§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

‡¶ß‡¶∞‡¶ø: root = 5, node->val = 3

‡¶§‡¶æ‡¶π‡¶≤‡ßá:

5
        /
       3


---

‚ú® 2. bfs() Function:

vector<TreeNode*> bfs(TreeNode* root)
{
    queue<TreeNode*> q;
    q.push(root);
    vector<TreeNode*> v;
    while(!q.empty())
    {
        TreeNode* curr = q.front(); q.pop();
        v.push_back(curr);
        if(curr->left) q.push(curr->left);
        if(curr->right) q.push(curr->right);
    }
    return v;
}

‚û§ ‡¶ï‡¶æ‡¶ú:

BST-‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø node ‡¶ï‡ßá level-order ‡¶è traverse ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø vector-‡¶è ‡¶∞‡¶æ‡¶ñ‡ßá‡•§


---

‚ú® 3. deleteNode() Function:

TreeNode* deleteNode(TreeNode* root, int key)
{
    if(root == nullptr) return nullptr;

    vector<TreeNode*> vv = bfs(root);   // 1. Traverse full tree
    unordered_set<int> set1;
    set1.insert(key);                   // 2. Remove the node with key

    vector<TreeNode*> v;
    for(int j = 0; j < vv.size(); j++)
    {
        if(set1.find(vv[j]->val) == set1.end())   // exclude node with key
            v.push_back(vv[j]);
    }

    TreeNode* newroot = nullptr;
    for(TreeNode* node : v)              // 3. Rebuild BST
    {
        node->left = nullptr;
        node->right = nullptr;
        newroot = insert(newroot, node);
    }

    return newroot;
}


---

üß† ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡ßá‡¶®?

‡¶§‡ßÅ‡¶Æ‡¶ø traditional approach (inorder successor/predecessor ‡¶¶‡¶ø‡ßü‡ßá delete ‡¶ï‡¶∞‡¶æ) ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‡¶ï‡¶æ‡¶∞‡¶£:

1. Simple ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ: ‡¶Ø‡ßá node delete ‡¶ï‡¶∞‡¶¨‡ßã ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡¶§‡ßÅ‡¶® BST ‡¶¨‡¶æ‡¶®‡¶æ‡¶≤‡ßá problem solve ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§


2. Level-order traversal ‚Üí ‡¶∏‡¶¨ node ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡•§


3. Insertion function ‚Üí ‡¶™‡ßÅ‡¶∞‡¶®‡ßã node ‡¶ó‡ßÅ‡¶≤‡¶æ ‡¶®‡¶§‡ßÅ‡¶® BST ‡¶§‡ßá ‡¶¢‡ßã‡¶ï‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§




---

üß™ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

Input:

root = [5,3,6,2,4,null,7], key = 3

Step-by-step:

1. bfs(root):

Return ‡¶ï‡¶∞‡ßá ‚Üí vector of nodes:

[5, 3, 6, 2, 4, 7]

2. Remove key = 3:

set1 = {3} So, vector v becomes:

[5, 6, 2, 4, 7]

3. Insert each node into new BST:

Insert 5 ‚Üí newroot = 5
Insert 6 ‚Üí right of 5
Insert 2 ‚Üí left of 5
Insert 4 ‚Üí right of 2
Insert 7 ‚Üí right of 6

Final BST:

5
     / \
    2   6
     \    \
      4    7

This matches the expected output:

[5,2,6,null,4,null,7]


---

‚öñÔ∏è Time Complexity Analysis

‚û§ bfs() traversal:

O(n)


‚û§ Re-insert all nodes:

Worst-case O(n log n), BST-‡¶∞ height balanced ‡¶π‡¶≤‡ßá


So total:
Time: O(n log n)
Space: O(n)


---

üéØ Why Your Code is Accepted?

BST rebuild ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶™‡ßÅ‡¶∞‡¶®‡ßã key ‡¶è‡¶∞ node ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

BST structure valid ‡¶•‡¶æ‡¶ï‡ßá (‡¶ï‡¶æ‡¶∞‡¶£ BST insert ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá)‡•§

Problem constraint-‡¶è ‡¶¨‡¶≤‡¶æ ‡¶®‡¶æ‡¶á ‡¶Ø‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá traditional delete use ‡¶ï‡¶∞‡¶§‡ßá‡¶á ‡¶π‡¶¨‡ßá‡•§


‚úÖ So, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ solution logically correct and accepted.


---

üîö Summary (Bangla):

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ level-order traversal (BFS) ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶¨ node ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

‡¶è‡¶∞‡¶™‡¶∞ delete ‡¶ï‡¶∞‡¶æ‡¶∞ node ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá, ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ó‡ßÅ‡¶≤‡¶æ ‡¶®‡¶§‡ßÅ‡¶® BST ‡¶§‡ßá ‡¶¨‡¶∏‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶õ‡ßã‡•§

‡¶è‡¶á‡¶ü‡¶æ brute-force reconstruction approach ‚Üí valid ‡¶è‡¶¨‡¶Ç clean.

Traditional ‡¶®‡¶æ ‡¶π‡¶≤‡ßá‡¶ì logic strong ‡¶è‡¶¨‡¶Ç BST validate ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá‡•§


 Full Code:
--------------

  class Solution 
{
public:
    TreeNode* insert(TreeNode* root,TreeNode* node)
    {
        if(root==nullptr) return node;
        if(node->val<root->val)
        {
            root->left=insert(root->left,node);
        }
        else
        {
            root->right=insert(root->right,node);
        }
        return root;
    }
    vector<TreeNode*> bfs(TreeNode* root)
    {
        queue<TreeNode*>q;
        q.push(root);
        vector<TreeNode*>v;
        while(!q.empty())
            {
                TreeNode* curr=q.front();
                q.pop();
                v.push_back(curr);
                if(curr->left!=nullptr)
                {
                    q.push(curr->left);
                }
                if(curr->right!=nullptr)
                {
                    q.push(curr->right);
                }
            }
        return v;
    }
    TreeNode* deleteNode(TreeNode* root, int key)
    {
        if(root==nullptr) return nullptr;
        vector<TreeNode*>vv=bfs(root);
        unordered_set<int>set1;
        set1.insert(key);
        vector<TreeNode*>v;
        for(int j=0;j<vv.size();j++)
            {
                 if(set1.find(vv[j]->val)==set1.end())
                 {
                     v.push_back(vv[j]);
                 }

                
            }
    TreeNode* newroot=nullptr;
        for(TreeNode* node:v)
            {
                node->left=nullptr;
                node->right=nullptr;
                newroot=insert(newroot,node);
            }
        return newroot;
    }
};
