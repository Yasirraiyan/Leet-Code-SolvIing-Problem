ЁЯФ╢ Step 1: Loop Iteration Process (ржмрж╛ржВрж▓рж╛рзЯ ржмрзНржпрж╛ржЦрзНржпрж╛)

ржЖржорж░рж╛ ржирж┐ржЪрзЗрж░ ржХрзЛржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐:

for(int i = 0; i < matrix.size() - 1; i++) {
    for(int j = 0; j < matrix[0].size() - 1; j++) {
        if(matrix[i][j] != matrix[i+1][j+1]) {
            return false;
        }
    }
}
return true;

ЁЯФБ рж▓рзБржк ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?

ржЪрж▓ржХ (variable)	ржЕрж░рзНрже ржУ ржмрзНржпрж╛ржЦрзНржпрж╛

i	рж╕рж╛рж░рж┐ (row) ржиржорзНржмрж░, рзж ржерзЗржХрзЗ m-2 ржкрж░рзНржпржирзНржд
j	ржХрж▓рж╛ржо (column) ржиржорзНржмрж░, рзж ржерзЗржХрзЗ n-2 ржкрж░рзНржпржирзНржд
matrix[i][j]	ржмрж░рзНрждржорж╛ржи ржЙржкрж╛ржжрж╛ржи
matrix[i+1][j+1]	ржкрж░ржмрж░рзНрждрзА ржбрж╛рзЯрж╛ржЧрзЛржирж╛рж▓рзЗрж░ ржЙржкрж╛ржжрж╛ржи


> тЬЕ ржЖржорж░рж╛ рж╢рзБржзрзБ matrix[i][j] == matrix[i+1][j+1] ржЪрзЗржХ ржХрж░рж▓рзЗржЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ рж╕ржм ржбрж╛рзЯрж╛ржЧрзЛржирж╛рж▓рзЗ ржЙржкрж╛ржжрж╛ржи ржПржХржЗ ржЖржЫрзЗ ржХрж┐ржирж╛ред




---

ЁЯФ╢ Step 2: ржЙржжрж╛рж╣рж░ржг тАФ 3x4 Matrix

matrix = [
  [1, 2, 3, 4],
  [5, 1, 2, 3],
  [9, 5, 1, 2]
]


---

тЬЕ Cross-Check Table (Based on Your Notebook Style):

ЁЯФН ржЯрзЗржмрж┐рж▓рзЗрж░ ржмрзНржпрж╛ржЦрзНржпрж╛:

matrix[i][j] ржХрзЗ matrix[i+1][j+1] ржПрж░ рж╕рж╛ржерзЗ рждрзБрж▓ржирж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

ржпрзЗржЦрж╛ржирзЗ рждрзБрж▓ржирж╛ ржХрж░рж╛ рж╕ржорзНржнржм ржирж╛ (index limit ржЫрж╛рзЬрж┐рзЯрзЗ ржпрж╛рзЯ), рж╕рзЗржЧрзБрж▓рзЛ ржмрж╛ржжред


ЁЯУК Cross-check Table:

i	j	matrix[i][j]	matrix[i+1][j+1]	рждрзБрж▓ржирж╛	рж╕ржарж┐ржХ ржХрж┐ржирж╛

0	0	1	1	1 == 1	тЬЕ рж╣рзНржпрж╛ржБ
0	1	2	2	2 == 2	тЬЕ рж╣рзНржпрж╛ржБ
0	2	3	3	3 == 3	тЬЕ рж╣рзНржпрж╛ржБ
0	3	4	тЭМ ржмрж╛ржЗрж░рзЗ	рждрзБрж▓ржирж╛ рж╕ржорзНржнржм ржирзЯ	тЬЦя╕П ржмрж╛ржж
1	0	5	5	5 == 5	тЬЕ рж╣рзНржпрж╛ржБ
1	1	1	1	1 == 1	тЬЕ рж╣рзНржпрж╛ржБ
1	2	2	2	2 == 2	тЬЕ рж╣рзНржпрж╛ржБ
1	3	3	тЭМ ржмрж╛ржЗрж░рзЗ	рждрзБрж▓ржирж╛ рж╕ржорзНржнржм ржирзЯ	тЬЦя╕П ржмрж╛ржж



---

ЁЯз╛ ржорзНржпрж╛ржЯрзНрж░рж┐ржХрзНрж╕рзЗ ржЪрж┐рж╣рзНржирж┐ржд ржбрж╛рзЯрж╛ржЧрзЛржирж╛рж▓:

Matrix:
[
  [1, 2, 3, 4],
  [5, 1, 2, 3],
  [9, 5, 1, 2]
]

Diagonal Lines:
тЖШ 1 (0,0) тЖТ 1 (1,1) тЖТ 1 (2,2)
тЖШ 2 (0,1) тЖТ 2 (1,2) тЖТ 2 (2,3)
тЖШ 3 (0,2) тЖТ 3 (1,3)
тЖШ 4 (0,3)
тЖШ 5 (1,0) тЖТ 5 (2,1)
тЖШ 9 (2,0)

тЬЕ ржкрзНрж░рждрж┐ржЯрж┐ ржбрж╛рзЯрж╛ржЧрзЛржирж╛рж▓рзЗ ржЙржкрж╛ржжрж╛ржи ржПржХржЗ тЖТ ржПржЯрж┐ Toeplitz Matrix


---

ЁЯФ╢ Step 3: ржЪрзВрзЬрж╛ржирзНржд ржХрзЛржб (Accepted тЬЕ)

class Solution {
public:
    bool isToeplitzMatrix(vector<vector<int>>& matrix) {
        for(int i = 0; i < matrix.size() - 1; i++) {
            for(int j = 0; j < matrix[0].size() - 1; j++) {
                if(matrix[i][j] != matrix[i+1][j+1])
                    return false;
            }
        }
        return true;
    }
};


---

ЁЯФ╢ Complexity:

ржзрж░ржи	ржорж╛ржи

тП▒я╕П Time	O(m * n)
ЁЯТ╛ Space	O(1)
тЬЕ Extra Memory	ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗ



---

ЁЯза ржоржирзЗ рж░рж╛ржЦрж╛рж░ ржЯрзНрж░рж┐ржХ:

> matrix[i][j] == matrix[i+1][j+1] тЖТ ржПржЯрж╛ржЗ рж╣рж▓ Toeplitz ржЪрзЗржХ ржХрж░рж╛рж░ ржорзВрж▓ рж╕рзВрждрзНрж░ред
рж╢рзБржзрзБржорж╛рждрзНрж░ ржорзНржпрж╛ржЯрзНрж░рж┐ржХрзНрж╕рзЗрж░ рж╢рзЗрж╖ row ржПржмржВ column ржмрж╛ржж ржжрж┐рзЯрзЗ рж▓рзБржк ржЪрж╛рж▓рж╛рж▓рзЗржЗ ржХрж╛ржЬ рж╣ржмрзЗред




---

ЁЯУБ GitHub Markdown Table Ready Version

### тЬЕ Toeplitz Matrix Check тАФ Leetcode 766

**Matrix:**

[ [1, 2, 3, 4], [5, 1, 2, 3], [9, 5, 1, 2] ]

| i | j | matrix[i][j] | matrix[i+1][j+1] | рж╕ржорж╛ржи ржХрж┐ржирж╛ |
|---|---|--------------|------------------|-------------|
| 0 | 0 | 1            | 1                | тЬЕ           |
| 0 | 1 | 2            | 2                | тЬЕ           |
| 0 | 2 | 3            | 3                | тЬЕ           |
| 1 | 0 | 5            | 5                | тЬЕ           |
| 1 | 1 | 1            | 1                | тЬЕ           |
| 1 | 2 | 2            | 2                | тЬЕ           |

**Time Complexity:** O(m * n)  
**Space Complexity:** O(1)

Full Code:
----------

class Solution
{
  public:
  bool isToeplitzMatrix(vector<vector<int>>&matrix)
  {
    bool istoeplitz=true;
    for(int i=0;i<matrix.size()-1;i++)
    {
      for(int j=0;j<matrix[i].size()-1;j++)
      {
        if(matrix[i][j]!=matrix[i+1][j+1])
        {
           istoeplitz=false;
           break;
        }
      }
    }
    return istoeplitz;
  }
};
