‚úÖ Step-by-step ‡¶¨‡ßã‡¶ù‡¶æ ‚Äî ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßú‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶ø‡¶∑‡ßü ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶∞‡¶æ‡¶ñ‡ßã:

‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶∞ ‡¶®‡ßã‡¶° ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶Ø‡¶¶‡¶ø odd length ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßã‡¶ú‡¶æ ‡¶Æ‡¶æ‡¶ù‡¶ñ‡¶æ‡¶®‡ßá‡¶∞‡¶ü‡¶æ (‡¶è‡¶ï‡¶ü‡¶æ‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)‡•§

‡¶Ø‡¶¶‡¶ø even length ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶Æ‡¶æ‡¶ù‡¶ñ‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡ßã‡¶° ‡¶•‡¶æ‡¶ï‡ßá ‚Äî ‡¶§‡¶ñ‡¶® ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§



---

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ßß:

Input: [1, 2, 3, 4, 5] ‚Üí total = 5 (odd)

mid = 5 / 2 = 2 (0-based index)
=> Return index 2 ‚Üí node value = 3
Output: [3, 4, 5] (because we return the pointer starting from node 3)


---

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ß®:

Input: [1, 2, 3, 4, 5, 6] ‚Üí total = 6 (even)

mid = (6 + 1) / 2 = 3 (0-based index)
=> Return index 3 ‚Üí node value = 4
Output: [4, 5, 6]


---

‚úÖ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá:

int low = 0;
vector<ListNode*> reserve;
while(head != nullptr)
{
    reserve.push_back(head);
    head = head->next;
}

üî∏ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞ reserve ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ListNode* ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶ñ‡ßã‡•§

üî∏ ‡¶Æ‡¶æ‡¶®‡ßá, ‡¶™‡ßÅ‡¶∞‡ßã ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø array-‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã access ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã reserve[0], reserve[1], ...


---

int high = reserve.size() - 1;
int mid;
if(reserve.size()%2 != 0)
{
    mid = reserve.size() / 2;
}‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ size ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã ‚Äì odd ‡¶®‡¶æ‡¶ï‡¶ø even‡•§

‡¶Ø‡¶¶‡¶ø odd ‡¶π‡ßü ‚Üí mid = size / 2 ‚Üí ‡¶Ø‡ßá‡¶Æ‡¶® 5 ‡¶π‡¶≤‡ßá 5 / 2 = 2

‡¶Ø‡¶¶‡¶ø even ‡¶π‡ßü ‚Üí mid = (size + 1) / 2 ‚Üí ‡¶Ø‡ßá‡¶Æ‡¶® 6 ‡¶π‡¶≤‡ßá (6+1)/2 = 3


üìå 0-based index ‡¶è ‡¶è‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡¶†‡¶ø‡¶ï second middle ‡¶™‡¶æ‡¶¨‡ßá‡•§


---

return reserve[mid];

üî∏ ‡¶Ö‡¶¨‡¶∂‡ßá‡¶∑‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø reserve[mid] ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã ‚Üí ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ ListNode* ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‚Üí ‡¶Æ‡¶æ‡¶®‡ßá, ‡¶∏‡ßá‡¶á ‡¶®‡ßã‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡•§


---

‚úÖ ‡¶ï‡ßá‡¶® ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° Accepted ‡¶π‡ßü‡ßá‡¶õ‡ßá?

‡¶ï‡¶æ‡¶∞‡¶£:

1. ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßÅ‡¶∞‡ßã ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡ßá store ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‚Üí O(n) time & O(n) space‡•§


2. ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ size ‡¶¶‡ßá‡¶ñ‡ßá ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡¶ø‡¶°‡¶≤ ‡¶á‡¶®‡ßç‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã (‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Æ‡¶ø‡¶°‡¶≤‡¶ì ‡¶†‡¶ø‡¶ï‡¶†‡¶æ‡¶ï)‡•§


3. ‡¶Ö‡¶¨‡¶∂‡ßá‡¶∑‡ßá ‡¶∏‡ßá‡¶á ‡¶®‡ßã‡¶° ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‚Üí ‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Ö‡¶Ç‡¶∂ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü‡•§




---

‚úÖ Sample Test:

ListNode* head = new ListNode(1,
    new ListNode(2,
    new ListNode(3,
    new ListNode(4,
    new ListNode(5)))));

Solution s;
ListNode* mid = s.middleNode(head);

// Output: mid->val = 3
// Print: 3 -> 4 -> 5


---

‚úÖ ‡¶¨‡ßã‡¶ù‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶á approach ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶†‡¶ø‡¶ï ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§

‡¶§‡¶¨‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø Floyd's slow-fast pointer ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶∞‡ßã efficient ‡¶≠‡¶æ‡¶¨‡ßá (O(1) space) ‡¶è‡¶ü‡¶æ
Full Code:
-------------
class Solution 
{
public:
    ListNode* middleNode(ListNode* head) 
    {
        int low=0;
        vector<ListNode*>reserve;
        while(head!=nullptr)
            {
                reserve.push_back(head);
                head=head->next;
            }
        int high=reserve.size()-1;
        int mid;
        if(reserve.size()%2!=0)
        {
           mid=reserve.size()/2;
               
            
        }
        else
        {
            mid=(reserve.size()+1)/2;
        }
        
    
        return reserve[mid];
    }
};
