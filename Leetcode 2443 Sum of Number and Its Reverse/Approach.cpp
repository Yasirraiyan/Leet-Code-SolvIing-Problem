üîπ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§‡¶∏‡¶æ‡¶∞
‡¶è‡¶ï‡¶ü‡¶ø non-negative integer num ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‚Äî
num ‡¶ï‡¶ø ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø non-negative integer x ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞ reverse rev(x) ‡¶è‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤?
‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé,

num = x + reverse(x)

‡¶è‡¶á ‡¶∞‡¶ï‡¶Æ ‡¶ï‡ßã‡¶®‡ßã x ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§


---

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

1. Input: num = 443
‚û§ x = 172 ‡¶π‡¶≤‡ßá reverse(172) = 271,
‚û§ 172 + 271 = 443 ‚úÖ
‚üπ ‡¶â‡¶§‡ßç‡¶§‡¶∞: true


2. Input: num = 63
‚û§ ‡¶è‡¶Æ‡¶® ‡¶ï‡ßã‡¶®‡ßã x ‡¶®‡ßá‡¶á ‡¶Ø‡¶æ‡¶∞ reverse ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡ßá 63 ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‚ùå
‚üπ ‡¶â‡¶§‡ßç‡¶§‡¶∞: false


3. Input: num = 181
‚û§ x = 140 ‡¶π‡¶≤‡ßá reverse(140) = 41,
‚û§ 140 + 41 = 181 ‚úÖ
‚üπ ‡¶â‡¶§‡ßç‡¶§‡¶∞: true




---

üß† ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶¨ ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá?

‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá‡¶á ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶Ü‡¶∏‡ßá:
‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ø‡¶¶‡¶ø x + reverse(x) = num ‡¶ß‡¶∞‡¶£‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã x ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶ø, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ x ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® 0 ‡¶•‡ßá‡¶ï‡ßá num ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ x ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶∞‡¶æ reverse(x) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶Ø‡¶¶‡¶ø num ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ true.


---

üîç Step-by-Step Code & ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Bangla)

class Solution
{
public:
    int findreverse(int n)

üî∏ ‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ helper function ‚Äî ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ integer ‡¶è‡¶∞ reverse ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

{
        int rev=0;
        while(n>0)
        {
            int digit=n%10;        // ‡¶∂‡ßá‡¶∑ digit ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
            rev=rev*10+digit;      // reverse ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶∞‡ßç‡¶Æ‡ßÅ‡¶≤‡¶æ
            n=n/10;                // n ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßá‡¶∑ digit ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ
        }
        return rev;
    }

‚û° ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡ßç‡¶¨‡¶∞‡ßÇ‡¶™: n = 172
rev = 0 ‚Üí 2 ‚Üí 27 ‚Üí 271
‡¶∂‡ßá‡¶∑‡ßá rev = 271 return ‡¶ï‡¶∞‡¶¨‡ßá‡•§


---

bool sumOfNumberAndReverse(int num) 
    {
        if(num==0) return true;

üî∏ ‡¶Ø‡¶¶‡¶ø num = 0 ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá 0 + reverse(0) = 0
‚üπ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø true


---

bool possible=false;
        for(int i=1;i<num;i++)

üî∏ ‡¶Ü‡¶Æ‡¶∞‡¶æ 1 ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá num-1 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ x (‡¶Æ‡¶æ‡¶®‡ßá i) ‡¶ß‡¶∞‡ßá ‡¶ß‡¶∞‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßã‡•§


---

{
            if(i+findreverse(i)==num)

üî∏ ‡¶Ø‡¶¶‡¶ø i + reverse(i) == num ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶™‡ßá‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡¶ø ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡•§

{
                possible=true;
                break;
            }
        }
        return possible;

üî∏ ‡¶™‡ßá‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶≤‡ßÅ‡¶™ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç true return ‡¶ï‡¶∞‡¶ø‡•§ ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá false.


---

üí° ‡¶ï‡ßá‡¶® ‡¶è‡¶ü‡¶æ Accepted ‡¶π‡¶ö‡ßç‡¶õ‡ßá? (Complexity)

‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö num ‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶á‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ reverse ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡ßü ‡¶≤‡¶æ‡¶ó‡ßá O(log(num))

‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Æ‡ßü ‡¶ú‡¶ü‡¶ø‡¶≤‡¶§‡¶æ: O(num * log(num)) (‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ reverse ‡¶ï‡¶∞‡¶§‡ßá digit ‡¶ó‡ßÅ‡¶®‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø)


‚üπ ‡¶è‡¶á ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏‡¶ü‡¶æ efficiently ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶§‡¶æ‡¶á Accepted ‡¶π‡ßü‡•§


---

üß™ Test Case ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Line-by-line)

‚úÖ Example: num = 443

üîπ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶¨‡ßã:
i = 1 to 442

üîπ ‡¶Ø‡¶ñ‡¶® i = 172,
‚û° reverse(172) = 271
‚û° 172 + 271 = 443
‚û° ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶ó‡ßá‡¶≤ ‚üπ possible = true

üîπ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶≤‡ßÅ‡¶™ ‡¶•‡¶æ‡¶Æ‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶á‡•§
‚üπ ‡¶â‡¶§‡ßç‡¶§‡¶∞: true


---

‚ùå Example: num = 63

üîπ ‡¶Ü‡¶Æ‡¶∞‡¶æ i = 1 to 62 ‡¶ö‡¶æ‡¶≤‡¶æ‡¶á
üîπ ‡¶ï‡ßã‡¶®‡ßã i + reverse(i) = 63 ‡¶Æ‡ßá‡¶≤‡ßá ‡¶®‡¶æ‡•§
‚üπ return false


---
Full Code:
----------

  class Solution
{
public:
    int findreverse(int n)
    {
        int rev=0;
        while(n>0)
            {
                int digit=n%10;
                rev=rev*10+digit;
                n=n/10;
            }
        return rev;
    }
    bool sumOfNumberAndReverse(int num) 
    {
        if(num==0) return true;
        bool possible=false;
        for(int i=1;i<num;i++)
            {
                if(i+findreverse(i)==num)
                {
                    possible=true;
                    break;
                }
            }
        return possible;
    }
};
