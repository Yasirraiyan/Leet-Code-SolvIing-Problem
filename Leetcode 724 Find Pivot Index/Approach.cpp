ЁЯФН ржкрзНрж░ржмрж▓рзЗржоржЯрж╛ ржХрзА ржмрж▓ржЫрзЗ?
ржЖржорж░рж╛ ржПржоржи ржПржХржЯрж┐ index ржЦрзБржБржЬржмрзЛ ржпрзЗржЦрж╛ржирзЗ рждрж╛рж░ ржмрж╛ржо ржкрж╛рж╢рзЗрж░ рж╕ржм ржЙржкрж╛ржжрж╛ржирзЗрж░ ржпрзЛржЧржлрж▓ == рждрж╛рж░ ржбрж╛ржи ржкрж╛рж╢рзЗрж░ рж╕ржм ржЙржкрж╛ржжрж╛ржирзЗрж░ ржпрзЛржЧржлрж▓ рж╣ржмрзЗред

тЬЕ ржЗржиржкрзБржЯ:
cpp
Copy
Edit
nums = [1, 7, 3, 6, 5, 6]
ржЖржорж╛ржжрзЗрж░ржХрзЗ ржПржоржи ржПржХржЯрж┐ index return ржХрж░рждрзЗ рж╣ржмрзЗ ржпрзЗржЦрж╛ржирзЗ:

ini
Copy
Edit
left_sum == right_sum
ЁЯФН ржХрзЛржи ржЯрзЗржХржирж┐ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ?
ЁЯСЙ Prefix Sum Optimization (One Pass Technique)

тЪЩя╕П ржХрж╛ржЬрзЗрж░ ржорзВрж▓ржзрж╛рж░рж╛ (Approach):
ржЖржорж░рж╛ ржЪрж╛ржЗ ржирж╛ ржкрзНрж░рждрж┐ржЯрж┐ index-ржПрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржмрж╛ржо ржУ ржбрж╛ржи ржкрж╛рж╢рзЗрж░ ржпрзЛржЧржлрж▓ рж╣рж┐рж╕рзЗржм ржХрж░рж┐ ржХрж╛рж░ржг ржПрждрзЗ рж╕ржорзЯ рж▓рж╛ржЧржмрзЗ O(n┬▓) тАФ ржпрж╛ ржзрзАрж░ ржПржмржВ ржЕржХрж╛рж░рзНржпржХрж░ред

рж╕рзЗржЬржирзНржп ржЖржорж░рж╛ ржкрзНрж░ржержорзЗ рж╕ржорзНржкрзВрж░рзНржг array-ржЯрж┐рж░ total sum ржмрзЗрж░ ржХрж░ржмрзЛред

ржПрж░ржкрж░ ржкрзНрж░рждрж┐ржЯрж┐ index-ржП ржпрж╛ржУрзЯрж╛ ржЕржмрж╕рзНржерж╛рзЯ рж╣рж┐рж╕рзЗржм ржХрж░ржмрзЛ:

ini
Copy
Edit
right_sum = total_sum - left_sum - nums[i]
ржПржЯрж╛ ржХрж░рж╛рж░ ржорж╛ржзрзНржпржорзЗ ржЖржорж░рж╛ ржЦрзБржм рж╕рж╣ржЬрзЗржЗ ржкрзНрж░рждрж┐ржЯрж┐ index-ржП left ржПржмржВ right sum ржмрзЗрж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ O(n) ржЯрж╛ржЗржорзЗред

ЁЯФв ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзЛржЭрж╛ржирзЛ:
ржЙржжрж╛рж╣рж░ржг:
cpp
Copy
Edit
nums = [1, 7, 3, 6, 5, 6]
Step 1: Total Sum ржмрзЗрж░ ржХрж░рзЛ

cpp
Copy
Edit
total_sum = 1 + 7 + 3 + 6 + 5 + 6 = 28
Step 2: Loop ржЪрж╛рж▓рж╛ржУ ржПржмржВ ржкрзНрж░рждрж┐ржЯрж┐ index-ржП ржЪрзЗржХ ржХрж░рзЛ

cpp
Copy
Edit
left_sum = 0

i = 0:
  right_sum = 28 - 0 - 1 = 27  => ржирж╛

i = 1:
  left_sum = 1
  right_sum = 28 - 1 - 7 = 20  => ржирж╛

i = 2:
  left_sum = 8
  right_sum = 28 - 8 - 3 = 17  => ржирж╛

i = 3:
  left_sum = 11
  right_sum = 28 - 11 - 6 = 11 => тЬЕ ржорж┐рж▓рзЗржЫрзЗ!
рж╕рзБрждрж░рж╛ржВ, pivot index = 3

ЁЯза ржХрзЗржи ржПржЗ ржХрзМрж╢рж▓ ржХрж╛ржЬ ржХрж░рзЗ?
ржЖржорж░рж╛ рж╢рзБржзрзБ ржПржХржмрж╛рж░ ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗ рж╕рзНржХрзНржпрж╛ржи ржХрж░рзЗ total_sum ржмрзЗрж░ ржХрж░рж┐ред ржПрж░ржкрж░ ржПржХржмрж╛рж░ ржорж╛рждрзНрж░ рж▓рзБржк ржЪрж╛рж▓рж┐рзЯрзЗ left_sum ржЖржкржбрзЗржЯ ржХрж░рждрзЗ ржХрж░рждрзЗ ржпрж╛ржЪрзНржЫрж┐ред

ржкрзНрж░рждрж┐ржмрж╛рж░рзЗ right_sum = total_sum - left_sum - current_element

ржПржЗ ржХрзМрж╢рж▓ржЯрж╛ рж╣рж▓рзЛ prefix sum ржнрж┐рждрзНрждрж┐ржХ Constant Time Right Sum Calculation тАФ ржЕрж░рзНржерж╛рзО, right_sum ржмрж╛рж░ ржмрж╛рж░ рж╣рж┐рж╕рзЗржм ржирж╛ ржХрж░рзЗ ржПржХ рж░ржХржорзЗрж░ shortcut ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

ЁЯТ╗ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ (Line by Line):
cpp
Copy
Edit
class Solution {
public:
    int pivotIndex(vector<int>& nums) 
    { 
        int totalsum = 0;  // ржкрзБрж░рзЛ array-рж░ sum рж░рж╛ржЦржмрзЗ
        int leftsum = 0;   // ржкрзНрж░рждрж┐ржЯрж┐ index-ржП ржпрж╛ржУрзЯрж╛рж░ рж╕ржорзЯ рждрж╛рж░ ржмрж╛ржо ржжрж┐ржХрзЗрж░ ржпрзЛржЧржлрж▓

        // 1. Total sum ржмрзЗрж░ ржХрж░рж╛
        for(int i = 0; i < nums.size(); i++)
        {
            totalsum += nums[i];
        }

        // 2. ржкрзНрж░рждрж┐ржЯрж┐ index-ржП ржЪрзЗржХ ржХрж░рж╛
        for(int j = 0; j < nums.size(); j++)
        {
            int rightsum = totalsum - leftsum - nums[j]; // ржбрж╛ржи ржкрж╛рж╢рзЗрж░ ржпрзЛржЧржлрж▓
            
            if(leftsum == rightsum)
            {
                return j; // pivot index ржкрзЗрзЯрзЗ ржЧрзЗрж▓рзЗ рж╕ржЩрзНржЧрзЗ рж╕ржЩрзНржЧрзЗ return
            }

            leftsum += nums[j]; // ржкрж░ржмрж░рзНрждрзА index-ржПрж░ ржЬржирзНржп left sum ржЖржкржбрзЗржЯ
        }

        return -1; // ржирж╛ ржкрзЗрж▓рзЗ -1 return
    }
};
тЬЕ Accepted ржХрзЗржи рж╣ржЪрзНржЫрзЗ?
рж╕ржорзЯ ржЬржЯрж┐рж▓рждрж╛: O(n) (ржПржХржмрж╛рж░ рж╕ржорзНржкрзВрж░рзНржг traverse)

рж╕рзНржерж╛ржи ржЬржЯрж┐рж▓рждрж╛: O(1) (ржХрзЛржирзЛ ржЕрждрж┐рж░рж┐ржХрзНржд array ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯржирж┐)

Efficient ржУ Simple рж╣ржУрзЯрж╛рзЯ LeetCode-ржПрж░ Time Limit ржУ Constraint ржарж┐ржХржорждрзЛ satisfy ржХрж░ржЫрзЗред

ЁЯзк ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕ ржЪрж╛рж▓рж┐рзЯрзЗ ржжрзЗржЦрж╛ ржпрж╛ржХ:
Input 1:
cpp
Copy
Edit
nums = [1, 7, 3, 6, 5, 6]
Output: 3
Input 2:
cpp
Copy
Edit
nums = [1, 2, 3]
Output: -1
Input 3:
cpp
Copy
Edit
nums = [2, 1, -1]
Output: 0
тЬЕ ржЙржкрж╕ржВрж╣рж╛рж░:
ржПржЗ рж╕ржорж╕рзНржпрж╛рзЯ ржпрзЗржЯрж╛ ржЖржорж░рж╛ рж╢рж┐ржЦрж▓рж╛ржо:

Pivot index ржорж╛ржирзЗ ржПржХ ржзрж░ржирзЗрж░ balance point

Prefix sum ржХрзМрж╢рж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржжржо efficient ржнрж╛ржмрзЗ ржжрзБржЗ ржкрж╛рж╢рзЗрж░ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░рж╛ ржпрж╛рзЯ

Total sum - left sum - current = right sum ржПржЯрж╛ ржмрзБржЭрждрзЗ ржкрж╛рж░рж╛ ржорж╛ржирзЗржЗ ржкрзНрж░ржмрж▓рзЗржоржЯрж╛ ржмрзЛржЭрж╛

Full Code:
-----------

  class Solution {
public:
    int pivotIndex(vector<int>& nums) 
    { 
     int totalsum=0;
     int leftsum=0;
     int rightsum;
     int pivot=-1;
     for(int i=0;i<nums.size();i++)
     {
      totalsum+=nums[i];
     }
     for(int j=0;j<nums.size();j++)
     {
      //leftsum+=nums[j];
      rightsum=totalsum-leftsum-nums[j];
      if(leftsum==rightsum)
      {
       pivot=j;
        break;
      }
        leftsum += nums[j];
     }
     return pivot;
    }
      
};
