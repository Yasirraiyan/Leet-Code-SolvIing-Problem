üß† ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶ï‡ßÄ ‡¶¨‡¶≤‡¶õ‡ßá?

‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ Linked List ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶•‡ßá‡¶ï‡ßá n-‡¶§‡¶Æ node ‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶ï‡¶ø list return ‡¶ï‡¶∞‡¶¨‡ßá‡•§


---

üìå ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ßß:

Input: head = [1,2,3,4,5], n = 2  
Output: [1,2,3,5]

‡¶∂‡ßá‡¶∑ ‡¶•‡ßá‡¶ï‡ßá 2-‡¶§‡¶Æ node ‚Üí 4
‡¶§‡¶æ‡¶π‡¶≤‡ßá 4 ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ó‡ßÅ‡¶≤‡¶æ ‡¶•‡¶æ‡¶ï‡ßá: 1 ‚Üí 2 ‚Üí 3 ‚Üí 5


---

‚úÖ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßã (Approach):

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶á ‡¶ß‡¶æ‡¶™‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‚Äî

Step 1: Stack-‡¶è ‡¶∏‡¶¨ node ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßã

üëâ ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßá head ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßá‡¶∑ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ø‡¶§ node ‡¶Ü‡¶õ‡ßá, ‡¶∏‡¶¨‡¶ï‡ßá stack-‡¶è ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßã‡•§

while(head != nullptr){
    st.push(head);
    head = head->next;
}

‡¶è‡¶§‡ßá stack ‡¶è‡¶∞ top ‡¶è ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑ node‡•§
‡¶ß‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ï ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü [1, 2, 3, 4, 5] ‚Üí stack ‡¶π‡¶¨‡ßá:

Top ‚Üí 5  
       4  
       3  
       2  
Bottom‚Üí1


---

Step 2: Stack ‡¶•‡ßá‡¶ï‡ßá pop ‡¶ï‡¶∞‡ßá n-th node ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶æ‡¶ì

int count = 0;
vector<ListNode*> v;

while(!st.empty()){
    ListNode* top = st.top();
    count++;
    if(count != n){  // skip nth node from end
        v.push_back(top); 
    }
    st.pop();
}

‡¶è‡¶ñ‡¶æ‡¶®‡ßá count ‡¶¶‡¶ø‡ßü‡ßá track ‡¶ï‡¶∞‡¶õ‡ßã ‡¶ï‡¶§‡¶ü‡¶ø element ‡¶™‡¶™ ‡¶ï‡¶∞‡¶õ‡ßã‡•§ ‡¶Ø‡¶ñ‡¶® count == n ‡¶π‡ßü, ‡¶§‡¶ñ‡¶® ‡¶ê node ‡¶ï‡ßá ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßã‡•§


---

Step 3: Vector ‡¶â‡¶≤‡ßç‡¶ü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® Linked List ‡¶¨‡¶æ‡¶®‡¶æ‡¶ö‡ßç‡¶õ‡ßã

reverse(v.begin(), v.end());  // ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ñ‡¶® ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶â‡¶≤‡ßç‡¶ü‡¶æ‡¶®‡ßã

ListNode* headd = v[0];
ListNode* curr = headd;
for(int i = 1; i < v.size(); i++){
    curr->next = v[i];
    curr = curr->next;
}
curr->next = nullptr;
return headd;

‡¶è‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø n-th node ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® list ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßã‡•§


---

‚úÖ ‡¶ï‡ßá‡¶® ‡¶è‡¶ü‡¶æ Accepted ‡¶π‡ßü?

‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶∏‡¶Æ‡ßü‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ö‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨ edge case (‡¶õ‡ßã‡¶ü ‡¶¨‡ßú ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü, ‡¶è‡¶ï‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ element ‡¶•‡¶æ‡¶ï‡¶≤‡ßá) ‡¶†‡¶ø‡¶ï‡¶†‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§ Let's test:


---

üîç Test Case ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£

Case 1:

head = [1, 2, 3, 4, 5], n = 2

Stack ‚Üí 5(top), 4, 3, 2, 1
Count ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡¶∞‡¶§‡ßá count == 2 ‡¶π‡¶≤‡ßá 4 ‡¶¨‡¶æ‡¶¶ ‡¶Ø‡¶æ‡¶¨‡ßá
Vector ‚Üí [5, 3, 2, 1] ‚Üí reverse ‚Üí [1, 2, 3, 5] ‚úÖ ‡¶†‡¶ø‡¶ï


---

Case 2:

head = [1], n = 1

Stack ‚Üí 1
Count ‚Üí 1
count == n, ‡¶§‡¶æ‡¶á 1 ‡¶¨‡¶æ‡¶¶
Vector ‚Üí ‡¶ñ‡¶æ‡¶≤‡¶ø
Return ‚Üí nullptr ‚úÖ ‡¶†‡¶ø‡¶ï


---

Case 3:

head = [1, 2], n = 1

Stack ‚Üí 2, 1
count == 1 ‡¶π‡¶≤‡ßá ‚Üí 2 ‡¶¨‡¶æ‡¶¶
Vector ‚Üí [1] ‚Üí Reverse ‚Üí [1] ‚úÖ ‡¶†‡¶ø‡¶ï


---

üìå Time Complexity:

Stack ‡¶§‡ßà‡¶∞‡¶ø: O(N)

Stack ‡¶•‡ßá‡¶ï‡ßá pop ‡¶ï‡¶∞‡ßá vector: O(N)

Vector reverse: O(N)

‡¶®‡¶§‡ßÅ‡¶® list ‡¶§‡ßà‡¶∞‡¶ø: O(N)


üëâ ‡¶Æ‡ßã‡¶ü‡¶æ‡¶Æ‡ßÅ‡¶ü‡¶ø O(N) time ‡¶è‡¶¨‡¶Ç O(N) space ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá‡•§


---

‚úÖ Summary (Bangla):

‡¶ß‡¶æ‡¶™	‡¶ï‡¶æ‡¶ú

Step 1	Stack-‡¶è ‡¶∏‡¶¨ node ‡¶∞‡¶æ‡¶ñ‡ßã ‡¶Ø‡ßá‡¶® ‡¶∂‡ßá‡¶∑ ‡¶•‡ßá‡¶ï‡ßá n-th ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã
Step 2	Stack ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶™ ‡¶ï‡¶∞‡ßá n-th ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶æ‡¶ì
Step 3	‡¶¨‡¶æ‡¶ï‡¶ø node-‡¶¶‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡ßá ‡¶®‡¶§‡ßÅ‡¶® linked list ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì
Step 4	Return ‡¶ï‡¶∞‡ßã ‡¶®‡¶§‡ßÅ‡¶® head

Full Code:
------------

class Solution 
{
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) 
{
        stack<ListNode*>st;
        while(head!=nullptr)
            {
                st.push(head);
                head=head->next;
            }
        int count=0;
        vector<ListNode*>v;
        while(!st.empty())
            {
                ListNode* top=st.top();
               // v.push_back(top);
               
                count++;
                if(count!=n)
                {
                    v.push_back(top);
                        }
                st.pop();
                
            }
        if(v.empty())return nullptr;
        reverse(v.begin(),v.end());
        ListNode* headd=(v[0]);
        ListNode* curr=headd;
        for(int i=1;i<v.size();i++)
            {
  //  curr=new ListNode(v[i]);
                curr->next=v[i];
                
                curr=curr->next;
            }
        curr->next=nullptr;
        return headd;
    }
};
