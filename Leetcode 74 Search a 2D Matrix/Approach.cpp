тЬЕ ржкрзНрж░рж╢рзНржи ржмрзБржЭрзЗ ржЪрж┐ржирзНрждрж╛рж░ ржзрж╛ржк

ржкрзНрж░ржержорзЗ ржкрзНрж░рж╢рзНржирзЗ ржмрж▓рж╛ рж╣рзЯрзЗржЫрзЗ:

> ржкрзНрж░рждрж┐ржЯрж┐ row sorted

ржкрзНрж░рждрж┐ржЯрж┐ ржкрж░ржмрж░рзНрждрзА row-ржПрж░ ржкрзНрж░ржержо рж╕ржВржЦрзНржпрж╛ ржЖржЧрзЗрж░ row-ржПрж░ рж╢рзЗрж╖ рж╕ржВржЦрзНржпрж╛рж░ ржЪрзЗрзЯрзЗ ржмрзЬ




ЁЯУМ ржПрж░ ржорж╛ржирзЗ ржкрзБрж░рзЛ matrix-ржЯрж╛ ржЖрж╕рж▓рзЗ ржПржХржЯрж┐ sorted 1D array ржПрж░ ржорждрзЛ behave ржХрж░рзЗред

ЁЯФН ржПржЦржи ржкрзНрж░рж╢рзНржи ржЪрж╛рзЯ: ржПржоржи ржПржХржЯрж┐ target matrix-ржП ржЖржЫрзЗ ржХрж┐ржирж╛, ржПржмржВ рж╕ржорж╛ржзрж╛ржирзЗрж░ ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐ рж╣ржмрзЗ O(log(m * n))ред


---



рждрзБржорж┐ ржПржЗржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗржЫрзЛ:

> "ржЖржорж┐ ржпржжрж┐ ржкрзБрж░рзЛ matrix ржШрзБрж░рзЗ ржжрзЗржЦрж┐ ржПржмржВ рж╕ржм рж╕ржВржЦрзНржпрж╛ unordered_set-ржП рж░рж╛ржЦрж┐, рждрж╛рж╣рж▓рзЗ ржЖржорж┐ O(1) ржЯрж╛ржЗржорзЗ target ржЖржЫрзЗ ржХрж┐ржирж╛ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ ржкрж╛рж░рж┐ред"




---

ЁЯФН рждрзЛржорж╛рж░ ржХрзЛржбржЯрж┐

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        unordered_set<int> set1;
        bool find = false;

        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[i].size(); j++) {
                set1.insert(matrix[i][j]); // рж╕ржорж╕рзНржд ржнрзНржпрж╛рж▓рзБ set ржП ржврзЛржХрж╛ржирзЛ
            }
        }

        if (set1.find(target) != set1.end()) {
            find = true; // ржпржжрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝, рждрж╛рж╣рж▓рзЗ true рж╕рзЗржЯ ржХрж░рж╛
        }

        return find;
    }
};


---

тЬЕ рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛ (Line-by-line Bangla Explanation)

ЁЯФ╕ unordered_set<int> set1;

ЁЯСЙ рждрзБржорж┐ ржПржХржЯрж┐ рж╕рзЗржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЛ ржпрж╛рждрзЗ ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржЫрж╛рзЬрж╛ рж╕ржм ржнрзНржпрж╛рж▓рзБ рж░рж╛ржЦрж╛ ржпрж╛рзЯ ржПржмржВ ржжрзНрж░рзБржд рж╕рж╛рж░рзНржЪ ржХрж░рж╛ ржпрж╛рзЯред


---

ЁЯФ╕ Outer loop: for (int i = 0; i < matrix.size(); i++)

ЁЯСЙ ржПржЯрж┐ ржкрзНрж░рждрж┐ржЯрж┐ row ржПрж░ ржЙржкрж░ рж▓рзБржкред


---

ЁЯФ╕ Inner loop: for (int j = 0; j < matrix[i].size(); j++)

ЁЯСЙ ржПржЯрж┐ ржкрзНрж░рждрж┐ржЯрж┐ row ржПрж░ ржкрзНрж░рждрж┐ржЯрж┐ column (element) ржПрж░ ржЙржкрж░ рж▓рзБржкред


---

ЁЯФ╕ set1.insert(matrix[i][j]);

ЁЯСЙ ржкрзНрж░рждрж┐ржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯ set-ржП insert ржХрж░ржЫрзЛред


---

ЁЯФ╕ if (set1.find(target) != set1.end())

ЁЯСЙ ржпржжрж┐ target рж╕рзЗржЯрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ true return ржХрж░ржмрзЗред


---

тЬЕ ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржжрзЗржЦрж┐:

matrix = [[1,3,5,7],
          [10,11,16,20],
          [23,30,34,60]];
target = 3

рждрзЛржорж╛рж░ ржХрзЛржб ржХрзА ржХрж░ржмрзЗ:

рж╕ржм ржнрзНржпрж╛рж▓рзБ set-ржП ржврзЛржХрж╛ржмрзЗ: {1,3,5,7,10,11,16,20,23,30,34,60}

рждрж╛рж░ржкрж░ target = 3 рж╕рзЗржЯрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░ржмрзЗ тЖТ тЬЕ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржмрзЗ


тЮбя╕П Return ржХрж░ржмрзЗ true


---
Full Code:
-----------
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        unordered_set<int>set1;
        bool find=false;
        for(int i=0;i<matrix.size();i++)
            {
                for(int j=0;j<matrix[i].size();j++)
                    {
                        set1.insert(matrix[i][j]);
                    }
            }
        if(set1.find(target)!=set1.end())
        {
            find=true;
        }
        return find;
    }
};
  
