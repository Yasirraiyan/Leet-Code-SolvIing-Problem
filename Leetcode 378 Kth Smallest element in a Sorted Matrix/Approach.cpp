
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø n x n ‡¶∏‡¶æ‡¶á‡¶ú‡ßá‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá:

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø row ‡¶è‡¶¨‡¶Ç column ascending (‡¶¨‡¶æ‡ßú‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶æ) order-‡¶è ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã‡•§

‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá sorted order ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ k-‡¶§‡¶Æ smallest element ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶è‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ï‡ßç‡¶∏‡¶ø‡¶ü‡¶ø O(n¬≤) ‡¶è‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶ì‡ßü‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ (advanced optimization hint)‡•§



---

üî∏ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßã‡¶ù‡¶æ ‡¶Ø‡¶æ‡¶ï:

Input:

matrix = [[1,5,9],
          [10,11,13],
          [12,13,15]]
k = 8

‡¶è‡¶á ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏‡ßá ‡¶∏‡¶¨ ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü sort ‡¶ï‡¶∞‡¶≤‡ßá ‡¶™‡¶æ‡¶á:

[1, 5, 9, 10, 11, 12, 13, 13, 15]
                      ‚Üë
                      8th smallest = 13


---

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ (Approach):

‡¶§‡ßÅ‡¶Æ‡¶ø brute-force approach ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßã:

‚ú® Step-by-step ‡¶ï‡ßÄ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá:

1. Input ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßã ‚Äî ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ (2D vector) ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ k‡•§


2. ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá:

for(int i=0;i<matrix.size();i++)
    for(int j=0;j<matrix[i].size();j++)
        v.push_back(matrix[i][j]);

üîç ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏‡¶ï‡ßá 1D array-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã‡•§


3. sort(v.begin(), v.end()) ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶¨ ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü sort ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§


4. k-th smallest element ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßã:

if(k==j+1) ans = v[j];


5. ‡¶∂‡ßá‡¶∑‡ßá return ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ans.




---

üí° ‡¶ï‡ßã‡¶° ‡¶ï‡ßá‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá?

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶®‡¶ø‡ßü‡ßá sorting ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡ßá‡¶õ‡ßã‡•§ ‡¶è‡¶∞‡¶™‡¶∞ ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ index 0-based, ‡¶§‡¶æ‡¶á k-1 index ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶®‡¶ü‡¶æ‡¶á ‡¶π‡¶≤‡ßã k-th smallest‡•§



---

üìå Time & Space Complexity:

Time:

Matrix traversal: O(n¬≤)

Sorting: O(n¬≤ log n¬≤) = O(n¬≤ log n)


Space:

Extra vector: O(n¬≤)
‚õîÔ∏è ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‚ÄúBetter than O(n¬≤) memory‚Äù ‚Äî ‡¶§‡¶æ‡¶á ‡¶è‡¶ü‡¶ø‡¶ï‡ßá optimal ‡¶¨‡¶≤‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§ ‡¶è‡¶ü‡¶æ brute force solution‡•§




---

‚úÖ ‡¶ï‡ßá‡¶®‡ßã ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° "Accepted" ‡¶π‡¶≤‡ßã?

Leetcode-‡¶è ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§:

Brute force solution‡¶ì Accepted ‡¶π‡ßü ‡¶Ø‡¶¶‡¶ø input constraint-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§

‡¶è‡¶ñ‡¶æ‡¶®‡ßá n <= 300 ‚Üí ‡¶Æ‡ßã‡¶ü n¬≤ = 90000 ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ manageable‡•§



---

‚úÖ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶á solution ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü?

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßú‡ßá‡¶á ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:

‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶π‡¶æ‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶§, ‡¶§‡¶æ‡¶π‡¶≤‡ßá sort ‡¶ï‡¶∞‡ßá k-th smallest ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶π‡¶ú‡•§

‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ß‡¶æ‡¶™: ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø vector-‡¶è ‡¶∞‡ßá‡¶ñ‡ßá sort ‡¶ï‡¶∞‡¶æ‡•§


‡¶è‡¶ñ‡¶æ‡¶®‡ßá row ‡¶è‡¶¨‡¶Ç column ‡¶â‡¶≠‡ßü‡¶á sorted, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ use ‡¶ï‡¶∞‡ßã‡¶®‡¶ø (‡¶§‡¶æ‡¶á ‡¶è‡¶ü‡¶ø brute-force)‡•§


---

üìö ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡¶ï‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶¶‡ßá‡¶ñ‡ßã

Input: matrix = [[-5]], k = 1
v = [-5]
sorted = [-5]
k = 1 ‚Üí answer = v[0] = -5 ‚úÖ

Input: matrix = [[1,2,3],
                 [4,5,6],
                 [7,8,9]], k = 4
v = [1,2,3,4,5,6,7,8,9]
sorted = same
answer = v[3] = 4 ‚úÖ




  Full Code:
--------------
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        vector<int>v;
        int count=0;
        int ans;
        for(int i=0;i<matrix.size();i++)
            {
                for(int j=0;j<matrix[i].size();j++)
                    {
                        v.push_back(matrix[i][j]);
                    }
            }
        sort(v.begin(),v.end());
        for(int j=0;j<v.size();j++)
            {
                if(k==j+1)
                {
                    ans=v[j];
                    break;
                }
            }
        return ans;
    }
};
