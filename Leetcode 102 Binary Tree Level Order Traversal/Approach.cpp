тЬЕ ржкрзНрж░рж╢рзНржиржЯрж╛ ржХрзА ржмрж▓ржЫрзЗ?
ржкрзНрж░рж╢рзНржиржЯрж╛ ржмрж▓ржЫрзЗ:
ржПржХржЯрж╛ ржмрж╛ржЗржирж╛рж░рж┐ ржЯрзНрж░рж┐ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ, рждрзЛржорж╛ржХрзЗ рж╕рзЗржЗ ржЯрзНрж░рж┐рж░ ржирзЛржбржЧрзБрж▓рзЛ level order traversal ржХрж░рждрзЗ рж╣ржмрзЗред

Level Order Traversal ржорж╛ржирзЗ ржХрзА?

ЁЯСЙ Level by level, ржЕрж░рзНржерж╛рзО:

ржкрзНрж░ржержорзЗ root (level 0),

рждрж╛рж░ржкрж░ рждрж╛рж░ left ржПржмржВ right child (level 1),

рждрж╛рж░ржкрж░ рждрж╛ржжрзЗрж░ child ржЧрзБрж▓рзЛ (level 2),

ржПржнрж╛ржмрзЗ ржпрждржжрзВрж░ ржпрж╛рзЯред

тП│ ржПржЗ traversal-ржЯрж╛ BFS (Breadth-First Search) ржжрж┐рзЯрзЗ рж╣рзЯ тАФ Queue ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

ЁЯУе ржЙржжрж╛рж╣рж░ржг рзз:
Input: root = [3,9,20,null,null,15,7]

ржПржЗ ржЯрзНрж░рж┐ ржПржоржи:

markdown
Copy
Edit
        3
       / \
      9  20
         / \
        15  7
Level-wise ржжрзЗржЦрж▓рзЗ:

Level 0: [3]

Level 1: [9, 20]

Level 2: [15, 7]

тЬЕ Output рж╣ржмрзЗ: [[3],[9,20],[15,7]]

ЁЯза ржПржЦржи ржЪрж┐ржирзНрждрж╛ ржХрж░рзЛ ржХрзАржнрж╛ржмрзЗ рж╕ржорж╛ржзрж╛ржи ржХрж░ржм?
Approach (ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржнрж╛ржмржирж╛):

ржпржжрж┐ root ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ [] рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЛред

ржЖржорж░рж╛ queue ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ ржпрзЗржи ржкрзНрж░ржержорзЗ root ржерзЗржХрзЗ child ржЧрзБрж▓рзЛ ржкрж╛ржЗред

ржкрзНрж░рждрзНржпрзЗржХ level-ржП ржХрждржЧрзБрж▓рзЛ node ржЖржЫрзЗ, рж╕рзЗржЯрж╛ queue.size() ржжрж┐рзЯрзЗ ржмрзЗрж░ ржХрж░ржмрзЛред

рж╕рзЗржЗ рж▓рзЗржнрзЗрж▓рзЗрж░ рж╕ржм node ржкрзНрж░рж╕рзЗрж╕ ржХрж░ржм (pop ржХрж░ржм, ржПржмржВ рждрж╛ржжрзЗрж░ value ржПржХржЯрж┐ vector<int> рждрзЗ рж░рж╛ржЦржм)ред

ржкрзНрж░рждрж┐ржЯрж┐ node-ржПрж░ left ржПржмржВ right child ржерж╛ржХрж▓рзЗ queue рждрзЗ push ржХрж░ржмред

ржкрзНрж░рждрж┐ржЯрж┐ level рж╢рзЗрж╖рзЗ рж╕рзЗржЗ level-ржПрж░ vector ржЯрж╛ main result vector ржП рж░рж╛ржЦржмред

тЬЕ Code: Line by Line Bangla ржмрзНржпрж╛ржЦрзНржпрж╛ рж╕рж╣
cpp
Copy
Edit
class Solution 
{
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>>v;   // рж╕ржм рж▓рзЗржнрзЗрж▓рзЗрж░ ржЬржирзНржп ржлрж╛ржЗржирж╛рж▓ рж░рзЗржЬрж╛рж▓рзНржЯ

        if (root == nullptr) return v;  // ржпржжрж┐ root ржирж╛ ржерж╛ржХрзЗ, ржЦрж╛рж▓рж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ

        queue<TreeNode*>q;  // рж▓рзЗржнрзЗрж▓ ржЕрж░рзНржбрж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп queue
        q.push(root);       // root ржХрзЗ queue рждрзЗ ржврзБржХрж╛рж▓рж╛ржо

        while(!q.empty())   // ржпрждржХрзНрж╖ржг queue ржЦрж╛рж▓рж┐ ржирж╛ рж╣рзЯ
        {
            int size = q.size();   // ржПржЗ рж▓рзЗржнрзЗрж▓-ржП ржХрждржЧрзБрж▓рзЛ ржирзЛржб ржЖржЫрзЗ
            vector<int>vv;         // ржПржЗ рж▓рзЗржнрзЗрж▓рзЗрж░ ржирзЛржбржЧрзБрж▓рзЛрж░ ржорж╛ржи рж░рж╛ржЦржмрзЗ

            for (int i = 0; i < size; ++i)
            {
                TreeNode* front=q.front();  // queue ржерзЗржХрзЗ рж╕рж╛ржоржирзЗрж░ ржирзЛржб ржирж┐рж▓рж╛ржо
                q.pop();                    // pop ржХрж░рж▓рж╛ржо

                vv.push_back(front->val);   // ржПржЗ ржирзЛржбрзЗрж░ ржорж╛ржи result-ржП рж░рж╛ржЦрж▓рж╛ржо

                if(front->left!=nullptr)    // ржпржжрж┐ ржмрж╛ржо рж╕ржирзНрждрж╛ржи ржерж╛ржХрзЗ
                {
                    q.push(front->left);   // queue рждрзЗ ржврзБржХрж╛рж▓рж╛ржо
                }

                if(front->right!=nullptr)   // ржпржжрж┐ ржбрж╛ржи рж╕ржирзНрждрж╛ржи ржерж╛ржХрзЗ
                {
                    q.push(front->right);  // queue рждрзЗ ржврзБржХрж╛рж▓рж╛ржо
                }
            }

            v.push_back(vv);  // ржПржЗ рж▓рзЗржнрзЗрж▓рзЗрж░ рж░рзЗржЬрж╛рж▓рзНржЯ main vector ржП рж░рж╛ржЦрж▓рж╛ржо
        }

        return v;   // рж╕ржм рж▓рзЗржнрзЗрж▓ рж╢рзЗрж╖, рж░рзЗржЬрж╛рж▓рзНржЯ рж░рж┐ржЯрж╛рж░рзНржи
    }
};
ЁЯФН Test Case ржмрзНржпрж╛ржЦрзНржпрж╛:
Test 1:
cpp
Copy
Edit
Input: [3,9,20,null,null,15,7]
Level-wise traversal:

рж▓рзЗржнрзЗрж▓	queue ржПрж░ ржЕржмрж╕рзНржерж╛ (step by step)
0	[3] тЖТ output: [3]
1	[9, 20] тЖТ output: [9, 20]
2	[15, 7] тЖТ output: [15, 7]

тП╣ Final: [[3], [9, 20], [15, 7]]

Test 2:
cpp
Copy
Edit
Input: [1]
ржПржХржорж╛рждрзНрж░ root node 1 тЖТ level 0 тЖТ output: [[1]]

Test 3:
cpp
Copy
Edit
Input: []
Tree ржирж╛ржЗ тЖТ output: []

тЬЕ Time and Space Complexity:
Time Complexity: O(n) тАФ ржкрзНрж░рждрж┐ржЯрж┐ node ржПржХржмрж╛рж░ ржХрж░рзЗ ржнрж┐ржЬрж┐ржЯ ржХрж░ржЫрзЛ

Space Complexity:

Worst case: O(n) тАФ queue-рждрзЗ ржПржХ рж▓рзЗржнрзЗрж▓рзЗрж░ рж╕ржм node ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ (ржпржжрж┐ ржЯрзНрж░рж┐ ржЦрзБржм wide рж╣рзЯ)

ЁЯФЪ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржоржирзЗ рж░рж╛ржЦрзЛ:
ржПржЗ рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп BFS ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ

ржкрзНрж░рждрж┐ржЯрж┐ level ржЖрж▓рж╛ржжрж╛ vector-ржП рж░рж╛ржЦрзЛ

queue ржжрж┐рзЯрзЗ ржПржХ ржПржХ ржХрж░рзЗ level ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЛ

Full Code:
----------

  /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
 
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
      vector<vector<int>>v;
      if (root == nullptr) return v;
     
      queue<TreeNode*>q;
      q.push(root);
      while(!q.empty())
      {
         int size = q.size();   
          vector<int>vv;
         for (int i = 0; i < size; ++i)
            {     
        TreeNode* front=q.front();
        q.pop();
        vv.push_back(front->val);
        if(front->left!=nullptr)
        {
          q.push(front->left);
        }
        if(front->right!=nullptr)
        {
          q.push(front->right);
        }
      }
      v.push_back(vv);
      }
//for(int i=0;i<vv.size();i++)
//{
  
//}
return v;
    }
};
