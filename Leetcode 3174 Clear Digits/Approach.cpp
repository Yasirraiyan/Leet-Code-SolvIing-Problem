рждрзБржорж┐ ржпрзЗ ржкрзНрж░ржмрзНрж▓рзЗржоржЯрж╛ рж▓рж┐ржЦрзЗржЫрзЛ рж╕рзЗржЯрж╛ ржЦрзБржм ржЗржирзНржЯрж╛рж░рзЗрж╕рзНржЯрж┐ржВ ржПржмржВ ржПрждрзЗ рж╕рзНржЯрзНржпрж╛ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЙржкржпрзЛржЧрзА ржХрж╛рж░ржг ржПржЦрж╛ржирзЗ рж▓рж╛рж╕рзНржЯ ржЗржи ржлрж╛рж░рзНрж╕рзНржЯ ржЖржЙржЯ (LIFO) ржХржирж╕рзЗржкрзНржЯржЯрж╛ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржЦрж╛ржЯрзЗред

ЁЯФН Problem ржмрзЛржЭрж╛ (Understanding the Question):
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж╛ string s ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ, ржпрзЗржЦрж╛ржирзЗ ржХрж┐ржЫрзБ ржЫрзЛржЯ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░ (a-z) ржПржмржВ ржХрж┐ржЫрзБ digit (0-9) ржерж╛ржХржмрзЗред рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ:

ржпрждржХрзНрж╖ржг ржкрж░рзНржпржирзНржд string-ржП digit ржерж╛ржХрзЗ,

ржкрзНрж░рждрж┐ржЯрж╛ digit-ржПрж░ ржмрж╛ржорзЗ ржерж╛ржХрж╛ рж╕ржмржЪрзЗрзЯрзЗ ржХрж╛ржЫрзЗрж░ non-digit character (ржЕрж░рзНржерж╛рзО a-z ржЕржХрзНрж╖рж░) ржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзЛред

рж╕рзЗржЗ рж╕рж╛ржерзЗ рж╕рзЗржЗ digit-ржЯрж╛ ржирж┐ржЬрзЗржУ ржорзБржЫрзЗ ржлрзЗрж▓рзЛред

рж╢рж░рзНржд: ржпржжрж┐ ржХрзЛржирзЛ digit-ржПрж░ ржЖржЧрзЗ non-digit character ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛рж░ ржЙржкрж░ ржЕржкрж╛рж░рзЗрж╢ржи ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред

ЁЯУШ ржЙржжрж╛рж╣рж░ржг рзи:
txt
Copy
Edit
Input:  s = "cb34"
Step 1: '3' ржПрж░ ржмрж╛ржорзЗ 'b' ржЖржЫрзЗ тЖТ ржорзБржЫрж┐: "c4"
Step 2: '4' ржПрж░ ржмрж╛ржорзЗ 'c' ржЖржЫрзЗ тЖТ ржорзБржЫрж┐: ""
Output: ""
тЬЕ ржХрзЛржб ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Line-by-line Bangla Explanation):
cpp
Copy
Edit
class Solution {
public:
    string clearDigits(string s) {
        stack<char> st;  // ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ non-digit character ржЧрзБрж▓рзЛ рж░рж╛ржЦржм ржпрзЗржЧрзБрж▓рзЛ ржПржЦржирзЛ safe ржЖржЫрзЗ
        string ans = "";
        string result = "";

        for(int i = 0; i < s.size(); i++) {
            if(isdigit(s[i])) {
                if (!st.empty()) {
                    // ржпржжрж┐ stack-ржП ржХрзЛржирзЛ non-digit character ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж┐ pop ржХрж░рзЗ ржжрж╛ржУ
                    // ржХрж╛рж░ржг ржПржЯрж┐ ржПржЗ digit ржПрж░ ржмрж╛ржорзЗ ржерж╛ржХрж╛ character, ржЕржкрж╛рж░рзЗрж╢ржи ржЕржирзБржпрж╛рзЯрзА ржПржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ рж╣ржмрзЗ
                    st.pop();
                }
            } else {
                // ржпржжрж┐ ржЕржХрзНрж╖рж░ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рзНржЯрзНржпрж╛ржХрзЗ рж░рж╛ржЦрзЛ
                st.push(s[i]);
            }
        }

        // ржПржЦржи рж╕рзНржЯрзНржпрж╛ржХрзЗ ржпрзЗ рж╕ржм ржЕржХрзНрж╖рж░ ржмрзЗржБржЪрзЗ ржЖржЫрзЗ рж╕рзЗржЧрзБрж▓рзЛ `ans` рждрзЗ рждрзБрж▓рзЗ ржирзЗржЗ
        while(!st.empty()) {
            ans += st.top();  // рж╕рзНржЯрзНржпрж╛ржХ ржерзЗржХрзЗ ржЙржкрж░рзЗрж░ ржжрж┐ржХрзЗрж░ ржЕржХрзНрж╖рж░ ржирзЗрзЯрж╛ рж╣ржЪрзНржЫрзЗ
            st.pop();
        }

        // ржХрж╛рж░ржг ржЖржорж░рж╛ рж╕рзНржЯрзНржпрж╛ржХ ржерзЗржХрзЗ ржирж┐ржЪрзЗрж░ ржжрж┐ржХрзЗрж░ ржЕржХрзНрж╖рж░ ржкрж░рзЗ ржкрзЗрзЯрзЗржЫрж┐, рждрж╛ржЗ ржЙрж▓рзНржЯрзЛ ржХрж░рзЗ ржлрж▓рж╛ржлрж▓ ржмрж╛ржирж╛рждрзЗ рж╣ржмрзЗ
        for(int j = ans.size() - 1; j >= 0; j--) {
            result += ans[j];
        }

        return result;
    }
};
ЁЯТб ржХрзЗржирзЛ Accepted рж╣рж▓рзЛ?
Time Complexity: O(n)

Space Complexity: O(n)

ржЕржкрж╛рж░рзЗрж╢ржиржЯрж╛ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХржнрж╛ржмрзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ implement ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ:

digit ржкрзЗрж▓рзЗ ржмрж╛ржорзЗрж░ ржЕржХрзНрж╖рж░ ржорзБржЫрзЗ ржлрзЗрж▓ржЫрзЗред

stack ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рзЯ LIFO ржирзАрждрж┐рждрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржХрж╛ржЫрзЗрж░ character ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗред

edge case: ржпржжрж┐ string-ржП ржХрзЛржирзЛ digit ржирж╛ ржерж╛ржХрзЗ тЖТ untouched рж░рж╛ржЦржЫрзЗред

ЁЯзк Test Case Walkthrough:
ЁЯзк Test 1:
txt
Copy
Edit
Input: s = "abc"
тЖТ ржХрзЛржирзЛ digit ржирзЗржЗ тЖТ ржХрж┐ржЫрзБржЗ ржХрж░рждрзЗ рж╣ржмрзЗ ржирж╛
Output: "abc"
ЁЯзк Test 2:
txt
Copy
Edit
Input: s = "cb34"
тЖТ '3' ржПрж░ ржмрж╛ржорзЗ 'b' тЖТ remove тЖТ "c4"
тЖТ '4' ржПрж░ ржмрж╛ржорзЗ 'c' тЖТ remove тЖТ ""
Output: ""
ЁЯзк Test 3:
txt
Copy
Edit
Input: s = "a1b2c3"
Step 1: '1' ржПрж░ ржмрж╛ржорзЗ 'a' тЖТ remove тЖТ "b2c3"
Step 2: '2' ржПрж░ ржмрж╛ржорзЗ 'b' тЖТ remove тЖТ "c3"
Step 3: '3' ржПрж░ ржмрж╛ржорзЗ 'c' тЖТ remove тЖТ ""
Output: ""
ЁЯзк Test 4:
txt
Copy
Edit
Input: s = "ab12"
Step 1: '1' ржПрж░ ржмрж╛ржорзЗ 'b' тЖТ remove тЖТ "a2"
Step 2: '2' ржПрж░ ржмрж╛ржорзЗ 'a' тЖТ remove тЖТ ""
Output: ""
ЁЯза ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЬржирзНржп ржнрж╛ржмрж╛рж░ ржХрж┐ржЫрзБ ржкрзЯрзЗржирзНржЯ:
ржпржжрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж╛ржорзЗрж░ non-digit character ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ digit рж░рзЗржЦрзЗ ржжрж╛ржУ ржирж╛ржХрж┐? тЖТ ржирж╛, ржЕржкрж╛рж░рзЗрж╢ржи ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛, ржХрж┐ржирзНрждрзБ рж╢рзЗрж╖рзЗ рж╕рзЗржЯрж╛ ржерзЗржХрзЗржЗ ржпрж╛ржмрзЗред

ржпржжрж┐ рждрзБржорж┐ reverse ржХрж░рзЗ ржХрж░рзЛ, рждрж╛рж╣рж▓рзЗ ржмрзБржЭрждрзЗ рж╣ржмрзЗ "ржмрж╛ржо" ржЖрж░ "ржбрж╛ржи" ржПрж░ ржорж╛ржирзЗ ржЙрж▓рзНржЯрзЛ рж╣ржмрзЗ, рждрж╛ржЗ ржЕрждрж┐рж░рж┐ржХрзНржд ржЭрж╛ржорзЗрж▓рж╛ред

ЁЯз╛ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХ ржЪрж┐ржирзНрждрж╛:
ржкрзНрж░ржержорзЗ ржкрзНрж░ржмрж▓рзЗржоржЯрж╛ ржмрзБржЭрж┐ тАУ ржХрж┐рж╕рзЗрж░ рж╕рж╛ржерзЗ ржХрж┐рж╕рзЗрж░ рж╕ржорзНржкрж░рзНржХ ржЖржЫрзЗ?

рж╕рзНржЯрзНржпрж╛ржХ рж▓рж╛ржЧржмрзЗ ржХрж┐ржирж╛ ржнрж╛ржмрж┐ тАУ рж╣рзНржпрж╛ржБ, ржХрж╛рж░ржг ржЖржЧрзЗрж░ element ржХрзЗ efficiently access ржХрж░рждрзЗ рж╣ржмрзЗред

ржХрзЛржб рж▓рж┐ржЦрж┐ тАУ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ:

digit рж╣рж▓рзЗ, ржмрж╛ржорзЗрж░ closest ржЕржХрзНрж╖рж░ remove

ржирж╛ рж╣рж▓рзЗ, stack-ржП рж░рж╛ржЦрзЛ

ржмрж╛ржХрж┐ character ржЧрзБрж▓рзЛ ржЙрж▓рзНржЯрзЛ ржХрж░рзЗ result ржмрж╛ржирж╛ржЗ тАУ ржХрж╛рж░ржг рж╕рзНржЯрзНржпрж╛ржХ LIFO.

ржПржЗржнрж╛ржмрзЗ рждрзБржорж┐ ржнржмрж┐рж╖рзНржпрждрзЗ ржпржЦржиржЗ ржПржЗ рж╕ржорж╛ржзрж╛ржи ржжрзЗржЦржмрзЗ, рждржЦржи ржкрзБрж░рзЛ logic, reasoning, ржПржмржВ ржХрзЗржирзЛ ржПржЯрж╛ accepted рж╣рж▓рзЛ рждрж╛ рж╕рж╣ржЬрзЗржЗ ржмрзБржЭрзЗ ржлрзЗрж▓рждрзЗ ржкрж╛рж░ржмрзЗред

ржЖрж░рзЛ ржмрзНржпрж╛ржЦрзНржпрж╛рж░ ржжрж░ржХрж╛рж░ рж╣рж▓рзЗ ржЬрж╛ржирж┐ржУ!

  Full Code:
------------

  class Solution 
{
public:
    string clearDigits(string s) 
{
      stack<char>st;
      string ans="";
      string result="";
      for(int i=0;i<s.size();i++)
      {
        if(isdigit(s[i]))
        {
            if (!st.empty()) 
            {
            st.pop();
            }
        }
        else
        {
            st.push(s[i]);
        }
      }
      while(!st.empty())
      {
        ans+=st.top();
        st.pop();
      }
      for(int j=ans.size()-1;j>=0;j--)
      {
        result+=ans[j];
      }
      return result;
    }
};
