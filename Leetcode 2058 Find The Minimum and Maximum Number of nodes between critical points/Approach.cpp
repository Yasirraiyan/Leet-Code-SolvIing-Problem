ЁЯФН Step-by-step Approach (Bangla + English mix)


---

ЁЯФ╕ Step 1: Linked List тЖТ Vector

vector<int> v;
while (head != nullptr) {
    v.push_back(head->val);
    head = head->next;
}

тЮбя╕П рж▓рж┐ржЩрзНржХржб рж▓рж┐рж╕рзНржЯ traversal ржХрж░рзЗ рж╕ржмржЧрзБрж▓рзЛ value vector v рждрзЗ рждрзБрж▓рзЗ ржирж┐ржЪрзНржЫрж┐ред
ржПржЯрж╛ ржХрж░рж╛рж░ ржХрж╛рж░ржг рж╣рж▓рзЛ:

рж▓рж┐ржЩрзНржХржб рж▓рж┐рж╕рзНржЯрзЗ ржЖржЧрзЗрж░ ржУ ржкрж░рзЗрж░ node ржП ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржПржХрж╕рж╛ржерзЗ ржХрж░рж╛ ржХржарж┐ржиред

ржХрж┐ржирзНрждрзБ array/vector ржП v[i-1], v[i], v[i+1] рж╕рж╣ржЬрзЗ ржХрж░рж╛ ржпрж╛рзЯред



---

ЁЯФ╕ Step 2: Find Critical Points

vector<int> cr;
for (int i = 1; i < v.size() - 1; i++) {
    if ((v[i] > v[i-1] && v[i] > v[i+1]) || (v[i] < v[i-1] && v[i] < v[i+1])) {
        cr.push_back(i);
    }
}

тЮбя╕П Critical Point ржПрж░ рж╢рж░рзНржд:

ржЖржЧрзЗрж░ ржПржмржВ ржкрж░рзЗрж░ node ржерж╛ржХрждрзЗ рж╣ржмрзЗред

v[i] > v[i-1] && v[i] > v[i+1] тЖТ Local Maxima

v[i] < v[i-1] && v[i] < v[i+1] тЖТ Local Minima


рждрж╛ржЗ index 1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ v.size()-2 ржкрж░рзНржпржирзНржд ржЪрзЗржХ ржХрж░ржЫрзЛред


---

ЁЯФ╕ Step 3: Handle corner case (critical point < 2)

if (cr.size() < 2)
    return {-1, -1};

тЮбя╕П ржпржжрж┐ рзиржЯрж┐рж░ ржХржо critical point ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржкрзНрж░рж╢рзНржи ржЕржирзБржпрж╛рзЯрзА [-1, -1] return ржХрж░рждрзЗ рж╣ржмрзЗред


---

ЁЯФ╕ Step 4: Calculate all distances

vector<int> vv;
for (int j = 0; j < cr.size() - 1; j++) {
    vv.push_back(abs(cr[j] - cr[j+1]));
}

тЮбя╕П ржкрж░ржкрж░ ржпрзЗржХрзЛржирзЛ рзиржЯрж╛ critical point ржПрж░ ржоржзрзНржпржХрж╛рж░ ржжрзВрж░рждрзНржм abs(index difference) рж╣рж┐рж╕рзЗржм ржХрж░ржЫрзЛред


---

ЁЯФ╕ Step 5: Final Answer

vector<int> ans;
ans.push_back(findmin(vv));
ans.push_back(cr.back() - cr.front());

тЬЕ Minimum Distance: тЖТ ржкрж░ржкрж░ critical point ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ ржпрзЗ ржХржо ржжрзВрж░рждрзНржм ржЖржЫрзЗ vv array ржерзЗржХрзЗ findmin() ржжрж┐рзЯрзЗ ржмрзЗрж░ ржХрж░рж╛ред

тЬЕ Maximum Distance: тЖТ рж╕ржмржерзЗржХрзЗ ржкрзНрж░ржержо critical point ржерзЗржХрзЗ рж╢рзЗрж╖ critical point ржПрж░ index difference: cr.back() - cr.front()



---

тЬЕ Helper Functions

ЁЯФ╕ Find Min from vector

int findmin(vector<int>& arr) {
    int min = arr[0];
    for (int k = 1; k < arr.size(); k++) {
        if (arr[k] < min) min = arr[k];
    }
    return min;
}


---

тЬЕ Test Case 1: [3,1]

Vector: [3,1]
тЖТ Too short, no critical point
Return: [-1, -1]


---

тЬЕ Test Case 2: [5,3,1,2,5,1,2]

Index:   0 1 2 3 4 5 6
Value:   5 3 1 2 5 1 2

Critical Point Indices: [2, 4, 5]

- vv = [2, 1] тЖТ min = 1
- maxDist = 5 - 2 = 3
Return: [1, 3]


---

тЬЕ Test Case 3: [1,3,2,2,3,2,2,2,7]

Index:   0 1 2 3 4 5 6 7 8
Value:   1 3 2 2 3 2 2 2 7

Critical Point Indices: [1, 4]

- vv = [3] тЖТ min = 3
- maxDist = 4 - 1 = 3
Return: [3, 3]


---

ЁЯФЪ Summary (Bangla):

ЁЯФ╕ ржкрзНрж░ржержорзЗ рж▓рж┐ржЩрзНржХржб рж▓рж┐рж╕рзНржЯржХрзЗ ржнрзЗржХрзНржЯрж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж┐ред
ЁЯФ╕ рждрж╛рж░ржкрж░ рзз ржерзЗржХрзЗ n-2 ржкрж░рзНржпржирзНржд рж▓рзБржк ржЪрж╛рж▓рж┐рзЯрзЗ local minima/maxima ржЪрзЗржХ ржХрж░рж┐ред
ЁЯФ╕ ржпржжрж┐ рзиржЯрж┐рж░ ржХржо critical point ржкрж╛ржЗ, рждрж╛рж╣рж▓рзЗ [-1,-1] return ржХрж░рж┐ред
ЁЯФ╕ ржирж╛ рж╣рж▓рзЗ, ржкрж░ржкрж░ index-ржПрж░ ржоржзрзНржпрзЗ min gap ржмрзЗрж░ ржХрж░рж┐ (minDistance),
ЁЯФ╕ ржПржмржВ ржкрзНрж░ржержо ржУ рж╢рзЗрж╖ critical point-ржПрж░ ржоржзрзНржпрзЗ gap ржмрзЗрж░ ржХрж░рж┐ (maxDistance)ред

Full Code:
-----------
class Solution
{
public:
    int findmax(vector<int>&arr)
    {
        int max=arr[0];
        for(int k=1;k<arr.size();k++)
            {
                if(arr[k]>max)
                {
                    max=arr[k];
                }
            }
        return max;
    }
    int findmin(vector<int>& arr)
{
    int min = arr[0];
    for(int k = 1; k < arr.size(); k++)
    {
        if(arr[k] < min)
        {
            min = arr[k];
        }
    }
    return min;
}
    vector<int> nodesBetweenCriticalPoints(ListNode* head) 
    {
        vector<int>v;
        while(head!=nullptr)
            {
                v.push_back(head->val);
                head=head->next;
            }
        vector<int>cr;
        for(int i=1;i<v.size()-1;i++)
            {
                if(((v[i]>v[i-1])&&(v[i]>v[i+1]))||((v[i])<v[i-1])&&(v[i])<v[i+1])
                {
                    cr.push_back(i);
                }
            }
        if(cr.size()<2) return {-1,-1};
        vector<int>vv;
        for(int j=0;j<cr.size()-1;j++ )
            {
                vv.push_back(abs(cr[j]-cr[j+1]));
            }
        vector<int>ans;
        ans.push_back(findmin(vv));
        ans.push_back(cr.back()-cr.front());
        return ans;
    }
};
