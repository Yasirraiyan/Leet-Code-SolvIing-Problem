‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶õ‡ßã ‡¶∏‡ßá‡¶ü‡¶ø ‡¶π‡¶≤‡ßã ‚Äî ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡¶§‡¶ó‡ßÅ‡¶≤‡ßá‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶∞‡ßü‡ßá‡¶õ‡ßá, ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá-‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡¶§‡¶ü‡¶ø ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶Æ‡¶æ‡¶® (distinct element) ‡¶Ü‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßü‡¶æ‡¶∞ (square) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßá‡¶æ ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶ø:
‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: nums = [1, 2, 1]
‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶ó‡ßÅ‡¶≤‡ßá‡¶æ:

Subarray	Distinct Count	Square
[1]	1	1
[2]	1	1
[1]	1	1
[1,2]	2	4
[2,1]	2	4
[1,2,1]	2	4
Total		15

üß† ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßú‡ßá‡¶á ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶≠‡¶æ‡¶¨‡¶¨‡ßã?
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡¶õ‡ßá:

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶è‡¶∞ distinct element ‡¶ó‡ßÅ‡¶®‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßá‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞:

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‚Üí ‡ß®‡¶ü‡¶æ ‡¶≤‡ßÅ‡¶™ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá-‡¶§‡ßá ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶§‡¶æ ‡¶ó‡ßã‡¶®‡¶æ ‚Üí unordered_map ‡¶¶‡¶ø‡ßü‡ßá efficiently ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

üß± Time Complexity:
‡¶Æ‡ßã‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá: O(n^2)

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶Æ‡¶æ‡¶® ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ: ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö O(n)

‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßü: O(n^3) (acceptable for n ‚â§ 100)

‚úÖ ‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Line by Line Bangla Explanation):
cpp
Copy
Edit
class Solution 
{
public:
    // Helper function: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶§‡¶ü‡¶ø ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶õ‡ßá ‡¶§‡¶æ ‡¶ó‡ßÅ‡¶®‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá
    int findDistinctvalue(vector<int>& nums)
    {
        unordered_map<int, int> freq;
        for (int i = 0; i < nums.size(); i++)
        {
            freq[nums[i]]++; // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ frequency ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã
        }
        return freq.size(); // ‡¶Æ‡ßã‡¶ü ‡¶ï‡¶§‡¶ü‡¶ø unique key ‡¶Ü‡¶õ‡ßá (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶Æ‡¶æ‡¶®)
    }

    int sumCounts(vector<int>& nums) 
    {
        int n = nums.size();
        int ans = 0; // Final ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá

        // ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá nested loop
        for (int i = 0; i < nums.size(); i++)
        {
            for (int j = i; j < nums.size(); j++)
            {
                vector<int> sub; // ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶¨‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶§‡ßà‡¶∞‡¶ø
                for (int k = i; k <= j; k++)
                {
                    sub.push_back(nums[k]); // i ‡¶•‡ßá‡¶ï‡ßá j ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® sub ‡¶§‡ßá ‡¶¢‡ßã‡¶ï‡¶æ‡¶®‡ßã
                }

                int distinct = findDistinctvalue(sub); // sub array ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßü‡¶ü‡¶æ ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
                ans += distinct * distinct; // ‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
            }
        }

        return ans; // ‡¶∏‡¶¨ ‡¶∏‡ßç‡¶ï‡ßü‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®
    }
};
üß™ Test Case Walkthrough:
cpp
Copy
Edit
nums = [1, 2, 1]
i = 0:

j = 0 ‚Üí sub = [1] ‚Üí distinct = 1 ‚Üí ans += 1

j = 1 ‚Üí sub = [1,2] ‚Üí distinct = 2 ‚Üí ans += 4

j = 2 ‚Üí sub = [1,2,1] ‚Üí distinct = 2 ‚Üí ans += 4

i = 1:

j = 1 ‚Üí sub = [2] ‚Üí distinct = 1 ‚Üí ans += 1

j = 2 ‚Üí sub = [2,1] ‚Üí distinct = 2 ‚Üí ans += 4

i = 2:

j = 2 ‚Üí sub = [1] ‚Üí distinct = 1 ‚Üí ans += 1

Total = 1 + 4 + 4 + 1 + 4 + 1 = 15 ‚úÖ

Full Code:
-----------

  class Solution 
{
public:
  int findDistinctvalue(vector<int>& nums)
  {
    unordered_map<int,int>freq;
    for(int i=0;i<nums.size();i++)
    {
      freq[nums[i]]++;
    }
    vector<int>v;
    for(auto it:freq)
    {
      v.push_back(it.first);
    }
    int ans=freq.size();
    return ans;
  }
    int sumCounts(vector<int>& nums) 
    {
      int n=nums.size();
      int ans=0;
     // vector<int> sub;
      for(int i=0;i<nums.size();i++)
      {
        for(int j=i;j<nums.size();j++)
        {
             vector<int> sub; 
          for(int k=i;k<=j;k++)
          {
            // ans+=findDistinctvalue(sub)*findDistinctvalue(sub);
            sub.push_back(nums[k]);
          }
            int distinct=findDistinctvalue(sub);
             ans+=distinct*distinct;
        }
      }
    
      return ans;
    }
};
