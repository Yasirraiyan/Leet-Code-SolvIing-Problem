‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßã ‡¶∏‡ßá‡¶ü‡¶æ ‡¶π‡¶≤‡ßã LeetCode-‡¶è‡¶∞ ‡¶¨‡¶ø‡¶ñ‡ßç‡¶Ø‡¶æ‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶É
üîç Find the Duplicate Number

üî∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá:
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶≤‡¶õ‡ßá:

‡¶è‡¶ï‡¶ü‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá nums ‡¶§‡ßá n+1 ‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 1 ‡¶•‡ßá‡¶ï‡ßá n ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡•§

‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá (rest ‡¶∏‡¶¨ unique)‡•§

‚ùó Array modification ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ, ‡¶è‡¶¨‡¶Ç ‚ùó ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ constant extra space ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§

üß† ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡¶õ‡ßã, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶¨‡¶æ ‡¶π‡¶≤‡ßã?
‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßú‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡ßá‡¶õ‡ßã:

"‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶õ‡ßá ‡¶Æ‡¶æ‡¶®‡ßá frequency count ‡¶ï‡¶∞‡¶≤‡ßá, ‡¶Ø‡ßá‡¶ü‡¶æ‡¶∞ frequency > 1, ‡¶∏‡ßá‡¶ü‡¶æ duplicate!"

‡¶§‡¶æ‡¶á ‡¶§‡ßÅ‡¶Æ‡¶ø hash map (unordered_map) ‡¶®‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ frequency count ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‚Äî ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ return ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

‚úÖ ‡¶ï‡ßá‡¶® ‡¶è‡¶á ‡¶∏‡¶≤‡¶ø‡¶â‡¶∂‡¶® accepted ‡¶π‡ßü ‡¶ï‡¶ø‡¶õ‡ßÅ test case ‡¶è?
‡¶Ø‡¶¶‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá constant extra space use ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá unordered_map ‡¶á‡¶â‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ø‡ßá‡¶ü‡¶æ worst case-‡¶è O(n) space ‡¶®‡ßá‡ßü‡•§

‡¶§‡¶¨‡ßÅ‡¶ì LeetCode ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá:

Extra space constraint relax ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶¶‡ßá‡¶ñ‡ßá‡•§

‡¶§‡¶æ‡¶á ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° Accepted ‡¶π‡ßü, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï duplicate number ‡¶¶‡ßá‡ßü‡•§

üîç ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Line-by-Line):
cpp
Copy
Edit
class Solution 
{
public:
    int findDuplicate(vector<int>& nums) 
‡¶è‡¶ï‡¶ü‡¶æ class Solution, ‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá findDuplicate ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® vector<int> ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá‡•§

cpp
Copy
Edit
    {
        unordered_map<int,int>freq;
‡¶è‡¶ï‡¶ü‡¶æ HashMap freq ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßã ‡¶Ø‡ßá‡¶ü‡¶æ key = ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ, value = ‡¶ï‡ßü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§

cpp
Copy
Edit
        for(int i=0;i<nums.size();i++)
        {
          freq[nums[i]]++;
        }
‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá freq map-‡¶è count ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶É nums = [3,1,3,4,2] ‚Üí freq ‡¶π‡¶¨‡ßá {1:1, 2:1, 3:2, 4:1}

cpp
Copy
Edit
        int ans;
        for(auto it:freq)
        {
          if(it.second>1)
          {
            ans=it.first;
            break;
          }
        }
HashMap ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ (key,value) ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶≤‡¶õ‡ßá‡•§

‡¶Ø‡¶æ‡¶∞ value > 1 ‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ø‡ßá‡¶ü‡¶æ repeat ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶∏‡ßá‡¶á ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ ans ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∞‡¶æ‡¶ñ‡¶õ‡ßã‡•§

cpp
Copy
Edit
        return ans;
    }
};
‡¶Ö‡¶¨‡¶∂‡ßá‡¶∑‡ßá ans ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‚Äî ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé duplicate number‡•§

üß™ Test Case ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü)
Test Case 1:
cpp
Copy
Edit
nums = [1,3,4,2,2]
Step-by-step Execution:
freq: {1:1, 2:2, 3:1, 4:1}

2 ‡¶è‡¶∏‡ßá‡¶õ‡ßá 2 ‡¶¨‡¶æ‡¶∞ ‚Üí ‡¶§‡¶æ‡¶á return 2

Output: ‚úÖ 2
Test Case 2:
cpp
Copy
Edit
nums = [3,1,3,4,2]
freq: {1:1, 2:1, 3:2, 4:1}

3 ‡¶è‡¶∏‡ßá‡¶õ‡ßá 2 ‡¶¨‡¶æ‡¶∞ ‚Üí return 3

Output: ‚úÖ 3
Test Case 3:
cpp
Copy
Edit
nums = [3,3,3,3,3]
freq: {3:5}

3 ‡¶è‡¶∏‡ßá‡¶õ‡ßá 5 ‡¶¨‡¶æ‡¶∞ ‚Üí return 3

Output: ‚úÖ 3
‚ö†Ô∏è ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ solution-‡¶è‡¶∞ Limitations (‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶Æ‡¶æ‡¶®‡ßá ‡¶®‡¶æ)
‚ùå ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶≤‡¶æ ‡¶Ü‡¶õ‡ßá:
‚ùå Modify ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ (‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° modify ‡¶ï‡¶∞‡ßá‡¶®‡¶ø)

‚ùå Extra space constant ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá (‚ùå ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡ßÅ‡¶Æ‡¶ø O(n) space use ‡¶ï‡¶∞‡ßá‡¶õ‡ßã unordered_map ‡¶¶‡¶ø‡ßü‡ßá)

So, Time Complexity: O(n),
Space Complexity: O(n) ‚Üí ‚ùå violates constraint

Full Code:
----------

  class Solution 
{
public:
    int findDuplicate(vector<int>& nums) 
    {
        unordered_map<int,int>freq;
        for(int i=0;i<nums.size();i++)
        {
          freq[nums[i]]++;
        }
        int ans;
        for(auto it:freq)
        {
          if(it.second>1)
          {
            ans=it.first;
            break;
          }
        }
        return ans;
    }
};
