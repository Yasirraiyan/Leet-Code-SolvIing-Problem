‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶ï‡ßã‡¶°‡¶ü‡¶ø map ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶Ø‡ßá ‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã nums ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§ (missing)‡•§

‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ line by line ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨ Bangla-‡¶§‡ßá, ‡¶∏‡¶π test case ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßÅ‡¶ù‡¶æ‡¶¨‡ßã ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡•§

üî∂ ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶™ (Bangla):
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø nums ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá n ‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ [1, n] ‡¶∞‡ßá‡¶û‡ßç‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡¶§‡ßã ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶¨‡ßá, ‡¶Ü‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶ì ‡¶Ü‡¶∏‡¶¨‡ßá ‡¶®‡¶æ‡•§

‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã: ‡ßß ‡¶•‡ßá‡¶ï‡ßá n ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ nums-‡¶è ‡¶®‡¶æ‡¶á, ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° (C++): Line by Line ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π
cpp
Copy
Edit
class Solution 
{
public:
    vector<int> findDisappearedNumbers(vector<int>& nums)
    {
        unordered_map<int,int> freq; // ‚ûä ‡¶´‡ßç‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø map
        
        int n = nums.size();         // ‚ûã nums ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú n = ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶§‡ßã
        
        vector<int> reserve;         // ‚ûå ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡ßß ‡¶•‡ßá‡¶ï‡ßá n ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
        vector<int> ans;             // ‚ûç ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã missing ‡¶∏‡ßá‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá

        // ‚ûé Step 1: reserve ‡¶è 1 ‡¶•‡ßá‡¶ï‡ßá n ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        for(int i = 1; i <= n; i++)
        {
            reserve.push_back(i);
        }

        // ‚ûè Step 2: nums[] ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡ßç‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßã
        for(int j = 0; j < nums.size(); j++)
        {
            freq[nums[j]]++;  // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø nums[j] ‡¶è‡¶∞ occurrence ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        }

        // ‚ûê Step 3: 1 ‡¶•‡ßá‡¶ï‡ßá n ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶®‡ßç‡¶∏‡¶ø 0 ‚Üí ‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∏‡ßá ‡¶®‡¶æ‡¶á
        for(int k = 0; k < reserve.size(); k++)
        {
            if(freq[reserve[k]] == 0)
            {
                ans.push_back(reserve[k]); // ‡¶®‡¶æ ‡¶Ü‡¶∏‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ push ‡¶ï‡¶∞‡ßã
            }
        }

        return ans;  // ‚ûë missing ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ list ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã
    }
};
üîç ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
cpp
Copy
Edit
Input:  nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
üéØ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:
n = 8

reserve = [1,2,3,4,5,6,7,8]

freq map =

yaml
Copy
Edit
{
  1: 1,
  2: 2,
  3: 2,
  4: 1,
  7: 1,
  8: 1
}
Now check reserve:

freq[1] = 1 ‚Üí skip

freq[2] = 2 ‚Üí skip

freq[3] = 2 ‚Üí skip

freq[4] = 1 ‚Üí skip

freq[5] = 0 ‚úÖ ‚Üí missing ‚Üí push

freq[6] = 0 ‚úÖ ‚Üí missing ‚Üí push

freq[7] = 1 ‚Üí skip

freq[8] = 1 ‚Üí skip

Output: [5, 6]

‚úÖ Time & Space Complexity ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:
Time Complexity:

O(n) ‚Üí reserve ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá

O(n) ‚Üí ‡¶´‡ßç‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶®‡ßç‡¶∏‡¶ø ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá

O(n) ‚Üí ‡¶Æ‡¶ø‡¶∏‡¶ø‡¶Ç ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá

Total: O(n) ‚úÖ

Space Complexity:

O(n) ‚Üí reserve ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá

O(n) ‚Üí map/freq

O(n) ‚Üí ans

‚ö†Ô∏è ‡¶§‡¶æ‡¶á Follow-up constraint (no extra space) ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§

üö´ Follow-up: No Extra Space?
‡¶è‡¶á ‡¶ï‡ßã‡¶°‡¶ü‡¶ø follow-up requirement:

"Could you do it without extra space and in O(n) runtime?"

‚Üí ‡¶è‡¶ü‡¶æ fulfill ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá:

unordered_map, reserve[], ‡¶è‡¶¨‡¶Ç ans[] ‚Üí extra space ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá


Full Code:
----------
  class Solution 
{
public:
    vector<int> findDisappearedNumbers(vector<int>& nums)
     {
      unordered_map<int,int>freq;
      int n=nums.size();
      vector<int>reserve;
         vector<int>ans;
      for(int i=1;i<=n;i++)
      {
           reserve.push_back(i);
      }
      for(int j=0;j<nums.size();j++)
      {
        freq[nums[j]]++;
      }
   
      for(int k=0;k<reserve.size();k++)
      {
        if(freq[reserve[k]]==0)
        {
          ans.push_back(reserve[k]);
        }
      }
      return ans;
    }
};
