ЁЯФ╢ ржкрзНрж░рж╢рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Bangla Explanation):
ржкрзНрж░рж╢рзНржи:
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ non-decreasing (ржорж╛ржирзЗ increasing ржЕржержмрж╛ ржПржХржЗ рж╕ржВржЦрзНржпрж╛рж░ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ) рж╕ржВржЦрзНржпрж╛рж░ array nums ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред
ржПржХржЯрж┐ target рж╕ржВржЦрзНржпрж╛ ржжрзЗржУрзЯрж╛ ржерж╛ржХржмрзЗред
рждрзБржорж┐ ржпржжрж┐ target ржЦрзБржБржЬрзЗ ржкрж╛ржУ, рждрж╛рж╣рж▓рзЗ ржУржЗ target-ржПрж░ ржкрзНрж░ржержо ржПржмржВ рж╢рзЗрж╖ index рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ рж╣ржмрзЗред

ржпржжрж┐ ржирж╛ ржкрж╛ржУ, рждрж╛рж╣рж▓рзЗ [-1, -1] рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

ржЙржжрж╛рж╣рж░ржг:

pgsql
Copy
Edit
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]  // ржХрж╛рж░ржг рзо ржкрзНрж░ржержо ржПрж╕рзЗржЫрзЗ index 3-ржП, ржЖрж░ рж╢рзЗрж╖ index 4-ржП

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1] // рзм ржПржЗ array-рждрзЗ ржирзЗржЗ
тЬЕ ржХрзА ржЪрж╛ржЗржЫрзЗ ржкрзНрж░рж╢рзНржирзЗ?
рждрзЛржорж╛ржХрзЗ ржПржоржи ржПржХржЯрж┐ ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗ ржпрзЗржЯрж╛рж░ time complexity O(log n) рж╣ржмрзЗред

ржПржЯрж╛ рж╢рзБржирзЗржЗ ржмрзЛржЭрж╛ ржпрж╛ржЪрзНржЫрзЗ, ржЖржорж╛ржжрзЗрж░ Binary Search ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ тАФ ржХрж╛рж░ржг Binary Search-ржПрж░ рж╕ржорзЯ ржЬржЯрж┐рж▓рждрж╛ O(log n)

ЁЯФБ ржХрж┐ржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЛ?
рждрзБржорж┐ ржпржжрж┐ Linear Search (line by line ржШрзЗржЯрзЗ ржжрзЗржЦрзЛ) ржХрж░рзЛ рждрж╛рж╣рж▓рзЗ Time Complexity рж╣ржмрзЗ O(n), ржпрзЗржЯрж╛ acceptable ржирж╛ред

Binary Search ржжрж┐рзЯрзЗ target ржЖржЫрзЗ ржХрж┐ржирж╛ рж╕рзЗржЯрж╛ ржмрзЗрж░ ржХрж░рждрзЗ ржкрж╛рж░рзЛ O(log n) ржПред

ржХрж┐ржирзНрждрзБ рж╢рзБржзрзБ ржЖржЫрзЗ ржХрж┐ржирж╛ ржирж╛ ржЬрзЗржирзЗ, ржкрзНрж░ржержо ржПржмржВ рж╢рзЗрж╖ occurrence ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗред
ржПржЯрж╛рж░ ржЬржирзНржп рждрзЛржорж╛ржХрзЗ ржжрзБржЯрж┐ ржЖрж▓рж╛ржжрж╛ Binary Search ржХрж░рждрзЗ рж╣ржмрзЗ:

ржПржХржмрж╛рж░ first occurrence ржЦрзБржБржЬржмрзЗред

ржЖрж░рзЗржХржмрж╛рж░ last occurrence ржЦрзБржБржЬржмрзЗред

ЁЯФН рждрзЛржорж╛рж░ ржжрзЗржУржпрж╝рж╛ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ (Bangla):
cpp
Copy
Edit
bool BinarySearch(vector<int>& nums, int target)
{
    // Binary Search ржжрж┐рзЯрзЗ check ржХрж░ржЫрзЛ target ржЖржЫрзЗ ржХрж┐ржирж╛
    bool find = false;
    int low = 0;
    int high = nums.size() - 1;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (nums[mid] < target)
            low = mid + 1;
        else if (nums[mid] > target)
            high = mid - 1;
        else
        {
            find = true;
            break;
        }
    }
    return find;
}
ржПржЗ ржлрж╛ржВрж╢ржи рж╢рзБржзрзБ ржмрж▓рзЗ ржжрзЗрзЯ target ржЖржЫрзЗ ржХрж┐ржирж╛ред

рждрж╛рж░ржкрж░ searchRange ржлрж╛ржВрж╢ржирзЗ:

cpp
Copy
Edit
if (!BinarySearch(nums, target)) 
{
    ans.push_back(-1);
    ans.push_back(-1);
    return ans;
}
рждрзБржорж┐ ржпржжрж┐ target ржирж╛ ржкрж╛ржУ, рждрж╛рж╣рж▓рзЗ [-1, -1] рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛред

ржЖрж░ ржпржжрж┐ ржкрж╛ржУ, рждржЦржи рждрзБржорж┐ nums array ржХрзЗ ржЖржмрж╛рж░ O(n) time-ржП рж▓рж╛ржЗржи ржзрж░рзЗ traverse ржХрж░рзЛ for loop ржжрж┐рзЯрзЗ тАФ ржпрж╛рждрзЗ first ржПржмржВ last index ржЦрзБржБржЬрзЗ ржкрж╛ржУред

ЁЯзк Test Case Walkthrough:
Test 1:
cpp
Copy
Edit
nums = [5,7,7,8,8,10], target = 8
findFirst тЖТ ржЦрзБржБржЬржмрзЗ ржмрж╛ржБ ржжрж┐ржХ тЖТ mid = 2 тЖТ nums[2] = 7 тЖТ ржХржо тЖТ ржбрж╛ржирзЗ ржЦрзБржБржЬрзЗ
тЖТ mid = 3 тЖТ nums[3] = 8 тЖТ match тЖТ high = mid - 1 тЖТ ржмрж╛ржБ ржжрж┐ржХрзЗ ржЦрзБржБржЬрзЗ
тЖТ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд first = 3

findLast тЖТ ржЦрзБржБржЬржмрзЗ ржбрж╛ржи ржжрж┐ржХ тЖТ mid = 2 тЖТ nums[2] = 7 тЖТ ржХржо тЖТ ржбрж╛ржирзЗ
тЖТ mid = 3 тЖТ 8 тЖТ match тЖТ low = mid + 1 тЖТ ржбрж╛ржирзЗ ржЦрзБржБржЬржмрзЗ
тЖТ mid = 4 тЖТ nums[4] = 8 тЖТ match тЖТ low = mid + 1 тЖТ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд last = 4

Final output: [3, 4]

ЁЯФЪ ржЙржкрж╕ржВрж╣рж╛рж░:
ржкрзНрж░рж╢рзНржирзЗ ржмрж▓рж╛ ржЫрж┐рж▓ O(log n) тЖТ рждрж╛ржЗ Binary Search ржжрж░ржХрж╛рж░ред

ржПржХржмрж╛рж░ ржирж╛, ржжрзБ'ржмрж╛рж░ Binary Search ржХрж░рж▓рзЗржЗ First ржУ Last ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред

рждрзЛржорж╛рж░ ржХрзЛржб accepted рж╣рж▓рзЗржУ O(n) time ржирж┐ржЪрзНржЫрзЗ тАФ рждрж╛ржЗ ржЙржирзНржиржд ржХрж░рж╛ ржЙржЪрж┐рждред

Full Code:
-----------

  class Solution 
{
public:
 bool BinarySearch(vector<int>& nums, int target)
 {
  bool find=false;
  int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
          int mid=(low+high)/2;
          if(nums[mid]<target)
          {
             low=mid+1;
          }
          if(nums[mid]>target)
          {
            high=mid-1;
          }
          if(nums[mid]==target)
          { find=true;
              break;
          }
        }
        return find;
 }
    vector<int> searchRange(vector<int>& nums, int target) 
    {
      vector<int>ans;
      int first=-1;
      int last=-1;
          if(!BinarySearch(nums,target))
          {
              ans.push_back(-1);
              ans.push_back(-1);
              return ans;
          }
              for(int k=0;k<nums.size();k++)
              {
                if(nums[k]==target)
                {
                  if(first==-1) first=k;
                  last=k;
                }
              }
                 ans.push_back(first);
              ans.push_back(last);
        return ans;
    }
};

