‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá ‡¶∏‡¶≤‡ßç‡¶Ø‡ßÅ‡¶∂‡¶®‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßã mergeTwoLists ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶¶‡¶Æ accepted ‡¶π‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶†‡¶ø‡¶ï‡¶†‡¶æ‡¶ï ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ step by step, line by line ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¨‡ßÅ‡¶ù‡¶¨‡ßã ‚Äì

üî∑ ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶¨‡ßã‡¶ù‡¶æ:
‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ sorted linked list ‡¶¶‡ßá‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ‡¶ï‡ßá merge ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶®‡¶§‡ßÅ‡¶® sorted linked list ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°:
cpp
Copy
Edit
class Solution 
{
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        vector<ListNode*> v1;
üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ vector ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßã v1 ‡¶®‡¶æ‡¶Æ‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá ListNode* ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§ ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ linked list ‡¶è‡¶∞ ‡¶∏‡¶¨ node ‡¶™‡ßÅ‡¶∂ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡•§

cpp
Copy
Edit
        while(list1 != nullptr)
        {
            v1.push_back(list1);
            list1 = list1->next;
        }
üîπ list1 ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ null ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶§‡¶ï‡ßç‡¶∑‡¶£ loop ‡¶ö‡¶≤‡¶¨‡ßá‡•§

üîπ list1 ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶®‡ßã‡¶° vector-‡¶è ‡¶¢‡ßÅ‡¶ï‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßã, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ list1-‡¶ï‡ßá ‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶®‡ßã‡¶°‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá move ‡¶ï‡¶∞‡¶æ‡¶ö‡ßç‡¶õ‡ßã‡•§

cpp
Copy
Edit
        while(list2 != nullptr)
        {
            v1.push_back(list2);
            list2 = list2->next;
        }
üîπ ‡¶è‡¶ï‡¶ø ‡¶≠‡¶æ‡¶¨‡ßá, list2 ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶®‡ßã‡¶° vector-‡¶è ‡¶™‡ßÅ‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

‚úÖ ‡¶è‡¶ñ‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ list1 ‡¶Ü‡¶∞ list2 ‡¶è‡¶∞ ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡ßã‡¶° v1 ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡ßá ‡¶Ü‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® sort ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

cpp
Copy
Edit
        sort(v1.begin(), v1.end(), [](ListNode* a, ListNode* b)
        {
            return a->val < b->val;
        });
üîπ ‡¶è‡¶ü‡¶æ ‡¶π‡¶≤‡ßã lambda function ‡¶∏‡¶π sort‡•§

üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ListNode* ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ a ‡¶Ü‡¶∞ b ‡¶è‡¶∞ val ‡¶ï‡ßá compare ‡¶ï‡¶∞‡¶õ‡ßã‡•§

üîπ ‡¶Ø‡ßá‡¶Æ‡¶®‡¶É ‡¶Ø‡¶¶‡¶ø a->val = 2 ‡¶è‡¶¨‡¶Ç b->val = 3 ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá 2 < 3, ‡¶§‡¶æ‡¶á ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶õ‡ßã‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßú ‡¶π‡¶¨‡ßá‡•§

cpp
Copy
Edit
        if(v1.empty()) return nullptr;
üîπ ‡¶Ø‡¶¶‡¶ø v1 ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßá list1 ‡¶è‡¶¨‡¶Ç list2 ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶õ‡¶ø‡¶≤, ‡¶§‡¶æ‡¶á nullptr ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶õ‡ßã‡•§

cpp
Copy
Edit
        ListNode* newhead = v1[0];
        ListNode* current = newhead;
üîπ v1[0] ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶õ‡ßã‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ, ‡¶è‡¶ï‡ßá newhead ‡¶ß‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ)‡•§

üîπ current ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶ì ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá newhead-‡¶è ‡¶Ü‡¶õ‡ßá‡•§

cpp
Copy
Edit
        for(int i = 1; i < v1.size(); i++)
        {
            current->next = v1[i];
            current = current->next;
        }
üîπ ‡¶è‡¶ñ‡¶® ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá v1 ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨ ‡¶®‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

üîπ current->next = v1[i]; ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßá, ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶®‡ßã‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡ßá‡¶∞‡¶ü‡¶æ ‡¶ú‡ßÅ‡ßú‡ßá ‡¶¶‡¶æ‡¶ì‡•§

üîπ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ current ‡¶ï‡ßá ‡¶™‡¶∞‡ßá‡¶∞ ‡¶®‡ßã‡¶°‡ßá move ‡¶ï‡¶∞‡¶æ‡¶ì‡•§

cpp
Copy
Edit
        current->next = nullptr;
üîπ ‡¶∏‡¶¨‡¶∂‡ßá‡¶∑‡ßá current->next ‡¶ï‡ßá nullptr ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßã ‡¶Ø‡ßá‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡ßá‡•§

cpp
Copy
Edit
        return newhead;
    }
};
üîπ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶®‡¶§‡ßÅ‡¶® linked list ‡¶è‡¶∞ head (newhead) ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶õ‡ßã‡•§

üîé Test Case walkthrough:
Example:
cpp
Copy
Edit
Input: list1 = [1,2,4], list2 = [1,3,4]
üîπ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá v1 = [1,2,4,1,3,4] ‡¶π‡¶¨‡ßá (‡¶∏‡ßç‡¶Æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßã, ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ListNode* ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞)‡•§

üîπ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ sort ‡¶ï‡¶∞‡¶≤‡ßá v1 = [1,1,2,3,4,4]

üîπ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ->next link ‡¶ï‡¶∞‡ßá:

rust
Copy
Edit
1 -> 1 -> 2 -> 3 -> 4 -> 4 -> nullptr
üîπ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶π‡¶¨‡ßá newhead, ‡¶Ø‡¶æ pointing ‡¶ï‡¶∞‡ßá 1st node ‡¶è‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá‡•§

‚úÖ Output: [1,1,2,3,4,4] ‚Äî Accepted!

üìå ‡¶ï‡ßá‡¶® ‡¶è‡¶ü‡¶æ Accepted?
Time Complexity:

O(n + m) = total nodes from both lists

Then sort ‚Üí O((n+m) log(n+m))

Final linking = O(n+m)
‚úîÔ∏è So total: O((n+m) log(n+m))

Space Complexity:

Extra space for vector ‚Üí O(n+m)

‡¶è‡¶ü‡¶æ acceptable ‡¶ï‡¶æ‡¶∞‡¶£ constrain ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ small input‡•§


Full Code:
------------

  /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
      vector<ListNode*> v1;
        while(list1!=nullptr)
        {
          v1.push_back(list1);
          list1=list1->next;
        }
        while(list2!=nullptr)
        {
          v1.push_back(list2);
          list2=list2->next;
        }
        sort(v1.begin(),v1.end(),[](ListNode* a,ListNode* b)
        {
          return a->val<b->val;
        });
        if(v1.empty()) return nullptr;
        ListNode* newhead=v1[0];//new ListNode(v1[0]);
        ListNode* current=newhead;
        for(int i=1;i<v1.size();i++)
        {
          current->next= v1[i];//new ListNode(v1[i]);
          current=current->next;
        }
        current->next=nullptr;
        return newhead;
}
    
};
