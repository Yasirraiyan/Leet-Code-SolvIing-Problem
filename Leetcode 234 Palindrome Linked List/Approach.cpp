üîç ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Reading the question and understanding the goal):
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡¶õ‡ßá:
‡¶è‡¶ï‡¶ü‡¶æ singly linked list ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá‡•§

‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶è‡¶ü‡¶ø Palindrome ‡¶ï‡¶ø‡¶®‡¶æ ‚Äî ‡¶Æ‡¶æ‡¶®‡ßá, ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡¶õ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßú‡¶≤‡ßá‡¶ì ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶á ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø Palindrome‡•§

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
Input: [1,2,2,1] ‚Üí Palindrome ‚Üí Output: true

Input: [1,2] ‚Üí Not a palindrome ‚Üí Output: false

‚úÖ ‡¶ï‡ßã‡¶° ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶≤‡ßá‡¶á‡¶®‡ßá‡¶∂‡¶® (Line-by-line Bangla ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ)
cpp
Copy
Edit
#include<stack> // ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶á‡¶®‡¶ï‡ßç‡¶≤‡ßÅ‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
cpp
Copy
Edit
class Solution 
{
public:
    bool isPalindrome(ListNode* head) 
    {
isPalindrome ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ, ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ ListNode* (linked list ‡¶è‡¶∞ head) ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡ßü ‡¶è‡¶¨‡¶Ç bool ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡•§

cpp
Copy
Edit
        stack<ListNode*> st;
        ListNode* current = head;
‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶æ stack ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶¨ ListNode* ‡¶™‡ßÅ‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

current ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶ü‡ßç‡¶∞‡¶æ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶¨‡ßã‡•§

cpp
Copy
Edit
        while(current != nullptr)
        {
            st.push(current);
            current = current->next;
        }
‡¶™‡ßÅ‡¶∞‡ßã ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶ü‡ßç‡¶∞‡¶æ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ListNode* ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï-‡¶è push ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

‡¶´‡¶≤‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶è ‡¶¢‡ßÅ‡¶ï‡¶¨‡ßá: ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá 1, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ 2, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ 2, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ 1‡•§

cpp
Copy
Edit
        string reserve = "";
        while(!st.empty())
        {
            reserve += to_string(st.top()->val);
            st.pop();
        }
‡¶è‡¶ñ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶•‡ßá‡¶ï‡ßá pop ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ val ‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï LIFO, ‡¶§‡¶æ‡¶á ‡¶™‡ßá‡¶õ‡¶® ‡¶¶‡¶ø‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡¶æ ‡¶Ü‡¶∏‡¶õ‡ßá‡•§

reserve ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶è‡¶ñ‡¶® ‡¶™‡ßÅ‡¶∞‡ßã ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ reverse order-‡¶è ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: [1,2,2,1] ‡¶π‡¶≤‡ßá, reserve ‡¶π‡¶¨‡ßá "1221"

cpp
Copy
Edit
        string reverese = "";
        for(int i = reserve.size() - 1; i >= 0; i--)
        {
            reverese += reserve[i];
        }
‡¶è‡¶¨‡¶æ‡¶∞ reserve ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶ü‡¶æ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ reverese ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§

‡¶è‡¶ñ‡¶æ‡¶®‡ßá reverese = "1221" ‚Üí ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶≤‡ßá "1221"

cpp
Copy
Edit
        bool ispalindrome = false;
        if(reverese == reserve)
        {
            ispalindrome = true;
        }
‡¶è‡¶ñ‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ reserve ‡¶ì reverese ‡¶è‡¶ï‡¶á ‡¶ï‡¶ø‡¶®‡¶æ‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø palindrome‡•§

cpp
Copy
Edit
        return ispalindrome;
    }
};
‡¶∂‡ßá‡¶∑‡ßá true ‡¶¨‡¶æ false ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

‚úÖ Test Case Walkthrough:
Example: head = [1, 2, 2, 1]
Step 1: Stack Push
Stack (top ‚Üí bottom)
1
2
2
1

Step 2: reserve = "" ‚Üí "1221"
(‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶•‡ßá‡¶ï‡ßá pop ‡¶ï‡¶∞‡ßá val ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ)

Step 3: reverese = "1221" (reserve ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá)
Step 4: Comparison
"1221" == "1221" ‚Üí ‚úÖ True ‚Üí Return true

ü§î ‡¶ï‡ßá‡¶® ‡¶ï‡ßã‡¶°‡¶ü‡¶ø Accepted ‡¶π‡¶≤‡ßã?
‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï‡¶Æ‡¶§ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶†‡¶ø‡¶ï output ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡•§

‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ï‡ßç‡¶∏‡¶ø‡¶ü‡¶ø: O(n) (‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶™‡¶™)

‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ï‡ßç‡¶∏‡¶ø‡¶ü‡¶ø: O(n) (‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï‡ßá n ‡¶ü‡¶æ ListNode*)
  Full Code:
  ---------

  /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 #include<stack>
class Solution 
{
public:
    bool isPalindrome(ListNode* head) 
    {
        stack<ListNode*>st;
        ListNode* current=head;
        while(current!=nullptr)
        {
          st.push(current);
          current=current->next;
        }
        string reserve="";
        while(!st.empty())
        {
          reserve+=to_string(st.top()->val);
          st.pop();
        }
        string reverese="";
        for(int i=reserve.size()-1;i>=0;i--)
        {
          reverese+=reserve[i];
        }
        bool ispalindrome=false;
        if(reverese==reserve)
        {
          ispalindrome=true;
        }
        return ispalindrome;
    }
};
