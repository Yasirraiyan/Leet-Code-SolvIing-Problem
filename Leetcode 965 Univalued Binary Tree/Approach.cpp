ЁЯФ╢ рж╕ржорж╕рзНржпрж╛рж░ ржмрзНржпрж╛ржЦрзНржпрж╛ (Problem Explanation)

рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ Binary Tree ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред рж╕ржорж╕рзНржпрж╛ ржмрж▓ржЫрзЗ:

> ржпржжрж┐ ржЧрж╛ржЫрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ node ржПрж░ ржорж╛ржи (value) ржПржХржЗ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ return true, ржирж╛ рж╣рж▓рзЗ falseред



ржПржХ ржХржерж╛рзЯ, ржПржЗ ржЧрж╛ржЫржЯрж┐ uni-valued ржХрж┐ржирж╛ рж╕рзЗржЯрж╛ ржирж┐рж░рзНржгрзЯ ржХрж░рждрзЗ рж╣ржмрзЗред


---

ЁЯФ╢ ржХрзАржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ рж╢рзБрж░рзБ ржХрж░ржмрзЛ? (How to Think)

ржкрзНрж░ржержорзЗржЗ рж▓ржХрзНрж╖рзНржп ржХрж░рж┐, ржЖржорж░рж╛ ржПржХржЯрж┐ binary tree ржкрзЗржпрж╝рзЗржЫрж┐ ржПржмржВ ржЖржорж╛ржжрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ node ржШрзБрж░рзЗ ржжрзЗржЦрждрзЗ рж╣ржмрзЗ ржпрзЗ рж╕ржмрж╛рж░ value ржПржХржЗ ржХрж┐ржирж╛ред

ржЪрж┐ржирзНрждрж╛рж░ ржзрж╛ржк:

1. ржпрзЗржХрзЛржирзЛ traversal (DFS ржмрж╛ BFS) ржХрж░рзЗ tree ржПрж░ ржкрзНрж░рждрж┐ржЯрж┐ node-ржПрж░ value collect ржХрж░рзЛред


2. ржПржЗ value ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ ржпржжрж┐ ржПржХрзЗрж░ ржмрзЗрж╢рж┐ ржнрж┐ржирзНржи value ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ tree uni-valued ржирж╛ред


3. рж╕ржм value ржпржжрж┐ ржПржХржЗ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ uni-valuedред



ржЖржорж░рж╛ ржПржЦрж╛ржирзЗ BFS traversal ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрж┐ред


---

ЁЯФ╢ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ (Line-by-Line Code Explanation in Bangla)

class Solution
{
public:

тЮд Solution ржХрзНрж▓рж╛рж╕ рж╢рзБрж░рзБред ржПрждрзЗ bfs() ржПржмржВ isUnivalTree() ржлрж╛ржВрж╢ржи ржЖржЫрзЗред


---

ЁЯФ╣ BFS Function

vector<int>bfs(TreeNode* root)
{
    vector<int>v;
    if(!root) return v;

тЮд bfs() ржлрж╛ржВрж╢ржи ржПржХржЯрж┐ level-order traversal ржХрж░рзЗ рж╕ржм node ржПрж░ value v рждрзЗ ржЬржорж╛ рж░рж╛ржЦрзЗред ржпржжрж┐ root ржирж╛ ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ ржЦрж╛рж▓рж┐ ржнрзЗржХрзНржЯрж░ ржлрзЗрж░ржд ржжрзЗржпрж╝ред

queue<TreeNode*>q;
    q.push(root);

тЮд BFS ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ queue ржирзЗржпрж╝рж╛ рж╣рж▓рзЛ ржПржмржВ root node queue-рждрзЗ ржврзБржХрж╛ржирзЛ рж╣рж▓рзЛред

while(!q.empty())
    {
        TreeNode* curr=q.front();
        q.pop();
        v.push_back(curr->val);

тЮд queue ржпрждржХрзНрж╖ржг ржЦрж╛рж▓рж┐ ржирж╛ рж╣ржпрж╝, рждрждржХрзНрж╖ржг ржЪрж▓ржмрзЗред рж╕рж╛ржоржирзЗ ржерзЗржХрзЗ ржПржХржЯрж┐ node ржирж┐ржпрж╝рзЗ рждрж╛рж░ value v рждрзЗ рж░рж╛ржЦрж╛ рж╣рж▓рзЛред


---

ЁЯФ╣ Children check:

if(curr->left!=nullptr)
        {
            q.push(curr->left);
            v.push_back(curr->left->val);
        }
        if(curr->right!=nullptr)
        {
            q.push(curr->right);
            v.push_back(curr->right->val);
        }
    }

тЮд ржпржжрж┐ current node-ржПрж░ left ржмрж╛ right child ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ржХрзЗржУ queue рждрзЗ ржврзБржХрж╛ржУ ржПржмржВ рждрж╛рж░ value v рждрзЗ рж░рж╛ржЦрзЛред

тЭЧNote: ржПржЦрж╛ржирзЗ ржПржХржЯрзБ optimization ржХрж░рж╛ ржпрзЗржд: child node ржЧрзБрж▓рзЛрж░ value ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ v.push_back() ржХрж░рж╛рж░ ржжрж░ржХрж╛рж░ ржирзЗржЗ ржХрж╛рж░ржг BFS рждрзЗ ржкрж░рзЗрж░ iteration-ржП ржУржжрзЗрж░ value ржирзЗржпрж╝рж╛ рж╣ржмрзЗред


---

return v;
}

тЮд ржЕржмрж╢рзЗрж╖рзЗ v ржирж╛ржоржХ vector ржЯрж╛ return ржХрж░рж▓рзЛ ржпрж╛рждрзЗ рж╕ржм node-ржПрж░ value ржЖржЫрзЗред


---

ЁЯФ╣ isUnivalTree Function

bool isUnivalTree(TreeNode* root) 
{
    vector<int>v=bfs(root);

тЮд bfs() ржПрж░ ржорж╛ржзрзНржпржорзЗ рж╕ржм node value ржПржХржЯрж┐ vector v рждрзЗ ржЖржирж▓рж╛ржоред

unordered_map<int,int>freq;
    for(int i=0;i<v.size();i++)
    {
        freq[v[i]]++;
    }

тЮд freq ржирж╛ржоржХ hash map ржП ржкрзНрж░рждрж┐ржЯрж┐ ржнрзНржпрж╛рж▓рзБрж░ frequency count ржХрж░ржЫрж┐ред

vector<int>vv;
    for(auto it:freq)
    {
        vv.push_back(it.first);
    }

тЮд ржнрж┐ржирзНржи ржнрж┐ржирзНржи ржорж╛ржи (value) vv ржирж╛ржоржХ vector ржП рж░рзЗржЦрзЗржЫрж┐ред

bool unique=true;
    if(vv.size()!=1) 
    {
        unique=false;
    }
    return unique;
}

тЮд ржпржжрж┐ vv.size() != 1, рждрж╛рж╣рж▓рзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ tree ржЯрж┐ uni-valued ржирж╛ред


---

тЬЕ ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзБржЭрж┐ (Test Case Analysis)


---

тЬЕ Example 1:

Input: [1,1,1,1,1,null,1]

1
       / \
      1   1
     / \   \
    1   1   1

тЮд рж╕ржм node-ржПрж░ value = 1
тЮд freq map: {1: 6}
тЮд vv.size() = 1
ЁЯФЪ Output: true


---

тЭМ Example 2:

Input: [2,2,2,5,2]

2
     / \
    2   2
   / \
  5   2

тЮд node values: 2,2,2,5,2
тЮд freq map: {2: 4, 5: 1}
тЮд vv.size() = 2
ЁЯФЪ Output: false


---

ЁЯФ╢ Time and Space Complexity

Time Complexity: O(n) тЖТ n = number of nodes (traverse every node once)

Space Complexity: O(n) тЖТ BFS queue and value vector both may take O(n) space

  Full Code:
---------------

class Solution
{
public:
    vector<int>bfs(TreeNode* root)
    {
        vector<int>v;
        if(!root) return v;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
            {
                TreeNode* curr=q.front();
                q.pop();
                v.push_back(curr->val);
        if(curr->left!=nullptr)
            {
                q.push(curr->left);
                v.push_back(curr->left->val);
                //q.pop();
            }
                if(curr->right!=nullptr)
                {
                    
                q.push(curr->right);
                v.push_back(curr->right->val);
                //q.pop();
            }
            }
        return v;
        
    }
    bool isUnivalTree(TreeNode* root) 
    {
        vector<int>v=bfs(root);
        unordered_map<int,int>freq;
        for(int i=0;i<v.size();i++)
            {
                freq[v[i]]++;
            }
        vector<int>vv;
        for(auto it:freq)
            {
                vv.push_back(it.first);
            }
        bool unique=true;
        if(vv.size()!=1) 
        {
            unique=false;
        }
        return unique;
    }
};
