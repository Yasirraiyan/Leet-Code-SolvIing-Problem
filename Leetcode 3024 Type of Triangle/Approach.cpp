ЁЯФ╢ ржкрзНрж░ржмрж▓рзЗржоржЯрж┐ ржмрзБржЭрж┐:

рждрж┐ржиржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ nums array рждрзЗред ржПржЧрзБрж▓рзЛрж░ ржжрзНржмрж╛рж░рж╛ ржХрзЛржирзЛ рждрзНрж░рж┐ржнрзБржЬ (triangle) ржЧржаржи ржХрж░рж╛ ржпрж╛ржмрзЗ ржХрж┐ржирж╛ тАФ ржпржжрж┐ ржпрж╛рзЯ рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ equilateral, isosceles, ржирж╛ scalene тАФ рж╕рзЗржЯрж╛ return ржХрж░рждрзЗ рж╣ржмрзЗред


---

ЁЯФ╖ Triangle ржЧржаржи ржХрж░рж╛рж░ рж╢рж░рзНржд (Triangle Inequality):

рждрж┐ржиржЯрж┐ ржкрж╛рж░рзНрж╢рзНржм a, b, c ржжрзНржмрж╛рж░рж╛ ржПржХржЯрж┐ рждрзНрж░рж┐ржнрзБржЬ ржЧржарж┐ржд рж╣рждрзЗ рж╣рж▓рзЗ, ржирж┐ржЪрзЗрж░ рж╢рж░рзНрждржЧрзБрж▓рзЛ ржкрзВрж░ржг ржХрж░рждрзЗ рж╣ржмрзЗ:

a + b > c
b + c > a
c + a > b

ржпрзЗржХрзЛржирзЛ ржжрзБржЗ ржкрж╛рж░рзНрж╢рзНржмрзЗрж░ ржпрзЛржЧржлрж▓ рждрзГрждрзАрзЯ ржкрж╛рж░рзНрж╢рзНржмрзЗрж░ ржЪрзЗрзЯрзЗ ржмрзЬ рж╣рждрзЗ рж╣ржмрзЗред


---

ЁЯФ╖ Triangle ржПрж░ ржкрзНрж░ржХрж╛рж░ржнрзЗржж:

1. Equilateral (рж╕ржоржмрж╛рж╣рзБ): рждрж┐ржиржЯрж┐ ржкрж╛рж░рзНрж╢рзНржмржЗ рж╕ржорж╛ржиред


2. Isosceles (рж╕ржоржжрзНржмрж┐ржмрж╛рж╣рзБ): ржарж┐ржХ ржжрзБржЗржЯрж┐ ржкрж╛рж░рзНрж╢рзНржм рж╕ржорж╛ржиред


3. Scalene (ржмрж┐рж╖ржоржмрж╛рж╣рзБ): рж╕ржм ржкрж╛рж░рзНрж╢рзНржм ржнрж┐ржирзНржиред




---

тЬЕ ржкрзНрж░ржмрж▓рзЗржо рж╕рж▓ржн ржХрж░рж╛рж░ ржзрж╛ржкрж╕ржорзВрж╣ (Approach):

1. тЬЕ ржкрзНрж░ржержорзЗ ржЪрзЗржХ ржХрж░ржм рждрж┐ржиржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржжрзНржмрж╛рж░рж╛ ржХрзЛржирзЛ triangle ржЧржаржи ржХрж░рж╛ ржпрж╛рзЯ ржХрж┐ржирж╛ (triangle inequality check)ред


2. тЭМ ржпржжрж┐ ржирж╛ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ return ржХрж░ржм "none"ред


3. тЬЕ ржпржжрж┐ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ frequency check ржХрж░ржм тАФ ржХрзЯржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж╕ржорж╛ржиред

ржпржжрж┐ рждрж┐ржиржЯрж┐ржЗ рж╕ржорж╛ржи рж╣рзЯ тЖТ "equilateral"

ржпржжрж┐ ржжрзБржЗржЯрж┐ рж╕ржорж╛ржи рж╣рзЯ тЖТ "isosceles"

ржпржжрж┐ рж╕ржм ржЖрж▓рж╛ржжрж╛ рж╣рзЯ тЖТ "scalene"





---

ЁЯФа ржПржЦржи ржХрзЛржбрзЗрж░ рж▓рж╛ржЗржирзЗ рж▓рж╛ржЗржирзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж┐:

class Solution {
public:
    string triangleType(vector<int>& nums) {
        unordered_map<int,int>freq;
        string ans="";

ЁЯФ╕ ржЖржорж░рж╛ frequency count ржХрж░рж╛рж░ ржЬржирзНржп unordered_map<int, int> freq ржирж┐ржЪрзНржЫрж┐, ржпрзЗржЦрж╛ржирзЗ рж╕ржВржЦрзНржпрж╛ ржХрзЯржмрж╛рж░ ржПрж╕рзЗржЫрзЗ рж╕рзЗржЯрж╛ ржЧржгржирж╛ рж╣ржмрзЗред
ЁЯФ╕ ans рж╕рзНржЯрзЛрж░ ржХрж░ржмрзЗ ржлрж╛ржЗржирж╛рж▓ ржЙрждрзНрждрж░ред


---

for(int i=0;i<nums.size();i++) {
            freq[nums[i]]++;
        }

ЁЯФ╕ рждрж┐ржиржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ frequency ржЧржгржирж╛ ржХрж░ржЫрж┐ тАФ ржпржжрж┐ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ рзй ржмрж╛рж░ ржерж╛ржХрзЗ тЖТ рж╕ржоржмрж╛рж╣рзБ, рзи ржмрж╛рж░ тЖТ рж╕ржоржжрзНржмрж┐ржмрж╛рж╣рзБред


---

int a=nums[0];
        int b=nums[1];
        int c=nums[2];

        if(a+b<=c||b+c<=a||c+a<=b) {
            return "none";
        }

ЁЯФ╕ Triangle Inequality Check ржХрж░рж▓рж╛ржоред ржпржжрж┐ рждрзНрж░рж┐ржнрзБржЬ ржЧржаржиржЗ ржирж╛ ржХрж░рзЗ рждрж╛рж╣рж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ return "none"ред


---

bool three=false;
        bool two=false;
        for(int j=0;j<nums.size();j++) {
            if(freq[nums[j]]==3) {
                three=true;
            }
            else if(freq[nums[j]]==2) {
                two=true;
            }
        }

ЁЯФ╕ ржПржЦржи ржЖржорж░рж╛ frequency ржжрзЗржЦрзЗ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирж┐ржЪрзНржЫрж┐:

рзй ржмрж╛рж░ тЖТ рж╕ржоржмрж╛рж╣рзБ

рзи ржмрж╛рж░ тЖТ рж╕ржоржжрзНржмрж┐ржмрж╛рж╣рзБ



---

if(three) {
            ans= "equilateral";
        }
        else if(two) {
            ans= "isosceles";
        }
        else {
            ans="scalene";
        }
        return ans;

ЁЯФ╕ ржПржмрж╛рж░ ржЖржорж░рж╛ three, two ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржжрзЗржЦрзЗ ржЙрждрзНрждрж░ set ржХрж░ржЫрж┐ ржПржмржВ return ржХрж░ржЫрж┐ред


---

ЁЯУМ ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:

тЮд Test case: nums = [3,3,3]

1. 3 + 3 > 3, рж╕ржм рждрж┐ржиржЯрж┐ рж╢рж░рзНржд ржкрзВрж░рзНржг, рждрж╛ржЗ Triangle ржЧржаржи рж╣рзЯ тЬЕ


2. рждрж┐ржиржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ frequency тЖТ 3: 3 ржмрж╛рж░


3. рждрж┐ржиржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж╕ржорж╛ржи тЖТ Return: "equilateral"




---

тЮд Test case: nums = [3,4,5]

1. 3 + 4 = 7 > 5, 4 + 5 = 9 > 3, 5 + 3 = 8 > 4 тЬЕ


2. рждрж┐ржиржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржнрж┐ржирзНржи тЖТ Return: "scalene"




---

тЮд Test case: nums = [1,2,3]

1. 1 + 2 = 3 <= 3 тЭМ Triangle inequality fail тЖТ Return: "none"




---

тЬЕ ржПржЗ ржХрзЛржб Accepted ржХрзЗржи?

рж╕ржарж┐ржХржнрж╛ржмрзЗ triangle inequality check ржХрж░ржЫрзЗред

рждрж╛рж░ржкрж░рзЗ frequency count ржХрж░рзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ Triangle ржПрж░ type ржЪрж┐рж╣рзНржирж┐ржд ржХрж░ржЫрзЗред

рж╕ржм condition cover ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

Time Complexity: O(1) (ржХрж╛рж░ржг input рж╕ржмрж╕ржорзЯ 3 elements)

Space Complexity: O(1)

Full Code:
-------------

class Solution
{
public:
    string triangleType(vector<int>& nums) 
    {
        unordered_map<int,int>freq;
        string ans="";
        for(int i=0;i<nums.size();i++)
            {
                freq[nums[i]]++;
            }
        int a=nums[0];
        int b=nums[1];
        int c=nums[2];
        if(a+b<=c||b+c<=a||c+a<=b)
        {
            return "none";
            //return ans;
        }
        bool three=false;
        bool two=false;
        for(int j=0;j<nums.size();j++)
            {
                if(freq[nums[j]]==3)
                {
                   /* ans=*///return "equilateral";
                    three=true;
                }
                else if(freq[nums[j]]==2)
                {
                    /*ans=*///return "isosceles";
                    two=true;
                }
            }
        if(three) 
        {
            ans= "equilateral";
        }
       else if(two) 
       {
           ans= "isosceles";
       }
        else 
       {
           ans="scalene";
       }
            return ans;
    }
    
};
