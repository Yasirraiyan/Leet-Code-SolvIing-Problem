рждрзБржорж┐ ржЦрзБржм ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржкрзНрж░рж╢рзНржиржЯрж╛ ржзрж░рзЗржЫрзЛ ржПржмржВ рж╕рзНржЯрзНржпрж╛ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ reverseList рж╕рж▓рзНржпрзБрж╢ржи рж▓рж┐ржЦрзЗржЫрзЛред ржПржЦржи ржирж┐ржЪрзЗ ржкрзНрж░рж╢рзНржи ржкрзЬрж╛рж░ рж╕ржорзЯ рждрзБржорж┐ ржХрзАржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗ, ржХрзАржнрж╛ржмрзЗ рждрзЛржорж╛рж░ рж╕ржорж╛ржзрж╛ржи рждрзИрж░рж┐ рж╣ржмрзЗ ржПржмржВ ржХрзЗржи рждрзЛржорж╛рж░ ржХрзЛржб ржЕрзНржпрж╛ржХрж╕рзЗржкрзНржЯрзЗржб рж╣рзЯтАФрж╕ржм ржХрж┐ржЫрзБ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛рзЯ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░ржЫрж┐:

ЁЯФН ржкрзНрж░рж╢рзНржи ржмрзБржЭрж┐ ржХрж┐ржнрж╛ржмрзЗ?
ржкрзНрж░рж╢рзНржи:
ржЖржорж╛ржжрзЗрж░ ржПржХржЯрж╛ рж╕рж┐ржЩрзНржЧрж▓рж┐ рж▓рж┐ржВржХржб рж▓рж┐рж╕рзНржЯ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред ржПржЗ рж▓рж┐рж╕рзНржЯржЯрж╛ рж░рж┐ржнрж╛рж░рзНрж╕ ржХрж░рзЗ ржлрзЗрж░ржд ржжрж┐рждрзЗ рж╣ржмрзЗред

ржЙржжрж╛рж╣рж░ржг:

[1,2,3,4,5] тЖТ [5,4,3,2,1]

[1,2] тЖТ [2,1]

[] тЖТ []

ЁЯза ржЪрж┐ржирзНрждрж╛рж░ ржзрж╛ржк (Approach in Bangla):
ЁЯФ╕ рж▓рж┐ржВржХржб рж▓рж┐рж╕рзНржЯрзЗрж░ ржкрзНрж░рждрж┐ржЯрж╛ ржПрж▓рж┐ржорзЗржирзНржЯрзЗ ржПржХржмрж╛рж░ ржХрж░рзЗ ржпрзЗрждрзЗ ржкрж╛рж░рж┐ред
ЁЯФ╕ stack ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ Last In First Out (LIFO) ржкрзНрж░рж┐ржирзНрж╕рж┐ржкрж╛рж▓ ржЕржирзБржпрж╛рзЯрзА ржпрзЗржЯрж╛ рж╢рзЗрж╖рзЗ ржврзБржХржмрзЗ рж╕рзЗржЯрж╛ ржкрзНрж░ржержорзЗ ржмрзЗрж░ рж╣ржмрзЗ тАФ ржЕрж░рзНржерж╛рзО рж▓рж┐рж╕рзНржЯ рж░рж┐ржнрж╛рж░рзНрж╕ ржХрж░рж╛рж░ ржХрж╛ржЬ рж╕рж╣ржЬ рж╣рзЯрзЗ ржпрж╛ржмрзЗред

ЁЯУж рж╕рзНржЯрзНржпрж╛ржХ ржнрж┐рждрзНрждрж┐ржХ рж╕рж▓рзНржпрзБрж╢ржи:
тЬЕ рж╕рзНржЯрзЗржк ржмрж╛ржЗ рж╕рзНржЯрзЗржк ржмрзНржпрж╛ржЦрзНржпрж╛:
cpp
Copy
Edit
ListNode* reverseList(ListNode* head) {
    stack<ListNode*> st;   // 1я╕ПтГг рж▓рж┐рж╕рзНржЯрзЗрж░ рж╕ржм ржирзЛржбржХрзЗ ржПржЦрж╛ржирзЗ рж░рж╛ржЦржмрзЛ
    while(head != nullptr) {
        st.push(head);      // ржкрзНрж░рждрж┐ржЯрж╛ ржирзЛржб рж╕рзНржЯрзНржпрж╛ржХрзЗ ржврзБржХрж╛ржЪрзНржЫрж┐
        head = head->next;  // ржкрж░рзЗрж░ ржирзЛржбрзЗ ржпрж╛ржЪрзНржЫрж┐
    }

    if (st.empty()) return nullptr; // 2я╕ПтГг ржпржжрж┐ рж▓рж┐рж╕рзНржЯ ржлрж╛ржБржХрж╛ рж╣рзЯ, рж╕рж░рж╛рж╕рж░рж┐ рж░рж┐ржЯрж╛рж░рзНржи

    ListNode* newHead = st.top();  // 3я╕ПтГг рж╕рзНржЯрзНржпрж╛ржХ ржерзЗржХрзЗ ржкрзНрж░ржержорзЗ ржмрзЗрж░ рж╣ржУрзЯрж╛ ржирзЛржб рж╣ржмрзЗ ржирждрзБржи рж╣рзЗржб
    st.pop();
    ListNode* current = newHead;

    while (!st.empty()) {         // 4я╕ПтГг ржпрждржХрзНрж╖ржг ржирж╛ рж╕рзНржЯрзНржпрж╛ржХ ржлрж╛ржБржХрж╛
        current->next = st.top(); // рж▓рж╛рж╕рзНржЯ ржЗржи тЖТ ржПржЦржи ржирзЗржХрзНрж╕ржЯрзЗ рж╕рзЗржЯ ржХрж░рж▓рж╛ржо
        st.pop();
        current = current->next;
    }

    current->next = nullptr;      // 5я╕ПтГг рж╢рзЗрж╖ ржирзЛржбрзЗрж░ ржкрж░ nullptr ржжрж┐рждрзЗ рж╣ржмрзЗ
    return newHead;
}
тЬЕ ржХрзЗржи Accepted рж╣рж▓рзЛ?
рж╕ржорзЯ ржЬржЯрж┐рж▓рждрж╛ (Time Complexity): O(n) тАФ ржкрзНрж░рждрж┐ржЯрж╛ ржирзЛржб ржПржХржмрж╛рж░ рж╕рзНржЯрзНржпрж╛ржХрзЗ, ржПржХржмрж╛рж░ ржмрзЗрж░

рж╕рзНржерж╛ржи ржЬржЯрж┐рж▓рждрж╛ (Space Complexity): O(n) тАФ ржХрж╛рж░ржг ржЖржорж░рж╛ рж╕рзНржЯрзНржпрж╛ржХрзЗ n ржЯрж╛ ржирзЛржб рж░рж╛ржЦржЫрж┐

рж╕ржорж╕рзНржд edge case ржХржнрж╛рж░ ржХрж░рзЗржЫрзЗ: ржпрзЗржоржи [], 1 ржЯрж╛ ржирзЛржб, n ржЯрж╛ ржирзЛржб ржЗрждрзНржпрж╛ржжрж┐ред

ЁЯзк ржХрж┐ржнрж╛ржмрзЗ Test ржХрж░ржмрзЛ?
Test Case 1:

cpp
Copy
Edit
Input: [1, 2, 3]
Expected Output: [3, 2, 1]
Test Case 2:

cpp
Copy
Edit
Input: []
Expected Output: []
Test Case 3:

cpp
Copy
Edit
Input: [42]
Expected Output: [42]
ЁЯТб ржЖрж░ржУ ржнрж╛рж▓рзЛ ржХрж┐ ржХрж░рж╛ ржпрзЗржд?
рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗржЗ stack ржЫрж╛рзЬрж╛ ржПржХржЯрж┐ efficient solution ржХрж░рждрзЗ ржкрж╛рж░рзЛ ржпрзЗржЯрж╛ O(1) space ржП ржХрж╛ржЬ ржХрж░рзЗ:

cpp
Copy
Edit
ListNode* reverseList(ListNode* head) {
    ListNode* prev = nullptr;
    while (head) {
        ListNode* nextNode = head->next;
        head->next = prev;
        prev = head;
        head = nextNode;
    }
    return prev;
}
ЁЯФЪ рж╢рзЗрж╖ ржХржерж╛:
рждрзЛржорж╛рж░ рж╕рзНржЯрзНржпрж╛ржХ ржмрзЗрж╕ржб рж╕рж▓рзНржпрзБрж╢ржи ржПржХржжржо рж╕ржарж┐ржХ ржПржмржВ clean. рждрзБржорж┐ ржнржмрж┐рж╖рзНржпрждрзЗ ржЪрж╛ржЗрж▓рзЗ iterative (O(1) space) ржмрж╛ recursive version-ржУ ржПржХрзНрж╕ржкрзНрж▓рзЛрж░ ржХрж░рждрзЗ ржкрж╛рж░рзЛред рждржмрзЗ ржПржЦржиржХрж╛рж░ ржЬржирзНржп рждрзЛржорж╛рж░ рж▓ржЬрж┐ржХ, implementation, ржПржмржВ ржмрзНржпрж╛ржЦрзНржпрж╛тАФрж╕ржм ржХрж┐ржЫрзБ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗред

ржЪрж╛ржЗрж▓рзЗ ржЖржорж┐ рждрзЛржорж╛рж░ ржЬржирзНржп recursive ржУ O(1) space approach ржПрж░ ржмрзНржпрж╛ржЦрзНржпрж╛ ржмрж╛ржВрж▓рж╛рзЯ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред ржмрж▓рж▓рзЗржЗ ржжрж┐ржмрзЛред








