ЁЯза ржкрзНрж░рж╢рзНржиржЯрж╛ ржХрзА ржЪрж╛ржЪрзНржЫрзЗ?
ржкрзНрж░рж╢рзНржи:

рждрзЛржорж╛ржХрзЗ ржПржХржЯрж╛ string array ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ (ржпрзЗржоржи: ["a", "b", "a", "c", "b", "d"])

рждрзЛржорж╛ржХрзЗ ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗ k-th distinct string, ржорж╛ржирзЗ ржПржоржи ржПржХржЯрж╛ string ржпрж╛ array-рждрзЗ ржорж╛рждрзНрж░ рзз ржмрж╛рж░ ржПрж╕рзЗржЫрзЗред

ржПржмржВ ржЕржмрж╢рзНржпржЗ array ржпрзЗржнрж╛ржмрзЗ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ, рж╕рзЗржЗ ржЕржирзБржпрж╛рзЯрзА ржкрзНрж░ржержо, ржжрзНржмрж┐рждрзАрзЯ, ... k-th ржмрж▓рждрзЗ рж╣ржмрзЗред (insertion order important)

ржпржжрж┐ total distinct string ржПрж░ рж╕ржВржЦрзНржпрж╛ k-ржПрж░ ржЪрзЗрзЯрзЗ ржХржо рж╣рзЯ, рждрж╛рж╣рж▓рзЗ "" (empty string) рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ рж╣ржмрзЗред

тЬЕ рждрзЛржорж╛рж░ ржХрзЛржбрзЗ ржпрзЗржЗ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗржЫрзЛ тАФ рж╕рзЗржЯрж╛ ржПржХрзЗржмрж╛рж░рзЗ рж╕ржарж┐ржХред
ржПржЦржи ржирж┐ржЪрзЗ рждрзЛржорж╛рж░ ржХрзЛржбрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ рж▓рж╛ржЗржи ржПржмржВ test case ржЪрж╛рж▓рж┐рзЯрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░ржЫрж┐ ржмрж╛ржВрж▓рж╛рзЯ, ржпрж╛рждрзЗ ржмрзБржЭрждрзЗ рж╕рж╣ржЬ рж╣рзЯред

ЁЯФН рждрзЛржорж╛рж░ ржХрзЛржб ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Bangla рждрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛) ЁЯСЗ
cpp
Copy
Edit
class Solution 
{
public:
    string kthDistinct(vector<string>& arr, int k) 
    {
        unordered_map<string,int>freq;
ЁЯЯв ржзрж╛ржк рзз: ржкрзНрж░ржержорзЗ ржПржХржЯрж╛ unordered_map ржмрж╛ржирж┐рзЯрзЗржЫрзЛ, ржпрзЗржЦрж╛ржирзЗ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржЯрж╛ string-ржПрж░ frequency ржЧрзБржирзЗ рж░рж╛ржЦржмрзЛред
freq[str]++ ржХрж░рж▓рзЗ map-ржП ржУржЗ string ржХрзЯржмрж╛рж░ ржЖржЫрзЗ рждрж╛ ржЬржорж╛ рж╣ржмрзЗред

cpp
Copy
Edit
        string ans="";
ЁЯЯв ans ржнрзЗрж░рж┐рзЯрзЗржмрж▓ рждрзИрж░рж┐ ржХрж░ржЫрзЛ, ржпрзЗржЦрж╛ржирзЗ ржкрж░рзЗ k-th distinct string рж░рж╛ржЦржмрзЗред

cpp
Copy
Edit
        for(int i=0;i<arr.size();i++)
        {
          freq[arr[i]]++;
        }
ЁЯЯв ржзрж╛ржк рзи: ржкрзБрж░рзЛ arr-ржПрж░ ржЙржкрж░ рж▓рзБржк ржЪрж╛рж▓рж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж╛ string ржПрж░ frequency рж╣рж┐рж╕рж╛ржм ржХрж░ржЫрзЛред
ржпрзЗржоржи:
Input: ["d", "b", "c", "b", "c", "a"]
Output map: { "d":1, "b":2, "c":2, "a":1 }

cpp
Copy
Edit
        vector<string>reserve;
        for(int i=0;i<arr.size();i++)
        {
          if(freq[arr[i]]==1)
          {
            reserve.push_back(arr[i]);
          }
        }
ЁЯЯв ржзрж╛ржк рзй: ржПржЦржи ржЖржмрж╛рж░ arr ржПрж░ ржЙржкрж░ рж▓рзБржк ржЪрж╛рж▓рж╛ржУред
ржПржЗржмрж╛рж░ ржЪрзЗржХ ржХрж░рзЛ ржпрзЗ ржпрзЗржЗ string ржПрж░ frequency 1 тАФ рж╕рзЗржЯрж╛ distinct
тЬЕ рждрзБржорж┐ insertion order ржарж┐ржХ рж░рж╛ржЦрждрзЗ ржПржЦрж╛ржирзЗ arr ржжрж┐рзЯрзЗ рж▓рзБржк ржЪрж╛рж▓рж┐рзЯрзЗ ржЦрзБржм ржмрзБржжрзНржзрж┐ржорж╛ржирзЗрж░ ржХрж╛ржЬ ржХрж░рзЗржЫрзЛред
unordered_map ржжрж┐рзЯрзЗ ржХрж░рж▓рзЗ order рж╣рж╛рж░рж┐рзЯрзЗ ржпрзЗрждрзЛред

reserve ржПрж░ ржоржзрзНржпрзЗ рж╢рзБржзрзБ ржорж╛рждрзНрж░ distinct ржЧрзБрж▓рж╛ ржЬржорж╛ ржХрж░ржЫрзЛред

ржпрзЗржоржи:
Input: ["d", "b", "c", "b", "c", "a"]
Output: reserve = ["d", "a"]

cpp
Copy
Edit
        for(int j=0;j<reserve.size();j++)
        {
          if(j==k-1&&k <= reserve.size())
          {
              ans=reserve[j];
          }
        }
ЁЯЯв ржзрж╛ржк рзк: ржПржЦржи reserve array ржерзЗржХрзЗ k-th element ржмрзЗрж░ ржХрж░рзЛред
Index k-1 рж╣рзЯ ржХрж╛рж░ржг array 0-based indexing.

ржпржжрж┐ k > reserve.size(), рждрж╛рж╣рж▓рзЗ ans ржЦрж╛рж▓рж┐ ржерж╛ржХржмрзЗ тАФ ржПржЯрж╛ржУ ржарж┐ржХред

cpp
Copy
Edit
        return ans;
    }
};
ЁЯЯв ржзрж╛ржк рзл: ржПржЦржи ans рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ тАФ ржпрж╛ k-th distinct stringред

тЬЕ ржПржЦржи ржЖржорж░рж╛ ржХрж┐ржЫрзБ Test Case ржжрж┐рзЯрзЗ рждрзЛржорж╛рж░ ржХрзЛржб ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ рждрж╛ ржжрзЗржЦржмрзЛред
ЁЯФ╖ Test Case 1:
cpp
Copy
Edit
arr = ["d","b","c","b","c","a"], k = 2
Step-by-step:

Frequency map:

cpp
Copy
Edit
{ "d":1, "b":2, "c":2, "a":1 }
Distinct in order = ["d", "a"]

k = 2 тЖТ index = 1 тЖТ reserve[1] = "a"
тЬЕ Output: "a"

ЁЯФ╖ Test Case 2:
cpp
Copy
Edit
arr = ["aaa","aa","a"], k = 1
freq = { "aaa":1, "aa":1, "a":1 }

reserve = ["aaa", "aa", "a"]

k = 1 тЖТ reserve[0] = "aaa"
тЬЕ Output: "aaa"

ЁЯФ╖ Test Case 3:
cpp
Copy
Edit
arr = ["a", "b", "a"], k = 3
freq = { "a":2, "b":1 }

reserve = ["b"]

k = 3 > reserve.size() тЖТ return ""
тЬЕ Output: ""

ЁЯУМ рждрзЛржорж╛рж░ рж╕ржорж╛ржзрж╛ржи ржпрзЗржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗржЫрзЛ рждрж╛ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржмрзЛржЭрж╛ржирзЛ рж╣рж▓рзЛ:
тЬЕ рждрзЛржорж╛рж░ ржЪрж┐ржирзНрждрж╛рж░ ржзрж╛ржкржЧрзБрж▓рзЛ:
"Frequency map" ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж╛ string ржХрзЯржмрж╛рж░ ржПрж╕рзЗржЫрзЗ рж╕рзЗржЯрж╛ ржЬрж╛ржирж╛рж░ ржжрж░ржХрж╛рж░ тАФ рждрзБржорж┐ ржарж┐ржХ map ржЗржЙржЬ ржХрж░рзЗржЫрзЛред

ржпрзЗрж╕ржм string 1 ржмрж╛рж░ ржПрж╕рзЗржЫрзЗ, рждрж╛ржжрзЗрж░ reserve ржирж╛ржоржХ vector-ржП рж░рзЗржЦрзЗржЫрзЛ тАФ ржПржмржВ insertion order ржорзЗржиржЯрзЗржЗржи ржХрж░рзЗржЫрзЛред

ржкрж░рзЗ k-th index ржПрж░ string рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗржЫрзЛ тАФ ржЖрж░ ржпржжрж┐ ржирж╛ржЗ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ empty string тАФ ржПржЯрж╛ржУ ржкрзНрж░рж╢рзНржи ржЕржирзБржпрж╛рзЯрзАред

тЬЕ рждрзЛржорж╛рж░ ржХрзЛржб accepted рж╣ржмрзЗ ржХрж╛рж░ржг:
Time Complexity: O(n) (ржжрзБржЗржЯрж╛ рж▓рзБржк ржЪрж╛рж▓рж╛рзЯ, ржПржХржмрж╛рж░ frequency count, ржПржХржмрж╛рж░ result collect)

Space Complexity: O(n) (map + reserve)

Full Code:
----------
  class Solution 
{
public:
    string kthDistinct(vector<string>& arr, int k) 
    {
        unordered_map<string,int>freq;
        string ans="";
        for(int i=0;i<arr.size();i++)
        {
          freq[arr[i]]++;
        }
        vector<string>reserve;
        for(int i=0;i<arr.size();i++)
        {
         // if(it.second==1)
          if(freq[arr[i]]==1)
          {
            reserve.push_back(arr[i]);
          }
        }
        for(int j=0;j<reserve.size();j++)
        {
          if(j==k-1&&k <= reserve.size())
          {
              ans=reserve[j];
              
          }
        }
        return ans;
    }
};
