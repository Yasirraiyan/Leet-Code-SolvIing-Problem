рждрзБржорж┐ ржпрзЗ рж╕ржорж╕рзНржпрж╛ржЯрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржжрж┐ржЫрзЛ рж╕рзЗржЯрж┐ рж╣ржЪрзНржЫрзЗ LeetCode 844. Backspace String Compareред ржЪрж▓рзЛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╕рзНржпрж╛ржЯрж╛ ржмрзБржЭрж┐, рждрж╛рж░ржкрж░ рждрзЛржорж╛рж░ ржХрзЛржбржЯрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж┐ рж▓рж╛ржЗржирзЗ рж▓рж╛ржЗржирзЗ ржмрж╛ржВрж▓рж╛рзЯред рж╢рзЗрж╖рзЗ рзиржЯрж╛ ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕рзЗрж░ ржорж╛ржзрзНржпржорзЗ рж╣рж╛рждрзЗ-ржХрж▓ржорзЗ ржкрзНрж░ржорж╛ржг ржжрзЗржЗ ржХрзЗржи ржПржЯрж╛ Accepted рж╣рзЯрзЗржЫрзЗред

ЁЯФ╢ Problem ржЯрж╛ ржХрзА ржЪрж╛рзЯ?
рждрзЛржорж╛ржХрзЗ ржжрзБржЯрж┐ string s ржПржмржВ t ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред ржкрзНрж░рждрж┐ржЯрж┐ string ржЯрж╛ржЗржк ржХрж░рж╛рж░ рж╕ржорзЯ # ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ backspace, ржЕрж░рзНржерж╛рзО ржЖржЧрзЗрж░ ржЕржХрзНрж╖рж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ ржлрзЗрж▓ржмрзЗред
рждрзБржорж┐ ржжрзБржЗржЯрж╛ string ржЯрж╛ржЗржк ржХрж░рж▓рзЗ рж╢рзЗрж╖рзЗ ржпржжрж┐ ржжрзБржЗржЯрж╛рж░ ржлрж▓рж╛ржлрж▓ рж╕ржорж╛ржи рж╣рзЯ, рждрж╛рж╣рж▓рзЗ return ржХрж░ржмрзЗ true, ржирж╛ рж╣рж▓рзЗ falseред

ЁЯза ржХрзАржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗ рж╕ржорж╛ржзрж╛ржи ржмрзЗрж░ ржХрж░рждрзЗ?
ржзрж░рзЛ рждрзБржорж┐ ab#c ржЯрж╛ржЗржк ржХрж░рзЛ:

a тЮЭ a

b тЮЭ ab

# тЮЭ a (b ржорзБржЫрзЗ ржЧрзЗрж▓рзЛ)

c тЮЭ ac

рждрж╛ржЗ ржлрж▓рж╛ржлрж▓ "ac"

ржПржХржЗржнрж╛ржмрзЗ ad#c ржЯрж╛ржЗржк ржХрж░рзЛ:

a тЮЭ a

d тЮЭ ad

# тЮЭ a (d ржорзБржЫрзЗ ржЧрзЗрж▓рзЛ)

c тЮЭ ac

ржжрзБржЯрзЛржЗ "ac" рждрж╛ржЗ true.

тЬЕ Accepted рж╣рзЯ ржХрзЗржи?
рждрзЛржорж╛рж░ ржХрзЛржб рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕рзНржЯрзНржпрж╛ржХ (stack) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рждрзНржпрзЗржХржЯрж╛ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржЯрж╛ржЗржк ржХрж░ржЫрзЗ ржПржмржВ # ржЖрж╕рж▓рзЗ ржЖржЧрзЗрж░ ржЕржХрзНрж╖рж░ ржорзБржЫрзЗ ржлрзЗрж▓ржЫрзЗред рждрж╛ржЗ ржЯрж╛ржЗржкрж┐ржВ рж╢рзЗрж╖ рж╣ржУрзЯрж╛рж░ ржкрж░ рж╕ржарж┐ржХржнрж╛ржмрзЗ рждрзБрж▓ржирж╛ ржХрж░рждрзЗ ржкрж╛рж░ржЫрзЗред

тЬЕ ржХрзЛржб рж▓рж╛ржЗржирзЗ рж▓рж╛ржЗржирзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ (ржмрж╛ржВрж▓рж╛рзЯ) + ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕
cpp
Copy
Edit
#include<stack>
#include<vector>
class Solution 
{
public:
    bool backspaceCompare(string s, string t) 
    {
        stack<char>st1; // s ржПрж░ ржЬржирзНржп stack
        stack<char>st2; // t ржПрж░ ржЬржирзНржп stack
ЁЯСЙ ржПржЦрж╛ржирзЗ ржжрзБржЗржЯрж╛ рж╕рзНржЯрзНржпрж╛ржХ ржирж┐ржЪрзНржЫрзЗ ржХрж╛рж░ржг backspace ржЕржкрж╛рж░рзЗрж╢ржи рж╢рзЗрж╖ ржХрж░рждрзЗ stack ржмрзЗрж╢ ржЙржкржпрзЛржЧрзАред

cpp
Copy
Edit
        vector<char>reserve1;
        vector<char>reserve2;
        bool isequal=false;
ЁЯСЙ reserve1, reserve2 ржжрж░ржХрж╛рж░ ржирзЗржЗ тАФ ржПржЧрзБрж▓рзЛ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬ ржХрж░рж╛ ржпрж╛рзЯ, ржХрж┐ржирзНрждрзБ рждрзБржорж┐ ржЖржЧрзЗрж░ ржорждрзЛ рж░рж╛ржЦрждрзЗ ржЪрж╛ржУ рждрж╛ржЗ ржарж┐ржХ ржЖржЫрзЗред

cpp
Copy
Edit
        for(int i=0;i<s.size();i++)
        {
            reserve1.push_back(s[i]);
        }
        for(int j=0;j<t.size();j++)
        {
            reserve2.push_back(t[j]);
        }
ЁЯСЙ s ржПржмржВ t ржХрзЗ character ржХрж░рзЗ ржнрзЗржЩрзЗ ржнрзЗржЩрзЗ рж░рж╛ржЦрждрзЗржЫрзЛред

ЁЯФБ ржкрзНрж░ржержо рж╕рзНржЯрзНрж░рж┐ржВ s ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛
cpp
Copy
Edit
        for(int k=0;k<reserve1.size();k++)
        {
            if(reserve1[k]=='#')
            {
                if(!st1.empty())
                {
                    st1.pop(); // ржЖржЧрзЗрж░ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржорзБржЫрзЗ ржлрзЗрж▓рзЛ
                }
            }
            else
            {
                st1.push(reserve1[k]); // рж╕рж╛ржзрж╛рж░ржг ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рж╣рж▓рзЗ stack-ржП ржврзЛржХрж╛ржУ
            }
        }
ЁЯФБ ржжрзНржмрж┐рждрзАрзЯ рж╕рзНржЯрзНрж░рж┐ржВ t ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛
cpp
Copy
Edit
        for(int m=0;m<reserve2.size();m++)
        {
            if(reserve2[m]=='#')
            {
                if(!st2.empty())
                {
                    st2.pop();
                }
            }
            else
            {
                st2.push(reserve2[m]);
            }
        }
ЁЯЯв рж╕рзНржЯрзНржпрж╛ржХрзЗрж░ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржЧрзБрж▓рзЛ ржирж┐рзЯрзЗ string рждрзИрж░рж┐ ржХрж░рзЛ
cpp
Copy
Edit
        string s1="";
        string s2="";
        while(!st1.empty())
        {
            s1+=st1.top();
            st1.pop();
        }
        while(!st2.empty())
        {
            s2+=st2.top();
            st2.pop();
        }
ЁЯСЙ ржПржЗ ржЕржВрж╢рзЗ рж╕рзНржЯрзНржпрж╛ржХ ржерзЗржХрзЗ ржкржк ржХрж░рзЗ ржжрзБржЯрзЛ ржирждрзБржи string рждрзИрж░рж┐ ржХрж░рждрзЗржЫрзЛред рждржмрзЗ ржоржирзЗ рж░рзЗржЦрзЛ, ржПржЗржнрж╛ржмрзЗ ржХрж░рж╛рзЯ string ржЧрзБрж▓рзЛрж░ ржЕрж░рзНржбрж╛рж░ ржЙрж▓рзНржЯрзЛ рж╣рзЯрзЗ ржпрж╛ржЪрзНржЫрзЗ! ржХрж┐ржирзНрждрзБ ржпрзЗрж╣рзЗрждрзБ рждрзБржорж┐ ржжрзБржЯрзЛржЗ ржЙрж▓рзНржЯрзЛ ржХрж░ржЫрзЛ, рждрж╛ржЗ рждрзБрж▓ржирж╛рзЯ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ ржирж╛ред

тЬЕ рждрзБрж▓ржирж╛ ржХрж░рзЗ result ржлрзЗрж░ржд ржжрж╛ржУ
cpp
Copy
Edit
        if(s1==s2)
        {
            isequal=true;
        }
        return isequal;
    }
};
ЁЯзк ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ)
тЬЕ Test Case 1:
css
Copy
Edit
Input: s = "ab#c", t = "ad#c"
тЮбя╕П s тЮЭ a тЮЭ ab тЮЭ backspace тЮЭ a тЮЭ ac
тЮбя╕П t тЮЭ a тЮЭ ad тЮЭ backspace тЮЭ a тЮЭ ac
тЮбя╕П тЬЕ true return рж╣ржмрзЗред

тЬЕ Test Case 2:
css
Copy
Edit
Input: s = "ab##", t = "c#d#"
тЮбя╕П s тЮЭ a тЮЭ ab тЮЭ backspace тЮЭ a тЮЭ backspace тЮЭ ""
тЮбя╕П t тЮЭ c тЮЭ backspace тЮЭ "" тЮЭ d тЮЭ backspace тЮЭ ""
тЮбя╕П тЬЕ Final ржжрзБржЗржЯрж╛ "" тЮЭ so true return рж╣ржмрзЗред

ЁЯФз ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи ржЯрж┐ржкрж╕
vector<char> reserve1 ржЖрж░ reserve2 ржирж╛ ржХрж░рзЗржУ рж╕рж░рж╛рж╕рж░рж┐ s ржУ t ржжрж┐рзЯрзЗ рж▓рзБржк ржХрж░рж╛ ржпрзЗрждрзЛред

string ржмрж╛ржирж╛ржирзЛрж░ рж╕ржорзЯ reverse ржирж╛ ржХрж░рзЗ рж╢рзБрж░рзБ ржерзЗржХрзЗржЗ stack<char> ржХрзЗ reverse ржХрж░рзЗ string ржмрж╛ржирж╛рждрзЗ ржкрж╛рж░рзЛ, ржмрж╛ reverse ржХрж░рзЛ рж╢рзЗрж╖рзЗред

Full ржХрзЛржбрзЗ ржПржХржЯрзБ ржХржо рж▓рж╛ржЗржи рж▓рж╛ржЧржмрзЗред

тЬЕ Final Verdict:
рждрзЛржорж╛рж░ ржХрзЛржб Accepted рж╣рзЯрзЗржЫрзЗ ржХрж╛рж░ржг:

рждрзБржорж┐ # ржХрзЗ backspace рж╣рж┐рж╕рзЗржмрзЗ ржарж┐ржХржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЛ

рж╕рзНржЯрзНржпрж╛ржХ ржжрж┐рзЯрзЗ ржЯрж╛ржЗржкрж┐ржВрзЯрзЗрж░ ржЖржЪрж░ржг emulate ржХрж░рзЗржЫрзЛ

рж╢рзЗрж╖рзЗ ржжрзБржЗржЯрж╛ final string compare ржХрж░рзЗ result ржжрж┐ржЫрзЛ

Full Code:
-----------

  #include<stack>
#include<vector>
class Solution 
{
public:
    bool backspaceCompare(string s, string t) 
    {
        stack<char>st1;
        stack<char>st2;
      vector<char>reserve1;
      vector<char>reserve2;
      bool isequal=false;
      for(int i=0;i<s.size();i++)
      {
        reserve1.push_back(s[i]);
      }
      for(int j=0;j<t.size();j++)
      {
            reserve2.push_back(t[j]);
      }
      for(int k=0;k<reserve1.size();k++)
      {
        //st1.push(reserve1[k]);
        if(reserve1[k]=='#')
        {
          if(!st1.empty())
          {

          
          st1.pop();
          }
        }
        else
        {
          st1.push(reserve1[k]);
        }
      }
      for(int m=0;m<reserve2.size();m++)
      {
       // st2.push(reserve2[m]);
        if(reserve2[m]=='#')
        {
          if(!st2.empty())
          {

          
          st2.pop();
          }
        }
         else
        {
          st2.push(reserve2[m]);
        }
      }
      string s1="";
      string s2="";
      while(!st1.empty())
      {
        s1+=st1.top();
        st1.pop();
      }
      while(!st2.empty())
      {
        s2+=st2.top();
        st2.pop();
      }
      if(s1==s2)
      {
           isequal=true;
      }
      return isequal;
    }
};
