ЁЯФ╢ Problem Summary (Bangla):
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж╛ nums array ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред рждрзЛржорж╛ржХрзЗ ржПржоржи ржПржХржЯрж╛ ржирждрзБржи array answer[] рждрзИрж░рж┐ ржХрж░рждрзЗ рж╣ржмрзЗ, ржпрзЗржЦрж╛ржирзЗ answer[i] = nums array-ржПрж░ рж╕ржм ржЙржкрж╛ржжрж╛ржирзЗрж░ ржЧрзБржгржлрж▓ тАУ рж╢рзБржзрзБ nums[i] ржмрж╛ржж ржжрж┐рзЯрзЗред

тЭЧ ржХрж┐ржирзНрждрзБ рждрзБржорж┐ division (ржнрж╛ржЧ) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ ржПржмржВ рждрзЛржорж╛рж░ рж╕ржорж╛ржзрж╛ржиржЯрж┐ O(n) рж╕ржорзЯ ржЬржЯрж┐рж▓рждрж╛рзЯ рж╣рждрзЗ рж╣ржмрзЗред

тЬЕ ржЙржжрж╛рж╣рж░ржг:
makefile
Copy
Edit
Input:  nums = [1, 2, 3, 4]
Output:        [24, 12, 8, 6]

ржмрзНржпрж╛ржЦрзНржпрж╛:
answer[0] = 2├Ч3├Ч4 = 24
answer[1] = 1├Ч3├Ч4 = 12
answer[2] = 1├Ч2├Ч4 = 8
answer[3] = 1├Ч2├Ч3 = 6
тЬЕ рждрзБржорж┐ ржпрзЗ ржкржжрзНржзрждрж┐рждрзЗ рж╕ржорж╛ржзрж╛ржи ржХрж░ржЫрзЛ тАФ ржПржЯрж╛ржХрзЗ ржмрж▓рзЗ:
Prefix Product + Suffix Product Approach
рждрзБржорж┐ O(n) рж╕ржорзЯрзЗ ржЧрзБржгржлрж▓ ржмрзЗрж░ ржХрж░рждрзЗ ржЪрж╛ржЪрзНржЫрзЛ, рждрж╛ржЗ рждрзБржорж┐ ржкрзНрж░рждрж┐ржЯрж┐ index ржПрж░ ржЖржЧрзЗ ржУ ржкрж░рзЗ ржпржд рж╕ржВржЦрзНржпрж╛рж░ ржЧрзБржгржлрж▓ тАФ рж╕рзЗржЯрж╛ ржЖрж▓рж╛ржжрж╛ржнрж╛ржмрзЗ рж░рзЗржЦрзЗ ржжрж┐рзЯрзЗржЫрзЛред

ЁЯФН Code Breakdown & Bangla Explanation:
cpp
Copy
Edit
vector<int> productExceptSelf(vector<int>& nums) 
{
    vector<int>pp(nums.size(),1); // prefix product
    int p=1;
    pp[0]=1;
ЁЯФ╕ ржПржЦрж╛ржирзЗ pp[] array ржЯрж╛ рж╣ржЪрзНржЫрзЗ prefix product arrayред

ЁЯФ╕ ржЕрж░рзНржерж╛рзО, pp[i] рждрзЗ ржерж╛ржХржмрзЗ nums[0] * nums[1] * ... * nums[i-1] ржПрж░ ржорж╛ржиред

ЁЯФ╕ ржХрж╛рж░ржг, ржЖржорж░рж╛ nums[i] ржмрж╛ржж ржжрж┐рждрзЗ ржЪрж╛ржЗ, рждрж╛ржЗ i ржПрж░ ржЖржЧрзЗрж░ рж╕ржм ржЧрзБржг ржХрж░ржмрзЛред

cpp
Copy
Edit
    for(int i=1;i<nums.size();i++)
    {
      pp[i]=pp[i-1]*nums[i-1];
    }
ЁЯФ╕ ржПржЗ loop ржП рждрзБржорж┐ prefix product рж╣рж┐рж╕рж╛ржм ржХрж░ржЫрзЛред

ЁЯФ╕ pp[i] = pp[i-1] * nums[i-1]

ржЙржжрж╛рж╣рж░ржгржГ nums = [1, 2, 3, 4]

pp[0] = 1 (default)

pp[1] = pp[0] * nums[0] = 1 * 1 = 1

pp[2] = pp[1] * nums[1] = 1 * 2 = 2

pp[3] = pp[2] * nums[2] = 2 * 3 = 6

Final prefix array = [1, 1, 2, 6]

cpp
Copy
Edit
    vector<int>sp(nums.size(),1); // suffix product
    sp[nums.size()-1]=1;
ЁЯФ╕ ржПржмрж╛рж░ sp[] ржирж╛ржорзЗрж░ suffix product array ржмрж╛ржирж╛ржирзЛ рж╣ржЪрзНржЫрзЗред

ЁЯФ╕ ржЕрж░рзНржерж╛рзО, sp[i] = nums[i+1] * nums[i+2] * ... * nums[n-1]

cpp
Copy
Edit
    for(int j=nums.size()-2;j>=0;j--)
    {
      sp[j]=sp[j+1]*nums[j+1];
    }
ЁЯФ╕ ржПржЗ loop ржП sp[i] ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ: sp[i+1] * nums[i+1]

ЁЯФ╕ ржЙржжрж╛рж╣рж░ржгржГ nums = [1, 2, 3, 4]

sp[3] = 1 (default)

sp[2] = sp[3] * nums[3] = 1 * 4 = 4

sp[1] = sp[2] * nums[2] = 4 * 3 = 12

sp[0] = sp[1] * nums[1] = 12 * 2 = 24

Final suffix array = [24, 12, 4, 1]

cpp
Copy
Edit
    vector<int>ans(nums.size());

    for(int k=0;k<nums.size();k++)
    {
      ans[k]=pp[k]*sp[k];
    }
ЁЯФ╕ ржПржЦржи prefix ржПржмржВ suffix ржПрж░ ржЧрзБржгржлрж▓ ржХрж░рж▓рзЗ ржЖржорж░рж╛ ржЪрж╛ржЗрждрж╛ржо рж╕рзЗржЗ answer ржкрж╛ржмрзЛ:

ans[0] = pp[0] * sp[0] = 1 * 24 = 24

ans[1] = 1 * 12 = 12

ans[2] = 2 * 4 = 8

ans[3] = 6 * 1 = 6

тЬЕ рждрж╛ржЗ final output: [24, 12, 8, 6]

тЬЕ Techniques Used:
Technique	Why Used?
Prefix product	nums[i] ржПрж░ ржЖржЧрзЗрж░ рж╕ржм element-ржПрж░ ржЧрзБржг
Suffix product	nums[i] ржПрж░ ржкрж░рзЗрж░ рж╕ржм element-ржПрж░ ржЧрзБржг
Avoid division	Constraint ржЕржирзБржпрж╛рзЯрзА ржнрж╛ржЧ ржжрзЗржУрзЯрж╛ ржирж┐рж╖рж┐ржжрзНржз
O(n) Time	Efficiency ensured using 2 loops

ЁЯФБ ржЖрж░рзЗржХржЯрж╛ Test Case:
cpp
Copy
Edit
Input: nums = [-1, 1, 0, -3, 3]
Prefix:   [1, -1, -1, 0, 0]
Suffix:   [0, 0, -9, 3, 1]
Answer:   [0, 0, 9, 0, 0]
тЭЧ ржХрзЗржи 0 ржЖрж╕ржЫрзЗ? ржХрж╛рж░ржг ржпрзЗрж╣рзЗрждрзБ input ржП 0 ржЖржЫрзЗ, рждрж╛ржЗ ржпрзЗржЗ index ржмрж╛ржж ржжрж┐рж▓рзЗ ржЧрзБржгржлрж▓рзЗ 0 ржерж╛ржХржмрзЗ ржирж╛, рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рзЗржЗ index ржЫрж╛рзЬрж╛ рж╕ржмржЦрж╛ржирзЗ result = 0 рж╣ржмрзЗред

ЁЯФЪ Summary:
ЁЯФ╣ рждрзБржорж┐ Prefix ржПржмржВ Suffix Technique ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЕрж╕рж╛ржзрж╛рж░ржгржнрж╛ржмрзЗ ржПржЗ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗржЫрзЛред
ЁЯФ╣ ржПржЗ problem ржЯрж┐ ржЕржирзЗржХ interview ржП ржЖрж╕рж╛ common ржкрзНрж░рж╢рзНржи ржПржмржВ рждрзЛржорж╛рж░ solution 100% accepted рж╣ржмрзЗ ржХрж╛рж░ржг:

тЬЕ Time Complexity: O(n)

тЬЕ Space Complexity: O(n) (although it can be optimized to O(1) using output array only)

тЬЕ No Division Used

Full Code:
-----------

  class Solution
 {
public:
    vector<int> productExceptSelf(vector<int>& nums) 
    {
        vector<int>pp(nums.size(),1);
        int p=1;
        pp[0]=1;
        //pp[1]=nums[1];
        for(int i=1;i<nums.size();i++)
        {
          pp[i]=pp[i-1]*nums[i-1];
        }
        vector<int>sp(nums.size(),1);
        sp[nums.size()-1]=1;
        for(int j=nums.size()-2;j>=0;j--)
        {
          sp[j]=sp[j+1]*nums[j+1];
        }
        vector<int>ans(nums.size());
       
        for(int k=0;k<nums.size();k++)
        {
          ans[k]=pp[k]*sp[k];
        }
        return ans;
}
};
