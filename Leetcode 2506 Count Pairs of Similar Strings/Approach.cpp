Understanding the Solution for Counting Similar String Pairs
Let me explain the problem and the given solution in Bangla step by step.

Problem Understanding (‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶¨‡ßã‡¶ù‡¶æ)
‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø string array ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá (words)‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶Æ‡¶® ‡¶∏‡¶¨ pair (i,j) count ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá:

i < j

words[i] ‡¶è‡¶¨‡¶Ç words[j] string ‡¶¶‡ßÅ‡¶ü‡¶ø "similar" ‡¶π‡¶¨‡ßá

‡¶¶‡ßÅ‡¶ü‡¶ø string "similar" ‡¶π‡¶¨‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶§‡¶æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶á character ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡ßü‡ßá ‡¶ó‡¶†‡¶ø‡¶§ ‡¶π‡ßü (order ‡¶¨‡¶æ frequency matter ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ)‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:

"aba" ‡¶è‡¶¨‡¶Ç "aabb" similar, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶¶‡ßÅ‡¶ü‡¶ø‡¶§‡ßá‡¶á ‡¶∂‡ßÅ‡¶ß‡ßÅ 'a' ‡¶è‡¶¨‡¶Ç 'b' ‡¶Ü‡¶õ‡ßá

"abcd" ‡¶è‡¶¨‡¶Ç "bac" similar ‡¶®‡¶æ, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶ü‡¶ø‡¶§‡ßá 'd' ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü‡¶ü‡¶ø‡¶§‡ßá ‡¶®‡ßá‡¶á

Given Solution Approach (‡¶™‡ßç‡¶∞‡¶¶‡¶§‡ßç‡¶§ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø)
‡¶è‡¶á ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:

CheckSimilar function: ‡¶¶‡ßÅ‡¶ü‡¶ø string similar ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ check ‡¶ï‡¶∞‡ßá

‡¶™‡ßç‡¶∞‡¶•‡¶Æ string ‡¶è‡¶∞ unique characters ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø set ‡¶è ‡¶∞‡¶æ‡¶ñ‡ßá (set1)

‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü string ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø character check ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶∏‡ßá‡¶ü‡¶æ set1 ‡¶è ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü string ‡¶è‡¶∞ unique characters ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø set ‡¶è ‡¶∞‡¶æ‡¶ñ‡ßá (set2)

‡¶™‡ßç‡¶∞‡¶•‡¶Æ string ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø character check ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶∏‡ßá‡¶ü‡¶æ set2 ‡¶è ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ character match ‡¶ï‡¶∞‡ßá ‡¶§‡¶¨‡ßá true return ‡¶ï‡¶∞‡ßá, ‡¶®‡¶æ‡¶π‡¶≤‡ßá false

similarPairs function:

‡¶∏‡¶¨ possible pair (i,j) ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá i < j, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø CheckSimilar function call ‡¶ï‡¶∞‡ßá

‡¶Ø‡¶¶‡¶ø similar ‡¶π‡ßü ‡¶§‡¶¨‡ßá count increment ‡¶ï‡¶∞‡ßá

‡¶∂‡ßá‡¶∑‡ßá total count return ‡¶ï‡¶∞‡ßá

Testing with Examples (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ)
Example 1:
Input: ["aba","aabb","abcd","bac","aabc"]

Process:

Pair (0,1): "aba" ‡¶è‡¶¨‡¶Ç "aabb" -> similar (a,b) -> count = 1

Pair (0,2): "aba" ‡¶è‡¶¨‡¶Ç "abcd" -> not similar (d missing in first) -> count same

Pair (0,3): "aba" ‡¶è‡¶¨‡¶Ç "bac" -> similar (a,b,c but first has only a,b) -> actually not similar! Wait, this seems wrong in initial thought

Correction: Actually CheckSimilar function checks both ways:

set1 for "aba" = {a,b}

"bac" has 'c' which is not in set1 -> check becomes false

So not similar

Pair (0,4): "aba" ‡¶è‡¶¨‡¶Ç "aabc" -> not similar (c missing in first)

Pair (1,2): "aabb" ‡¶è‡¶¨‡¶Ç "abcd" -> not similar

Pair (1,3): "aabb" ‡¶è‡¶¨‡¶Ç "bac" -> not similar

Pair (1,4): "aabb" ‡¶è‡¶¨‡¶Ç "aabc" -> not similar

Pair (2,3): "abcd" ‡¶è‡¶¨‡¶Ç "bac" -> not similar

Pair (2,4): "abcd" ‡¶è‡¶¨‡¶Ç "aabc" -> not similar

Pair (3,4): "bac" ‡¶è‡¶¨‡¶Ç "aabc" -> similar (both have a,b,c) -> count = 2

Output: 2 (matches example)

Example 2:
Input: ["aabb","ab","ba"]

Process:

Pair (0,1): "aabb" ‡¶è‡¶¨‡¶Ç "ab" -> similar (a,b) -> count = 1

Pair (0,2): "aabb" ‡¶è‡¶¨‡¶Ç "ba" -> similar (a,b) -> count = 2

Pair (1,2): "ab" ‡¶è‡¶¨‡¶Ç "ba" -> similar (a,b) -> count = 3

Output: 3 (matches example)

Example 3:
Input: ["nba","cba","dba"]

Process:

Pair (0,1): "nba" (n,b,a) ‡¶è‡¶¨‡¶Ç "cba" (c,b,a) -> not similar

Pair (0,2): "nba" ‡¶è‡¶¨‡¶Ç "dba" -> not similar

Pair (1,2): "cba" ‡¶è‡¶¨‡¶Ç "dba" -> not similar

Output: 0 (matches example)

Code Analysis (‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£)
cpp
bool CheckSimilar(string a, string b) {
    unordered_set<char> set1;
    unordered_set<char> set2;
    bool check = true;
    
    // Store unique characters of a in set1
    for(int i=0; i<a.size(); i++) {
        set1.insert(a[i]);
    }
    
    // Check all characters of b are in set1
    for(int j=0; j<b.size(); j++) {
        if(set1.find(b[j]) == set1.end()) {
            check = false;
        }
    }
    
    // Store unique characters of b in set2
    for(int k=0; k<b.size(); k++) {
        set2.insert(b[k]);
    }
    
    // Check all characters of a are in set2
    for(int j=0; j<a.size(); j++) {
        if(set2.find(a[j]) == set2.end()) {
            check = false;
        }
    }
    
    return check;
}
‡¶è‡¶á function ‡¶ü‡¶ø ‡¶¶‡ßÅ‡¶ü‡¶ø string ‡¶è‡¶∞ character set ‡¶è‡¶ï‡¶á ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ check ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ü‡¶ø ‡¶¶‡ßÅ‡¶á ‡¶¶‡¶ø‡¶ï ‡¶•‡ßá‡¶ï‡ßá check ‡¶ï‡¶∞‡ßá:

b ‡¶è‡¶∞ ‡¶∏‡¶¨ characters a ‡¶§‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

a ‡¶è‡¶∞ ‡¶∏‡¶¨ characters b ‡¶§‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

cpp
int similarPairs(vector<string>& words) {
    int count = 0;
    for(int k=0; k<words.size(); k++) {
        for(int m=k+1; m<=words.size()-1; m++) {
            if(m != k) {  // This condition is redundant since m starts from k+1
                if(CheckSimilar(words[k], words[m])) {
                    count++;
                }
            }
        }
    }
    return count;
}
‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡¶ü‡¶ø ‡¶∏‡¶¨ possible pair generate ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç CheckSimilar function call ‡¶ï‡¶∞‡ßá‡•§ ‡¶Ø‡¶¶‡¶ø similar ‡¶π‡ßü ‡¶§‡¶¨‡ßá count ‡¶¨‡¶æ‡ßú‡¶æ‡ßü‡•§

Optimizations (‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó)
CheckSimilar function ‡¶è ‡¶Ü‡¶Æ‡¶∞‡¶æ set1 ‡¶è‡¶¨‡¶Ç set2 ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶õ‡¶ø, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø set ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ compare ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶§‡¶æ‡¶Æ‡•§

m != k condition ‡¶ü‡¶ø unnecessary ‡¶ï‡¶æ‡¶∞‡¶£ m ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü k+1 ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø string ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡¶æ‡¶∞ character set ‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á calculate ‡¶ï‡¶∞‡ßá store ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶§‡¶æ‡¶Æ (preprocessing) ‡¶Ø‡¶æ‡¶§‡ßá ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ calculate ‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§

‡¶è‡¶á ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ú‡ßç‡¶û‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá implement ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨ test case pass ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§

Approach:
-----------
  ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßú‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶è‡¶á ‡¶∏‡¶≤‡ßç‡¶Ø‡ßÅ‡¶∂‡¶® ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶è‡¶∞‡¶™‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶® ‡¶ï‡ßÄ ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶ì ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡•§

‚úÖ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßã
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶ï‡ßÄ ‡¶¨‡¶≤‡¶õ‡ßá?
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá words ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø words[i] ‡¶è‡¶ï‡¶ü‡¶ø lowercase ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶∂‡¶¨‡ßç‡¶¶‡•§
‡¶è‡¶ñ‡¶® ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã ‡¶è‡¶Æ‡¶® ‡¶ú‡ßã‡ßú‡¶æ (i, j) ‡¶ó‡ßÅ‡¶®‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá 0 <= i < j <= words.length - 1 ‡¶è‡¶¨‡¶Ç words[i] ‡¶è‡¶¨‡¶Ç words[j] "similar" ‡¶π‡ßü‡•§

"Similar" ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßÄ?
‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç-‡¶è‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶ï‡ßã‡¶® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá), ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡¶æ‡¶∞‡¶æ similar‡•§

üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
"aba" ‡¶Ü‡¶∞ "aabb" ‚Üí ‡¶¶‡ßÅ‡¶ü‡ßã‡¶§‡ßá‡¶á ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ 'a' ‡¶è‡¶¨‡¶Ç 'b' ‚Üí similar
"abcd" ‡¶Ü‡¶∞ "ab" ‚Üí ‡¶®‡¶æ, ‡¶ï‡¶æ‡¶∞‡¶£ 'c', 'd' ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‚Üí not similar

‚úÖ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßá‡ßü‡¶æ‡¶∞ (i, j) ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßÅ‡¶á ‡¶∏‡ßá‡¶ü ‡¶è‡¶ï ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡¶æ‡¶∞‡¶æ similar‡•§

‚úÖ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶ï‡ßã‡¶° ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶õ‡ßá?
‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ C++ ‡¶ï‡ßã‡¶° ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡ßÅ‡¶ù‡¶¨:

cpp
Copy
Edit
class Solution {
public:
  bool CheckSimilar(string a,string b)
üî∏ CheckSimilar ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø string ‡¶è‡¶ï‡¶á ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶®‡ßç‡¶¨‡ßü‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ‡•§

cpp
Copy
Edit
    unordered_set<char>set1;
    unordered_set<char>set2;
üî∏ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá unordered_set ‡¶á‡¶â‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ï‡¶á ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡•§
‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: "aabb" ‚Üí set = {'a', 'b'}

cpp
Copy
Edit
    bool check=true;
üî∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá ‡¶¶‡ßÅ‡¶á ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç similar (check = true)‡•§

cpp
Copy
Edit
    for(int i=0;i<a.size();i++)
    {
      set1.insert(a[i]);
    }
üî∏ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç a-‡¶è‡¶∞ ‡¶∏‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ set1-‡¶è ‡¶¢‡ßã‡¶ï‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§

cpp
Copy
Edit
    for(int j=0;j<b.size();j++)
    {
      if(set1.find(b[j])==set1.end())
      {
        check=false;
      }
    }
üî∏ b-‡¶è‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ set1-‡¶è ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶õ‡ßá‡•§
‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá a ‡¶ì b similar ‡¶®‡¶æ‡•§

cpp
Copy
Edit
    for(int k=0;k<b.size();k++)
    {
      set2.insert(b[k]);
    }
üî∏ ‡¶è‡¶¨‡¶æ‡¶∞ b-‡¶è‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ set2-‡¶è ‡¶¢‡ßã‡¶ï‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§

cpp
Copy
Edit
    for(int j=0;j<a.size();j++)
    {
      if(set2.find(a[j])==set2.end())
      {
        check=false;
      }
    }
üî∏ a-‡¶è‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ set2-‡¶è ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶õ‡ßá‡•§
‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá check=false ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡•§

cpp
Copy
Edit
    return check;
  }
üî∏ ‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶∏‡ßá‡¶ü‡ßá ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá return true, ‡¶®‡¶æ ‡¶π‡¶≤‡ßá false‡•§

cpp
Copy
Edit
  int similarPairs(vector<string>& words) 
  {
      int count=0;
üî∏ ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá similarPairs ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶è‡¶ü‡¶ø ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡¶æ pair count ‡¶ï‡¶∞‡¶¨‡ßá‡•§

cpp
Copy
Edit
      for(int k=0;k<words.size();k++)
      {
        for(int m=k+1;m<=words.size()-1;m++)
        {
üî∏ ‡¶∏‡¶¨ (i, j) pair ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶õ‡ßá, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá i < j

cpp
Copy
Edit
          if(m!=k)
          {
            if(CheckSimilar(words[k],words[m]))
            {
              count++;
            }
          }
üî∏ ‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßÅ‡¶á word








You said:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßú‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ koreso 


ChatGPT said:
‡¶ö‡¶≤‡ßã, ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡¶æ‡¶Æ, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶¨‡¶æ‡¶á ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶ø ‚Äî ‡¶Ø‡ßá‡¶® ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡¶∞‡ßá‡¶á ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§

‚úÖ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßú‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡¶æ‡¶Æ (‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ)
üß† Step 1: ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶™‡ßú‡¶ø
‚ÄúTwo strings are similar if they consist of the same characters.‚Äù
‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡ßã‡¶ù‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá, ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç similar ‡¶π‡¶¨‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶Ü‡¶õ‡ßá, ‡¶∏‡¶¨ ‡¶è‡¶ï‡¶á ‡¶π‡ßü (order ‡¶¨‡¶æ frequency ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶≤‡ßá‡¶ì ‡¶ö‡¶≤‡¶¨‡ßá)‡•§

‚úÖ So:

"abc" ‡¶è‡¶¨‡¶Ç "cab" similar ‚Üí ‚úîÔ∏è

"ab" ‡¶è‡¶¨‡¶Ç "abb" ‚Üí ‚úîÔ∏è (‡¶ï‡¶æ‡¶∞‡¶£ character ‡¶è‡¶ï‡¶á: 'a', 'b')

"ab" ‡¶è‡¶¨‡¶Ç "abc" ‚Üí ‚ùå ‡¶®‡¶æ, ‡¶ï‡¶æ‡¶∞‡¶£ 'c' ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§

üß† Step 2: ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßá‡¶õ‡ßá?
Count the number of pairs (i, j) such that 0 <= i < j <= n-1 and words[i] and words[j] are similar.

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ø‡¶§‡¶ó‡ßÅ‡¶≤‡ßã i < j pair ‡¶Ü‡¶õ‡ßá, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡¶ó‡ßÅ‡¶≤‡ßã similar ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ó‡ßÅ‡¶®‡ßá ‡¶¨‡¶≤‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

üîç ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶ø ‚Äî Efficient‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü?
‚úÖ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ 1: HashSet ‡¶¨‡¶æ Set ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø word-‡¶è‡¶∞ character-set ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶á‡•§
‡¶Ø‡ßá‡¶Æ‡¶® "aba" ‚Üí {a, b}

"aabb" ‚Üí {a, b}

"abcd" ‚Üí {a, b, c, d}

‚úÖ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ 2: ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï pair-‡¶ï‡ßá compare ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶è‡¶ï ‡¶®‡¶æ ‡¶ï‡¶ø ‡¶®‡¶æ‡•§
Set ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá‡¶á similar ‚Üí ‚úÖ count ‡¶¨‡¶æ‡ßú‡¶æ‡¶á‡•§

‚úÖ ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶≤ ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶ø Line by Line (Bangla ‡¶∏‡¶π)
cpp
Copy
Edit
class Solution {
public:
üîπ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ Solution ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶≤‡ßÄ‡¶ü‡¶ï‡ßã‡¶°‡ßá‡¶∞ accepted ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ‡•§

üîç CheckSimilar ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
cpp
Copy
Edit
bool CheckSimilar(string a, string b)
{
üîπ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç a ‡¶è‡¶¨‡¶Ç b ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü‡•§

cpp
Copy
Edit
unordered_set<char> set1;
unordered_set<char> set2;
bool check = true;
üîπ set1 ‡¶ì set2 ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶∏‡ßá‡¶ü ‡¶Ø‡¶æ a ‡¶è‡¶¨‡¶Ç b ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç-‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ unique character ‡¶ß‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡•§
üîπ check ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ó, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá true (similar)‡•§

cpp
Copy
Edit
for(int i = 0; i < a.size(); i++)
{
    set1.insert(a[i]);
}
üîπ a ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶∏‡¶¨ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ set1 ‡¶è ‡¶¢‡ßã‡¶ï‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá (duplicate ‡¶¨‡¶æ‡¶¶ ‡¶Ø‡¶æ‡¶¨‡ßá)‡•§

cpp
Copy
Edit
for(int j = 0; j < b.size(); j++)
{
    if(set1.find(b[j]) == set1.end())
    {
        check = false;
    }
}
üîπ b ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶Ø‡¶¶‡¶ø set1 (







You said:
ami ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßú‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ koresi 


ChatGPT said:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßú‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶™‡ßÅ‡¶∞‡ßã‡¶™‡ßÅ‡¶∞‡¶ø ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶∏‡¶Æ‡ßç‡¶Æ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶¶‡ßÄ‡¶™‡ßç‡¶§‡•§ ‡¶®‡¶ø‡¶ö‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‚Äî ‡¶Ø‡ßá‡¶® ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ì ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶Æ‡¶®‡ßá ‡¶™‡ßú‡ßá ‡¶∏‡¶π‡¶ú‡ßá‡•§

üß† ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßú‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ)
‚úÖ Step 1: ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡¶ï‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶¨‡ßã‡¶ù‡¶æ
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶Æ‡¶® ‡¶∏‡¶¨ (i, j) ‡¶ú‡ßã‡ßú‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá 0 <= i < j < words.length ‡¶è‡¶¨‡¶Ç words[i] ‡¶Ü‡¶∞ words[j] ‡¶è‡¶ï‡¶á ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ó‡¶†‡¶ø‡¶§‡•§

‚úÖ Step 2: "Similar" ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßÄ?
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡ßá‡¶õ‡ßá ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø string similar ‡¶Ø‡¶¶‡¶ø ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ï‡¶∞‡¶ï‡¶Æ ‡¶π‡ßü‡•§

üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

"aba" ‡¶è‡¶¨‡¶Ç "aabb" ‚Üí similar ‚Üí ‡¶ï‡¶æ‡¶∞‡¶£ character set {a, b}

"abcd" ‡¶è‡¶¨‡¶Ç "ab" ‚Üí not similar ‚Üí ‡¶ï‡¶æ‡¶∞‡¶£ 'c', 'd' ‡¶®‡ßá‡¶á ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü‡¶ü‡¶ø‡¶§‡ßá

üß† ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:
‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø word-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá unique character ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ pairwise compare ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶ï‡¶æ‡¶∞‡¶æ ‡¶ï‡¶æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶á character set ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

‚úÖ Step 3: Brute force ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶è‡¶ü‡¶æ ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:

‚Äú‡¶Ü‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï‡¶ü‡¶æ pair (i, j) ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø check ‡¶ï‡¶∞‡¶¨, ‡¶§‡¶æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶á character ‡¶¶‡¶ø‡ßü‡ßá ‡¶ó‡¶†‡¶ø‡¶§ ‡¶ï‡¶ø ‡¶®‡¶æ‡•§‚Äù

‡¶è‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶π‡ßü‡¶§ ‡¶è‡¶á ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶∏‡ßá:

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø word-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá unique character set ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßã

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶∏‡¶¨ pair compare ‡¶ï‡¶∞‡¶¨

‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø set ‡¶è‡¶ï‡¶á ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá count++

‚úÖ Step 4: HashSet ‡¶¨‡¶æ Sorting ‡¶¶‡¶ø‡ßü‡ßá optimization
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‚Äî

character ‡¶ó‡ßÅ‡¶≤‡ßã HashSet-‡¶è ‡¶∞‡ßá‡¶ñ‡ßá ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá

‡¶Ö‡¶•‡¶¨‡¶æ sorted string ‡¶∞‡¶æ‡¶ñ‡¶≤‡ßá‡¶ì ‡¶ö‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá: sort(word.begin(), word.end()) ‚Üí ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ unique

‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶á unique character ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞, HashSet ‡¶¨‡¶æ bitmask ‡¶π‡¶¨‡ßá efficient ‡¶â‡¶™‡¶æ‡ßü‡•§

‚ú® ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‚Äî ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã:
Similar ‡¶Æ‡¶æ‡¶®‡ßá: character set ‡¶è‡¶ï ‡¶π‡¶ì‡ßü‡¶æ

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø word-‡¶è‡¶∞ character set ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø (i, j) pair check ‡¶ï‡¶∞‡¶æ

character set match ‡¶π‡¶≤‡ßá count ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã

‡¶è‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç natural approach‡•§

‚úÖ ‡¶è‡¶ñ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶≤‡ßã, ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶á ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶è‡¶ï‡¶ü‡¶æ brute force ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡¶ø ‚Äî ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶§?
‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶¨‡¶®‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶®‡¶ø‡¶ö‡ßá ‡¶è‡¶ï‡¶ü‡¶æ basic version ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø:

cpp
Copy
Edit
int similarPairs(vector<string>& words) {
    int n = words.size();
    int count = 0;

    for (int i = 0; i < n; i++) {
        unordered_set<char> set1(words[i].begin(), words[i].end());
        for (int j = i + 1; j < n; j++) {
            unordered_set<char> set2(words[j].begin(), words[j].end());
            if (set1 == set2) count++;
        }
    }
    return count;
}
‡¶è‡¶á ‡¶ï‡ßã‡¶° ‡¶†‡¶ø‡¶ï ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá brute-force ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‡¶∏‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶†‡¶ø‡¶ï‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá class Solution-‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶ï‡ßã‡¶°‡¶ü‡¶æ‡¶ì line-by-line ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü‡•§

‡¶¨‡¶≤‡¶≤‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶ø ‚úÖ
Full Code:
-------------

  class Solution 
{
public:
  bool CheckSimilar(string a,string b)
  {

    unordered_set<char>set1;
    unordered_set<char>set2;
    bool check=true;
    for(int i=0;i<a.size();i++)
    {
      set1.insert(a[i]);
    }
    for(int j=0;j<b.size();j++)
    {
      if(set1.find(b[j])==set1.end())
      {
        check=false;
      }
    }
    for(int k=0;k<b.size();k++)
    {
      set2.insert(b[k]);
    }
     for(int j=0;j<a.size();j++)
    {
      if(set2.find(a[j])==set2.end())
      {
        check=false;
      }
    }
    return check;
  }
    int similarPairs(vector<string>& words) 
    {
        int count=0;
        for(int k=0;k<words.size();k++)
        {
          for(int m=k+1;m<=words.size()-1;m++)
          {
            if(m!=k)
            {
              if(CheckSimilar(words[k],words[m]))
              {
                count++;
              }
            }
          }
        }
        return count;
    }
};






