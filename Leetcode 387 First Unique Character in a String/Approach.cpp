рждрзБржорж┐ ржЬрж╛ржирждрзЗ ржЪрж╛ржЪрзНржЫрзЛ тАФ ржХрзАржнрж╛ржмрзЗ ржкрзНрж░ржержо non-repeating ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛ рж╣рзЯ, ржПржмржВ ржПржЯрж╛ ржирж┐ржЬрзЗ ржХрзЛржбрзЗ рж▓рзЗржЦрж╛рж░ ржЖржЧрзЗ ржХрж┐ржнрж╛ржмрзЗ ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЛред ржПржЦрж╛ржирзЗ ржЖржорж┐ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░ржмрзЛ ржпрзЗ ржХрзАржнрж╛ржмрзЗ рждрзБржорж┐ ржПржЗ рж╕ржорж╛ржзрж╛ржиржЯрж┐ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЛ ржПржмржВ ржПрж░ ржкрзЗржЫржирзЗ ржХрзА ржпрзБржХрзНрждрж┐ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред

1. Problem Analysis (рж╕ржорж╕рзНржпрж╛рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг):
рждрзЛржорж╛рж░ ржХрж╛ржЫрзЗ ржПржХржЯрж┐ string ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред

рждрзЛржорж╛ржХрзЗ string-ржПрж░ ржкрзНрж░ржержо non-repeating (unique) character ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗ ржПржмржВ рждрж╛рж░ index рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ рж╣ржмрзЗред

ржпржжрж┐ ржПржоржи ржХрзЛржи character ржирж╛ ржерж╛ржХрзЗ ржпрж╛ ржПржХржмрж╛рж░ржЗ ржПрж╕рзЗржЫрзЗ, рждржмрзЗ -1 рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ рж╣ржмрзЗред

2. Step-by-step Approach:
Step 1: Frequency Count
ржкрзНрж░ржержо ржХрж╛ржЬ рж╣ржЪрзНржЫрзЗ, string-ржПрж░ ржкрзНрж░рждрж┐ржЯрж┐ character ржХрждржмрж╛рж░ ржПрж╕рзЗржЫрзЗ рждрж╛ ржЧрзБржирждрзЗ рж╣ржмрзЗред

ржПржЗ ржХрж╛ржЬрзЗрж░ ржЬржирзНржп ржЖржорж┐ ржПржХржЯрж┐ unordered_map ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ ржпрзЗржЦрж╛ржирзЗ key рж╣ржмрзЗ character ржПржмржВ value рж╣ржмрзЗ рждрж╛рж░ frequency (ржХрждржмрж╛рж░ ржПрж╕рзЗржЫрзЗ)ред

cpp
Copy
Edit
unordered_map<char, int> freq;
Step 2: Count Frequencies of All Characters
String-ржПрж░ ржЙржкрж░ ржПржХржмрж╛рж░ loop ржЪрж╛рж▓рж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж┐ character-ржПрж░ frequency ржЧрзБржирзЗ ржирзЗржУрзЯрж╛ рж╣ржмрзЗред

cpp
Copy
Edit
for (int i = 0; i < s.size(); i++) {
    freq[s[i]]++; // frequency count
}
ржПржЦрж╛ржирзЗ freq[s[i]]++ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж┐ character-ржПрж░ frequency ржмрзГржжрзНржзрж┐ ржХрж░ржЫрж┐ред

Step 3: Find First Unique Character
ржПрж░ржкрж░ ржЖржмрж╛рж░ string-ржПрж░ ржЙржкрж░ loop ржЪрж╛рж▓рж┐рзЯрзЗ ржкрзНрж░ржержо character ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗ ржпрж╛рж░ frequency 1 (ржорж╛ржирзЗ рж╕рзЗржЯрж┐ non-repeating character)ред

cpp
Copy
Edit
for (int j = 0; j < s.size(); j++) {
    if (freq[s[j]] == 1) {
        return j; // First unique character found
    }
}
ржпржжрж┐ string-ржПрж░ ржоржзрзНржпрзЗ ржПржоржи ржПржХржЯрж┐ character ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ ржпрж╛рж░ frequency 1, рждржЦржи рждрж╛рж░ index рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

Step 4: No Unique Character Found
ржпржжрж┐ string-ржПрж░ ржХрзЛржирзЛ character ржПрж░ frequency 1 ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржЖржорж░рж╛ -1 рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЛ, ржпрзЗрж╣рзЗрждрзБ ржХрзЛржи unique character ржирзЗржЗред

cpp
Copy
Edit
return -1; // No unique character found
3. Full Code Explanation:
ржПржЦржи ржкрзБрж░рзЛ ржХрзЛржбржЯрж╛ ржПржХрждрзНрж░рзЗ ржжрзЗржЦрзЗ ржирзЗржУрзЯрж╛ ржпрж╛ржХ:

cpp
Copy
Edit
class Solution {
public:
   int firstUniqChar(string s)
   {
     unordered_map<char,int>freq;  // Step 1: Frequency map to store character counts
     
     int ans = -1;  // Step 2: Variable to store the result, initially -1
     
     // Step 3: Counting frequencies of all characters in the string
     for (int i = 0; i < s.size(); i++) {
        freq[s[i]]++;  // Increase frequency count for each character
     }
    
    // Step 4: Searching for the first non-repeating character
    for (int j = 0; j < s.size(); j++) {
        if (freq[s[j]] == 1) {  // If frequency is 1, it is a unique character
           ans = j;  // Store the index of the first unique character
           break;  // No need to check further, we found the answer
        }
    }
    return ans;  // Return the index of the first unique character (or -1 if not found)
   }
};
4. Detailed Explanation of Code (line-by-line in Bangla):
unordered_map<char, int> freq;

ржПржЦрж╛ржирзЗ ржПржХржЯрж┐ unordered_map рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржпрж╛ character ржЧрзБрж▓рж┐рж░ frequency рж╕ржВрж░ржХрзНрж╖ржг ржХрж░ржмрзЗред

char рж╣рж▓рзЛ key (character) ржПржмржВ int рж╣рж▓рзЛ value (frequency of the character)ред

int ans = -1;

ans ржнрзЗрж░рж┐рзЯрзЗржмрж▓ржЯрж┐ ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ -1 ржжрж┐рзЯрзЗред ржПржЯрж┐ ржкрж░ржмрж░рзНрждрзА рж╕ржорзЯрзЗ ржкрзНрж░ржержо non-repeating character-ржПрж░ index рж░рж╛ржЦржмрзЗред

for (int i = 0; i < s.size(); i++) { freq[s[i]]++; }

ржПржЗ рж▓рзБржкржЯрж┐ string s-ржПрж░ ржкрзНрж░рждрж┐ржЯрж┐ character ржПрж░ ржЬржирзНржп frequency count ржХрж░ржмрзЗред

ржпрзЗржоржи freq[s[i]]++ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж┐ character-ржПрж░ frequency ржмрж╛рзЬрж┐рзЯрзЗ ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗред

for (int j = 0; j < s.size(); j++) { if (freq[s[j]] == 1) { ans = j; break; } }

ржПржмрж╛рж░, ржжрзНржмрж┐рждрзАрзЯ рж▓рзБржкржЯрж┐ string s-ржПрж░ ржкрзНрж░рждрж┐ржЯрж┐ character ржХрзЗ ржЪрзЗржХ ржХрж░ржмрзЗред

ржпржжрж┐ ржХрзЛржи character ржПрж░ frequency 1 рж╣рзЯ, рждржмрзЗ рж╕рзЗржЯрж╛ ржкрзНрж░ржержо non-repeating character ржПржмржВ рждрж╛рж░ index ans ржП рж╕рзНржЯрзЛрж░ рж╣ржмрзЗред ржПрж░ржкрж░ break ржжрж┐рзЯрзЗ рж▓рзБржк ржмржирзНржз ржХрж░рж╛ рж╣ржмрзЗред

return ans;

рж╢рзЗрж╖рзЗ ans рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржмрзЗред ржпржжрж┐ ржХрзЛржи unique character ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждржмрзЗ ans ржерж╛ржХржмрзЗ -1, ржпрж╛ рж░рж┐ржЯрж╛рж░рзНржи рж╣ржмрзЗред

5. Example Walkthrough:
Example 1:
Input: s = "leetcode"

ржкрзНрж░ржержо рж▓рзБржкрзЗрж░ рж╢рзЗрж╖рзЗ freq рж╣ржмрзЗ:

cpp
Copy
Edit
freq = {'l': 1, 'e': 3, 't': 1, 'c': 1, 'o': 1, 'd': 1}
ржжрзНржмрж┐рждрзАрзЯ рж▓рзБржкрзЗ ржкрзНрж░ржержо non-repeating character ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ l (index 0), рждрж╛ржЗ output рж╣ржмрзЗ 0ред

Example 2:
Input: s = "loveleetcode"

ржкрзНрж░ржержо рж▓рзБржкрзЗрж░ рж╢рзЗрж╖рзЗ freq рж╣ржмрзЗ:

cpp
Copy
Edit
freq = {'l': 2, 'o': 2, 'v': 1, 'e': 4, 't': 1, 'c': 1, 'd': 1}
ржжрзНржмрж┐рждрзАрзЯ рж▓рзБржкрзЗ v (index 2) ржкрзНрж░ржержо unique character, рждрж╛ржЗ output рж╣ржмрзЗ 2ред

Example 3:
Input: s = "aabb"

ржкрзНрж░ржержо рж▓рзБржкрзЗрж░ рж╢рзЗрж╖рзЗ freq рж╣ржмрзЗ:

cpp
Copy
Edit
freq = {'a': 2, 'b': 2}
ржжрзНржмрж┐рждрзАрзЯ рж▓рзБржкрзЗ ржХрзЛржи unique character ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ ржирж╛, рждрж╛ржЗ output рж╣ржмрзЗ -1ред

6. Conclusion:
ржПржЗ ржХрзЛржбржЯрж┐ ржЦрзБржмржЗ рж╕рж╛ржзрж╛рж░ржг ржПржмржВ two-pass approach ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

ржкрзНрж░ржержо pass-ржП frequency count ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ,

ржжрзНржмрж┐рждрзАрзЯ pass-ржП ржкрзНрж░ржержо unique character ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
ржПржЯрж┐ O(n) ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐ ржПржмржВ O(n) рж╕рзНржкрзЗрж╕ ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐рждрзЗ рж╕ржорж╛ржзрж╛ржи ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред



Test Code how it is accepted:
-----------------------------
  рждрзБржорж┐ ржпрзЗржЯрж╛ ржЬрж╛ржирждрзЗ ржЪрж╛ржЪрзНржЫрзЛ тАФ рж╕рзЗржЯрж╛ рж╣рж▓рзЛ ржПржЗ ржХрзЛржбржЯрж┐ ржХрзЗржи ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ ржПржмржВ ржкрзНрж░рждрж┐ржЯрж┐ рж▓рж╛ржЗржи ржХрзА ржХрж╛ржЬ ржХрж░ржЫрзЗ, рж╕рзЗржЯрж╛ ржпрзЗржи рждрзБржорж┐ ржнржмрж┐рж╖рзНржпрждрзЗ ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЛред

рждрж╛ржЗ ржЖржорж┐ ржирж┐ржЪрзЗ рждрзЛржорж╛рж░ ржХрзЛржбржЯрж┐ рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж▓рж╛ржо тАФ ржмрж╛ржВрж▓рж╛рзЯ ржЙржжрж╛рж╣рж░ржгрж╕рж╣, ржпрж╛рждрзЗ рждрзБржорж┐ рж╕рж╣ржЬрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЛ ржПржмржВ ржнржмрж┐рж╖рзНржпрждрзЗ ржирж┐ржЬрзЗржЗ ржПрж░ ржорждрзЛ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рзЛред

тЬЕ ржХрзЛржб:
cpp
Copy
Edit
class Solution 
{
public:
   int firstUniqChar(string s)
   {
     unordered_map<char,int>freq;
  
     int ans=-1;
     for(int i=0;i<s.size();i++)
     {
        freq[s[i]]++;
     }
    
     for(int j=0;j<s.size();j++)
     {
        if(freq[s[j]]==1)
        {
           ans=j;
           break;
        }
     }
     return ans;
   }
};
тЬЕ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
ЁЯФ╣ Step 1:
cpp
Copy
Edit
unordered_map<char,int> freq;
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ ржПржХржЯрж┐ unordered_map ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрж┐ ржпрзЗржЦрж╛ржирзЗ:

Key: char тЖТ рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░

Value: int тЖТ рж╕рзЗржЗ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржХрзЯржмрж╛рж░ ржПрж╕рзЗржЫрзЗ (frequency)

тЮбя╕П ржПржЗ map ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржЯрж┐ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░рзЗрж░ frequency ржЧрзБржиржмрзЛред

ЁЯФ╣ Step 2:
cpp
Copy
Edit
int ans = -1;
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржПржЯрж┐ ржЖржорж░рж╛ ржзрж░рзЗ ржирж┐ржЪрзНржЫрж┐ ржпрзЗ ржпржжрж┐ ржХрзЛржирзЛ non-repeating character ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ -1 рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЛред

ЁЯФ╣ Step 3:
cpp
Copy
Edit
for(int i=0;i<s.size();i++)
{
    freq[s[i]]++;
}
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ s рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ржХрзЗ ржПржХржмрж╛рж░ ржХрж░рзЗ ржШрзБрж░рзЗ ржжрзЗржЦржЫрж┐ред

тПй ржЙржжрж╛рж╣рж░ржг:

cpp
Copy
Edit
Input: s = "leetcode"
freq map рж╣ржмрзЗ:
{
  'l' => 1,
  'e' => 3,
  't' => 1,
  'c' => 1,
  'o' => 1,
  'd' => 1
}
рж╕рзБрждрж░рж╛ржВ ржЖржорж░рж╛ ржПржЦржи ржЬрж╛ржирж┐ ржХрзЗ ржХрждржмрж╛рж░ ржПрж╕рзЗржЫрзЗред

ЁЯФ╣ Step 4:
cpp
Copy
Edit
for(int j=0;j<s.size();j++)
{
    if(freq[s[j]]==1)
    {
        ans = j;
        break;
    }
}
ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржмрж╛рж░ ржЖржмрж╛рж░ string s-ржПрж░ ржЙржкрж░ loop ржЪрж╛рж▓рж╛ржЗ, ржПржмржВ ржжрзЗржЦрж┐:

ржпрзЗржЗ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░рзЗрж░ frequency 1 тЖТ ржЕрж░рзНржерж╛рзО non-repeating

рж╕рзЗржЗ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ржЯрж╛рж░ index ржЖржорж░рж╛ ans-ржП рж░рзЗржЦрзЗ break ржХрж░рж┐

тПй ржЙржжрж╛рж╣рж░ржг:

cpp
Copy
Edit
s = "leetcode"

j = 0 тЖТ s[0] = 'l' тЖТ freq['l'] == 1 тЖТ рждрж╛ржЗ ans = 0 тЖТ break

Output: 0 тЬЕ
тПй Example 2:

cpp
Copy
Edit
s = "loveleetcode"

j=0 тЖТ 'l' = 1  
j=1 тЖТ 'o' = 2  
j=2 тЖТ 'v' = 1 тЖТ freq['v']==1 тЖТ тЬЕ

Output: 2
тПй Example 3:

cpp
Copy
Edit
s = "aabb"

freq:
'a' = 2  
'b' = 2  
тЖТ ржХржЦржиржЗ freq[s[j]]==1 рж╣ржмрзЗ ржирж╛

тЖТ ans = -1 тЖТ return -1
ЁЯФ╣ Step 5:
cpp
Copy
Edit
return ans;
ржмрзНржпрж╛ржЦрзНржпрж╛:
рж╢рзЗрж╖рзЗ ржЖржорж░рж╛ ans рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж┐, ржпрзЗржЯрж╛ рж╣ржмрзЗ:

ржпржжрж┐ non-repeating ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ тЖТ рждрж╛рж░ index

ржирж╛ ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓рзЗ тЖТ -1

тЬЕ ржХрзЗржи ржПржЗ рж╕ржорж╛ржзрж╛ржи Accepted?
Time Complexity: O(n) тЖТ ржкрзНрж░ржержо рж▓рзБржкрзЗ рж╕рзНржЯрзНрж░рж┐ржВ ржЯрзНрж░рж╛ржнрж╛рж░рзНрж╕, ржжрзНржмрж┐рждрзАрзЯ рж▓рзБржкрзЗржУ рждрж╛ржЗ

Space Complexity: O(1) тЖТ ржХрж╛рж░ржг unordered_map<char, int> тЖТ рж╕рж░рзНржмрзЛржЪрзНржЪ 26 lowercase letter ржерж╛ржХржмрзЗ

Efficient ржПржмржВ Clean ржХрзЛржб

рж╕ржм constraint ржорзЗржирзЗ ржЪрж▓рзЗ

ЁЯФЪ ржЙржкрж╕ржВрж╣рж╛рж░ (Recap):
unordered_map ржжрж┐рзЯрзЗ frequency ржЧрзБржирзЗ ржирж┐ржЗ

ржжрзНржмрж┐рждрзАрзЯ рж▓рзБржкрзЗ ржкрзНрж░ржержо ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржжрзЗржЦрж┐ ржпрж╛рж░ frequency 1 тЖТ ржПржЯрж╛ржЗ ржЙрждрзНрждрж░

ржирж╛ ржкрзЗрж▓рзЗ -1






