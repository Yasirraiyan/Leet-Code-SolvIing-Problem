тЬЕ Problem ржмрзЛржЭрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛:

рждрзЛржорж╛ржХрзЗ ржПржоржи ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ ржЦрзЛржБржЬ ржХрж░рждрзЗ ржмрж▓рж╛ рж╣рзЯрзЗржЫрзЗ ржпрзЗржЯрж┐ k-рждржо ржмрзЬ рж╕ржВржЦрзНржпрж╛ред

ЁЯУМ Example 1:
nums = [3,2,1,5,6,4], k = 2
тЖТ Sorted form: [1,2,3,4,5,6] тЖТ 2nd largest = 5 тЬЕ

ЁЯУМ Example 2:
nums = [3,2,3,1,2,4,5,5,6], k = 4
тЖТ Sorted: [1,2,2,3,3,4,5,5,6] тЖТ 4th largest = 4 тЬЕ


---

ЁЯза ржХрж┐ржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЛ?

рждрзЛржорж╛рж░ ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛ ржЙржЪрж┐ржд:

1. "k-th largest" ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ ржкрзЗржЫржи ржерзЗржХрзЗ k-рждржо ржЙржкрж╛ржжрж╛ржиред


2. ржЕрж░рзНржерж╛рзО nums ржпржжрж┐ ржмрзЬ ржерзЗржХрзЗ ржЫрзЛржЯ ржХрзНрж░ржорзЗ рж╕рж╛ржЬрж╛ржирзЛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ k-1 index-ржП ржпрзЗржЗ рж╕ржВржЦрзНржпрж╛ ржЖржЫрзЗ, рж╕рзЗржЯрж┐ржЗ рж╣ржмрзЗ ржЙрждрзНрждрж░ред



тЬЕ рждрж╛рж╣рж▓рзЗ рждрзБржорж┐ ржпржжрж┐ nums ржХрзЗ ржмрзЬ ржерзЗржХрзЗ ржЫрзЛржЯрзЗ рж╕рж╛ржЬрж╛ржУ (descending), рждрж╛рж╣рж▓рзЗ рж╕рж░рж╛рж╕рж░рж┐ nums[k-1] рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж▓рзЗржЗ рж╣ржмрзЗред

ржХрж┐ржирзНрждрзБ рждрзЛржорж╛рж░ ржХрзЛржбрзЗ рждрзБржорж┐ ascending order ржП sort ржХрж░рзЗржЫрзЛ, рждрж╛ржЗ рждрзБржорж┐ рж╢рзЗрж╖рзЗ ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ k-рждржо ржЙржкрж╛ржжрж╛ржи ржмрзЗрж░ ржХрж░рзЗржЫрзЛред


---

тЬЕ ржХрзЛржб ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (рждрзЛржорж╛рж░ ржжрзЗржУрзЯрж╛):

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int count=0;
        sort(nums.begin(),nums.end()); // Step 1: nums sort ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ (ascending)
        int ans;
        for(int j=nums.size()-1;j>=0;j--) // Step 2: рж╢рзЗрж╖ ржерзЗржХрзЗ (largest ржерзЗржХрзЗ) рж╢рзБрж░рзБ ржХрж░ржЫрж┐
        {
            count++; // Step 3: ржХржд рждржо largest ржжрзЗржЦрждрзЗ ржЪрж╛ржЗ рждрж╛ count ржХрж░ржЫрж┐
            if(count==k) // Step 4: ржпржжрж┐ ржПржЯрж╛ ржЖржорж╛ржжрзЗрж░ k-th рж╣рзЯ
            {
                ans=nums[j]; // рждрж╛рж╣рж▓рзЗ ржПржЯрж╛ ржЖржорж╛ржжрзЗрж░ ржЙрждрзНрждрж░
                break;
            }
        }
        return ans;
    }
};


---

тЬЕ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ (Line by Line):

sort(nums.begin(), nums.end());

ЁЯФ╕ nums array ржЯрж╛ ascending order ржП рж╕рж╛ржЬрж╛ржирзЛ рж╣ржЪрзНржЫрзЗред
Example: [3,2,1,5,6,4] тЖТ [1,2,3,4,5,6]


---

for(int j = nums.size() - 1; j >= 0; j--)

ЁЯФ╕ ржПржЦржи ржЖржорж░рж╛ рж╢рзЗрж╖ index (рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛) ржерзЗржХрзЗ k-рждржо index ржкрж░рзНржпржирзНржд count ржХрж░ржмрзЛред


---

count++;
    if(count == k) {
        ans = nums[j];
        break;
    }

ЁЯФ╕ ржпрждржмрж╛рж░ ржЖржорж░рж╛ ржПржХрзЗржХржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржжрзЗржЦрж┐, count++ ржХрж░рзЗ ржпрж╛ржЪрзНржЫрж┐ред
ЁЯФ╕ ржпржжрж┐ count == k рж╣рзЯ, ржПрж░ ржорж╛ржирзЗ k-рждржо largest ржкрзЗрзЯрзЗ ржЧрзЗржЫрж┐ред рждржЦржи рж╕рзЗржЯрж╛ржХрзЗ ans ржП рж░рзЗржЦрзЗ return ржХрж░ржмрзЛред


---

тЬЕ Math ржмрзНржпрж╛ржЦрзНржпрж╛ (Bangla):

ржзрж░рж╛ ржпрж╛ржХ:

рждрзБржорж┐ nums = [3,2,1,5,6,4] ржжрж┐рж▓рзЗ,

ржЖрж░ k = 2


рждрж╛рж╣рж▓рзЗ ascending sort ржХрж░рж▓рзЗ nums = [1,2,3,4,5,6]
ржПржЦржи ржкрзЗржЫржи ржерзЗржХрзЗ k-рждржо ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ index n-k = 6-2 = 4
ржорж╛ржирзЗ nums[4] = 5
тЖТ ржПржЯрж╛ ржарж┐ржХ ржЖржЫрзЗред

рждрзБржорж┐ loop ржЪрж╛рж▓рж┐рзЯрзЗ ржкрзЗржЫржи ржерзЗржХрзЗ count ржХрж░рзЗ рж╕рзЗржЗ ржЬрж╛рзЯржЧрж╛рзЯ ржЧрж┐рзЯрзЗржЗ return ржХрж░рзЗржЫрзЛред
рждрж╛ржЗ рждрзЛржорж╛рж░ ржХрзЛржб ржХрж╛ржЬ ржХрж░ржЫрзЗ ржПржмржВ Acceptedред


---

тЬЕ ржХрзЗржи ржПржЯрж╛ Accepted:

Time Complexity: O(n log n) (ржХрж╛рж░ржг sort ржХрж░рж╛рж░ ржЬржирзНржп)

Space Complexity: O(1) (in-place sort ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ)


ржпрзЗрж╣рзЗрждрзБ n <= 10^5, ржПржмржВ sort ржПрж░ рж╕ржорзЯрж╕рзАржорж╛ acceptable, рждрж╛ржЗ рждрзЛржорж╛рж░ solution Accepted рж╣рзЯрзЗржЫрзЗ

  Full Code:
----------------

class Solution 
{
public:
    int findKthLargest(vector<int>& nums, int k) 
{
       
        int count=0;
        sort(nums.begin(),nums.end());
        int ans;
        for(int j=nums.size()-1;j>=0;j--)
            {
               
                count++;
                if(count==k)
                {
                    ans=nums[j];
                    break;
                }
            }
        return ans;
    }
};
