ЁЯФ╢ Problem ржЯрж╛ ржХрж┐ ржмрж▓ржЫрзЗ?
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж╛ ржкржЬрж┐ржЯрж┐ржн ржЗржиржЯрж┐ржЬрж╛рж░ ржЕрзНржпрж╛рж░рзЗ nums ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред

Alice ржжрзБржЗржЯрж╛ ржЕржкрж╢ржи ржерзЗржХрзЗ ржПржХржЯрж╛ ржмрзЗржЫрзЗ ржирж┐рждрзЗ ржкрж╛рж░ржмрзЗ:

рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржм single-digit (1 ржерзЗржХрзЗ 9) ржирж╛ржорзНржмрж╛рж░ ржирзЗржмрзЗред

ржЕржержмрж╛ рж╕ржм double-digit (10 ржерзЗржХрзЗ 99) ржирж╛ржорзНржмрж╛рж░ ржирзЗржмрзЗред

Bob ржмрж╛ржХрж┐ рж╕ржм ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржмрзЗред

Alice ржЬрж┐рждржмрзЗ ржпржжрж┐ рждрж╛рж░ ржирж╛ржорзНржмрж╛рж░ржЧрзБрж▓рзЛрж░ sum > Bob ржПрж░ ржирж╛ржорзНржмрж╛рж░ржЧрзБрж▓рзЛрж░ sum рж╣рзЯред

ЁЯФН ржЙржжрж╛рж╣рж░ржг:
Example 1:

cpp
Copy
Edit
nums = [1,2,3,4,10]
Single digits sum = 1+2+3+4 = 10
Double digits sum = 10

Total = 20

If Alice chooses:
- Single тЖТ Alice=10, Bob=10 тЖТ Not greater
- Double тЖТ Alice=10, Bob=10 тЖТ Not greater

Output: false
Example 2:

cpp
Copy
Edit
nums = [1,2,3,4,5,14]
Single digits sum = 15
Double digits sum = 14
Total = 29

If Alice chooses:
- Single тЖТ Alice=15, Bob=14 тЖТ тЬЕ Alice wins

Output: true
ЁЯза рж╕ржорж╛ржзрж╛ржи ржнрж╛ржмрж╛рж░ ржзрж╛ржк (Approach):
ржкрзНрж░рждрж┐ржЯрж┐ ржирж╛ржорзНржмрж╛рж░ ржпржжрж┐ 1 <= x <= 9 тЖТ Single-digit рж╕рзЗржЧрзБрж▓рзЛ ржпрзЛржЧ ржХрж░рзЗ singsum

ржпржжрж┐ 10 <= x <= 99 тЖТ Double-digit тЖТ ржпрзЛржЧ ржХрж░рзЗ doubsum

рж╕ржмржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░рзЛ тЖТ totsum

ржПржЦржи Alice ржпржжрж┐ singsum > totsum - singsum ржмрж╛ doubsum > totsum - doubsum рж╣рзЯ тАФ рждрж╛рж╣рж▓рзЗ рж╕рзЗ ржЬрж┐рждржмрзЗред

тЬЕ рждрзЛржорж╛рж░ ржХрзЛржбрзЗрж░ Line-by-Line ржмрзНржпрж╛ржЦрзНржпрж╛ (Bangla):
cpp
Copy
Edit
class Solution {
public:
    bool canAliceWin(vector<int>& nums) {
        int singsum = 0;      // Single-digit рж╕ржВржЦрзНржпрж╛ ржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓
        int doubsum = 0;      // Double-digit рж╕ржВржЦрзНржпрж╛ ржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓
        int totsum = 0;       // рж╕ржм рж╕ржВржЦрзНржпрж╛рж░ ржорзЛржЯ ржпрзЛржЧржлрж▓
        bool alice = false;   // Alice ржХрж┐ ржЬрж┐рждржмрзЗ ржХрж┐ржирж╛

        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] >= 0 && nums[i] <= 9) {
                singsum += nums[i];  // ржпржжрж┐ single-digit рж╣рзЯ
            }
            if(nums[i] >= 10 && nums[i] <= 99) {
                doubsum += nums[i];  // ржпржжрж┐ double-digit рж╣рзЯ
            }
            totsum += nums[i];       // рж╕ржм ржирж╛ржорзНржмрж╛рж░рзЗрж░ sum
        }

        // Alice ржЬрзЯрзА рж╣ржмрзЗ ржпржжрж┐ рждрж╛рж░ ржХрзЛржи ржПржХржЯрж╛ sum Bob ржПрж░ ржЪрзЗрзЯрзЗ strictly ржмрзЗрж╢рж┐ рж╣рзЯ
        if((singsum > totsum - singsum) || (doubsum > totsum - doubsum)) {
            alice = true;
        }

        return alice;
    }
};
тЬЕ ржХрзЗржи ржХрзЛржб Accepted рж╣рзЯ?
Time Complexity: O(n) тАФ ржПржХржмрж╛рж░ржЗ рж▓рзБржк ржЪрж╛рж▓рж┐рзЯрзЗ рж╕ржм рж╣рж┐рж╕рж╛ржм ржХрж░ржЫрзЛ

Space Complexity: O(1) тАФ рж╢рзБржзрзБ ржХрзЯрзЗржХржЯрж╛ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯрзЗржЫрзЗ

ЁЯФО Test Cases Walkthrough:
ЁЯФ╣ Test Case 1:
cpp
Copy
Edit
Input: nums = [1, 2, 3, 4, 10]
singsum = 1+2+3+4 = 10
doubsum = 10
totsum = 20

Try:
- Alice: 10 vs Bob: 10 тЖТ Not strictly greater
тЖТ Output: false
ЁЯФ╣ Test Case 2:
cpp
Copy
Edit
Input: nums = [1,2,3,4,5,14]
singsum = 1+2+3+4+5 = 15
doubsum = 14
totsum = 29

Try:
- Alice (single): 15 > 14 тЖТ тЬЕ
тЖТ Output: true
ЁЯФ╣ Test Case 3:
cpp
Copy
Edit
Input: nums = [5,5,5,25]
singsum = 5+5+5 = 15
doubsum = 25
totsum = 40

Try:
- Alice (double): 25 > 15 тЖТ тЬЕ
тЖТ Output: true

Full Code:
-----------

  class Solution 
{
public:
bool canAliceWin(vector<int>&nums)
{
    int singsum=0;
    int doubsum=0;
    int totsum=0;
    bool alice=false;
    for(int i=0;i<nums.size();i++)
    {
      if(nums[i]>=0&&nums[i]<=9)
      {
        singsum+=nums[i];

      }
      if(nums[i]>=10&&nums[i]<=99)
      {
        doubsum+=nums[i];

      }
      totsum+=nums[i];
    }
      if((singsum>totsum-singsum)||(doubsum>totsum-doubsum))
      {
         alice =true;
      }
    return alice;
        }
    
};
