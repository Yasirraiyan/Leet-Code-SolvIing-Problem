рждрзБржорж┐ ржпрзЗржнрж╛ржмрзЗ insertionSortList рж╕ржорж╛ржзрж╛ржи рж▓рж┐ржЦржЫрзЛ, рж╕рзЗржЯрж╛ ржЗржирж╕рж╛рж░рж╢ржи-рж╕рзЛрж░рзНржЯрзЗрж░ ржорзВрж▓ ржХржирж╕рзЗржкрзНржЯ ржЕржирзБржпрж╛рзЯрзА рж╕рж░рж╛рж╕рж░рж┐ linked list-ржП ржЗржиржкрзНрж▓рзЗрж╕ ржХрж╛ржЬ ржХрж░ржЫрзЗ ржирж╛, ржмрж░ржВ list ржЯрж╛ржХрзЗ ржкрзНрж░ржержорзЗ vector<int> ржП ржХржиржнрж╛рж░рзНржЯ ржХрж░рзЗ рждрж╛рж░ржкрж░ sort ржХрж░рзЗ ржЖржмрж╛рж░ ржирждрзБржи ржПржХржЯрж╛ sorted linked list рждрзИрж░рж┐ ржХрж░ржЫрзЛред

рждрзЛржорж╛рж░ рж╕ржорж╛ржзрж╛ржи Accepted рж╣ржЪрзНржЫрзЗ ржХрж╛рж░ржг ржПржЯрж╛ Time Limit Exceeded ржмрж╛ Memory Limit Exceeded рж╣ржЪрзНржЫрзЗ ржирж╛, ржПржмржВ рж╕ржорж╕рзНржпрж╛рж░ ржЖржЙржЯржкрзБржЯ ржарж┐ржХ ржорждрзЛ ржжрж┐ржЪрзНржЫрзЗред

тЬЕ ржПржЦржи ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рждрзЛржорж╛рж░ рж╕ржорж╛ржзрж╛ржи ржУ ржЪрж┐ржирзНрждрж╛ржнрж╛ржмржирж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж┐:
ЁЯУМ Step 1: ржкрзНрж░рж╢рзНржи ржнрж╛рж▓рзЛржнрж╛ржмрзЗ ржкрзЬрж╛ ржУ ржмрзБржЭрж╛
ржкрзНрж░рж╢рзНржи ржмрж▓ржЫрзЗ тАУ

Insertion sort ржПрж░ ржорждрзЛ ржХрж░рзЗ linked list sort ржХрж░рждрзЗ рж╣ржмрзЗред

Insertion sort ржПрж░ ржзрж╛рж░ржгрж╛ рж╣ржЪрзНржЫрзЗ: ржзрзАрж░рзЗ ржзрзАрж░рзЗ рззржЯрж╛ ржХрж░рзЗ ржПрж▓рж┐ржорзЗржирзНржЯ ржирзЗрзЯрж╛ ржПржмржВ ржЖржЧрзЗ ржерзЗржХрзЗ ржпрждржЯрж╛ sort рж╣рзЯрзЗржЫрзЗ, рждрж╛рж░ рж╕ржарж┐ржХ ржЬрж╛рзЯржЧрж╛рзЯ рж╕рзЗржЯрж╛ ржмрж╕рж╛ржирзЛред

тЭЧ ржХрж┐ржирзНрждрзБ рждрзБржорж┐ ржпрзЗржЯрж╛ ржХрж░рзЗржЫрзЛ рждрж╛ рж╣рж▓рзЛ тАУ insertion sort ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржирж┐, ржмрж░ржВ vector ржирж┐рзЯрзЗ рждрж╛рж░ржкрж░ STL sort() ржжрж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рзЗржЫрзЛред

рждржмрзБржУ ржпрзЗрж╣рзЗрждрзБ ржкрзНрж░рж╢рзНржирзЗ Insertion Sort ржПрж░ ржЧрж╛ржЗржбрж▓рж╛ржЗржи ржерж╛ржХрж▓рзЗржУ, рж╢рзБржзрзБ "sort using insertion sort" ржмрж▓рзЗржЫрзЗ, ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзЗржирж┐, рждрж╛ржЗ ржПржЗ ржХрж╛ржЬржЯрж╛ржУ valid.

тЬЕ Step 2: рждрзБржорж┐ ржпрзЗржнрж╛ржмрзЗ рж╕ржорж╛ржзрж╛ржи рж▓рж┐ржЦрзЗржЫрзЛ
cpp
Copy
Edit
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        vector<int> v;

        // Step 1: Linked List тЖТ vector
        while (head != nullptr) {
            v.push_back(head->val);
            head = head->next;
        }

        // Step 2: vector sort
        sort(v.begin(), v.end());

        // Step 3: ржирждрзБржи sorted linked list рждрзИрж░рж┐
        ListNode* newHead = new ListNode(v[0]);
        ListNode* curr = newHead;
        for (int i = 1; i < v.size(); i++) {
            curr->next = new ListNode(v[i]);
            curr = curr->next;
        }

        return newHead;
    }
};
тЬЕ ржПржЦржи рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛ (ржмрж╛ржВрж▓рж╛):
ЁЯФ╖ Step 1: Linked list ржХрзЗ vector-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛
cpp
Copy
Edit
vector<int> v;
while (head != nullptr) {
    v.push_back(head->val);
    head = head->next;
}
ЁЯФ╕ ржПржЦрж╛ржирзЗ рждрзБржорж┐ ржкрзБрж░рж╛ linked list ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ node ржерзЗржХрзЗ val ржмрзЗрж░ ржХрж░рзЗ v ржирж╛ржоржХ vector-ржП рж░рзЗржЦрзЗ ржжрж┐ржЪрзНржЫрзЛред
тП▒я╕П Time Complexity: O(n)

ЁЯФ╖ Step 2: Vector sort ржХрж░рж╛
cpp
Copy
Edit
sort(v.begin(), v.end());
ЁЯФ╕ STL ржПрж░ sort() ржлрж╛ржВрж╢ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ vector ржЯрж╛ ascending order-ржП рж╕рж╛ржЬрж┐рзЯрзЗ ржлрзЗрж▓ржЫрзЛред
тП▒я╕П Time Complexity: O(n log n)

ЁЯФ╖ Step 3: Sorted vector ржерзЗржХрзЗ ржирждрзБржи linked list рждрзИрж░рж┐ ржХрж░рж╛
cpp
Copy
Edit
ListNode* newHead = new ListNode(v[0]);
ListNode* curr = newHead;
for (int i = 1; i < v.size(); i++) {
    curr->next = new ListNode(v[i]);
    curr = curr->next;
}
ЁЯФ╕ ржирждрзБржи ржПржХржЯрж╛ linked list рждрзИрж░рж┐ ржХрж░ржЫрзЛ ржпрзЗржЦрж╛ржирзЗ v[0] ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ, ржПрж░ржкрж░ ржПржХ ржПржХ ржХрж░рзЗ ржмрж╛ржХрж┐ ржЧрзБрж▓рж╛ insert ржХрж░ржЫрзЛред

тП▒я╕П Time Complexity: O(n)

ЁЯФЪ Final Return:
cpp
Copy
Edit
return newHead;
ЁЯФ╕ ржирждрзБржи sorted linked list ржПрж░ head рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржЫрзЛред

тЬЕ Total Time & Space Complexity:
Time: O(n log n)

Space: O(n) тЖТ ржХрж╛рж░ржг рждрзБржорж┐ vector ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЛред

тЭЧржХрзЗржи Accepted?
ржХрж╛рж░ржг ржкрзНрж░рж╢рзНржирзЗ insertion sort ржПрж░ ржнрж┐рждрж░рзЗрж░ implementation ржХрж░рждрзЗ ржмрж▓рж▓рзЗржУ, рждрзБржорж┐ ржХрж╛ржЬржЯрж╛ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржХрж░рзЗржЫрзЛ, ржпржжрж┐ржУ insertion sort ржЯрзЗржХржирж┐ржХрзНржпрж╛рж▓рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛржирж┐ред

ржЕржирзЗржХ ржЕржирж▓рж╛ржЗржи ржЬрж╛ржЬ рж╢рзБржзрзБржорж╛рждрзНрж░ output verify ржХрж░рзЗ, internal implementation ржирж╛ред

ЁЯУж ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзЛржЭрж╛ржЗ (Test Case walkthrough):
ржЙржжрж╛рж╣рж░ржг рзз:
Input:

ini
Copy
Edit
head = [4, 2, 1, 3]
Step 1 тЖТ vector:
v = [4, 2, 1, 3]

Step 2 тЖТ sort:
v = [1, 2, 3, 4]

Step 3 тЖТ new Linked List:
1 -> 2 -> 3 -> 4

тЬЕ Output ржарж┐ржХ ржЖржЫрзЗред

ржЙржжрж╛рж╣рж░ржг рзи:
Input:

ini
Copy
Edit
head = [-1, 5, 3, 4, 0]
Step 1 тЖТ vector:
v = [-1, 5, 3, 4, 0]

Step 2 тЖТ sort:
v = [-1, 0, 3, 4, 5]

Step 3 тЖТ new Linked List:
-1 -> 0 -> 3 -> 4 -> 5

тЬЕ Output ржарж┐ржХ ржЖржЫрзЗред

Full Code:
---------

  /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        vector<int>v;
        while(head!=nullptr)
        {
          v.push_back(head->val);
          head=head->next;
        }
        sort(v.begin(),v.end());
        ListNode* newHead=new ListNode(v[0]);
        ListNode* curr= newHead;
        for(int i=1;i<v.size();i++)
        {
          curr->next= new ListNode(v[i]);
          curr=curr->next;
        }
        return newHead;
    }
};
