тЬЕ Problem Summary (ржмрж╛ржВрж▓рж╛рзЯ):


---

ржЖржорж░рж╛ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ n ржкрзЗрзЯрзЗржЫрж┐ред

ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЬ:

n-ржПрж░ ржЪрзЗрзЯрзЗ ржмрзЬ ржПржоржи рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╕ржВржЦрзНржпрж╛ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛, ржпрзЗржЯрж╛ numerically balancedред


ЁЯФН Numerically Balanced Number ржХрж╛ржХрзЗ ржмрж▓рзЗ?

ржпрзЗ рж╕ржВржЦрзНржпрж╛рзЯ:

ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржЬрж┐ржЯ d рждрж╛рж░ ржорж╛ржи ржЕржирзБрж╕рж╛рж░рзЗ ржарж┐ржХ d ржмрж╛рж░ ржПрж╕рзЗржЫрзЗред


ЁЯСЙ ржпрзЗржоржи:

22: рзи ржжрзБржЗ ржмрж╛рж░ ржПрж╕рзЗржЫрзЗ тЖТ balanced тЬЕ

3133: рзй рждрж┐ржи ржмрж╛рж░, рзз ржПржХржмрж╛рж░ ржПрж╕рзЗржЫрзЗ тЖТ balanced тЬЕ

1022: 0 ржПрж╕рзЗржЫрзЗ ржПржХржмрж╛рж░ тЖТ ржХрж┐ржирзНрждрзБ 0 ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ ржПржХржмрж╛рж░ржУ ржерж╛ржХрждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ тЖТ unbalanced тЭМ



---

ЁЯза How to Think (Approach):


---

ржкрзНрж░ржержорзЗ ржкрзНрж░рж╢рзНржи ржкрзЬрзЗ ржнрж╛ржмрждрзЗ рж╣ржмрзЗ:

1. Constraints ржЫрзЛржЯ тЖТ n <= 10^6, рж╕рзБрждрж░рж╛ржВ brute force ржХрж░рж▓рзЗржУ ржЪрж▓рзЗред


2. ржЖржорж░рж╛ n+1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржПржХ ржПржХ ржХрж░рзЗ ржЪрзЗржХ ржХрж░ржмрзЛ, ржпрждржХрзНрж╖ржг ржирж╛ ржПржХржЯрж╛ balanced number ржкрж╛ржЗред


3. ржпрзЗрж╣рзЗрждрзБ рж╕рж░рзНржмрзЛржЪрзНржЪ balanced рж╕ржВржЦрзНржпрж╛ 1224444 ржкрж░рзНржпржирзНржд ржЧрж┐рзЯрзЗржУ рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛рзЯ (max 7-digit), ржЖржорж░рж╛ ржР ржкрж░рзНржпржирзНржд рж╕рзАржорж╛ рж░рж╛ржЦржмрзЛред


4. ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ ржбрж┐ржЬрж┐ржЯ ржЧрзБрж▓рзЛ ржмрзЗрж░ ржХрж░рзЗ ржЧржгржирж╛ ржХрж░ржмрзЛ тАУ ржпржжрж┐ digit рж╕ржВржЦрзНржпрж╛ржЯрж┐ digit ржмрж╛рж░ ржерж╛ржХрзЗ тЖТ ржарж┐ржХ ржЖржЫрзЗ, ржирж╛ рж╣рж▓рзЗ ржмрж╛ржжред




---

ЁЯФз Function Overview:


---

HasZero(int n):

ржпржжрж┐ ржХрзЛржирзЛ ржбрж┐ржЬрж┐ржЯ 0 ржерж╛ржХрзЗ, false return ржХрж░ржмрзЗред

ржХрж╛рж░ржг 0 ржПрж░ 0 ржмрж╛рж░ ржЖрж╕рж╛ рж▓рж╛ржЧржмрзЗред ржХрж┐ржирзНрждрзБ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛рзЯ ржпржжрж┐ 0 ржерж╛ржХрзЗ, рж╕рзЗ ржХржЦржиржЗ balanced рж╣рждрзЗ ржкрж╛рж░рзЗ ржирж╛ред


Balanced(int n):

ржкрзНрж░ржержорзЗ ржЪрзЗржХ ржХрж░ржмрзЗ, ржпржжрж┐ 0 ржерж╛ржХрзЗ тЖТ false

рждрж╛рж░ржкрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржЬрж┐ржЯ count ржХрж░ржмрзЗ

ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржЬрж┐ржЯ ржпржжрж┐ рждрж╛рж░ count-ржПрж░ рж╕ржорж╛ржи рж╣рзЯ тЖТ true


nextBeautifulNumber(int n):

n+1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржкрзНрж░рждрж┐ рж╕ржВржЦрзНржпрж╛ Balanced() ржжрж┐рзЯрзЗ ржЪрзЗржХ ржХрж░ржмрзЗ

ржпрзЗ ржкрзНрж░ржержо рж╕ржВржЦрзНржпрж╛ balanced рж╣ржмрзЗ, рж╕рзЗржЯрж╛ржЗ return ржХрж░ржмрзЗред



---

ЁЯУШ Full Code Line-by-Line Explanation:


---

class Solution 
{
public:

тЮбя╕П Solution ржХрзНрж▓рж╛рж╕ рждрзИрж░рж┐ ржХрж░рж▓рж╛ржоред


---

bool HasZero(int n)
{
    bool haszero = false;
    while(n > 0)
    {
        int digit = n % 10;
        if(digit == 0)
        {
            haszero = true;
            break;
        }
        n = n / 10;
    }
    return haszero;
}

ЁЯФН ржПржЗ ржлрж╛ржВрж╢ржи ржжрзЗржЦрзЗ:

ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ рж╢рзЗрж╖ ржбрж┐ржЬрж┐ржЯ ржмрзЗрж░ ржХрж░рзЗ

ржпржжрж┐ рж╕рзЗржЯрж╛ 0 рж╣рзЯ тЖТ haszero = true

ржХрж╛рж░ржг 0 ржбрж┐ржЬрж┐ржЯ ржХрзЛржирзЛ balanced number-ржП ржерж╛ржХрждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред

ржпрзЗржоржи: 120 тЖТ unbalanced тЭМ



---

bool Balanced(int n)
{
    if(HasZero(n)) return false;

тЮбя╕П ржпржжрж┐ n-ржП 0 ржерж╛ржХрзЗ тЖТ рж╕рж░рж╛рж╕рж░рж┐ false


---

vector<int> v;
    while(n > 0)
    {
        int rem = n % 10;
        if(rem == 0) return false;
        v.push_back(rem);
        n = n / 10;
    }

тЮбя╕П рж╕ржВржЦрзНржпрж╛ржЯрж┐ржХрзЗ ржнрзЗржЩрзЗ рждрж╛рж░ ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржЬрж┐ржЯ v ржнрзЗржХрзНржЯрж░рзЗ рж░рж╛ржЦржЫрзЗ


---

unordered_map<int, int> freq;
    for(int i = 0; i < v.size(); i++)
    {
        freq[v[i]]++;
    }

тЮбя╕П ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржЬрж┐ржЯ ржХрзЯржмрж╛рж░ ржПрж╕рзЗржЫрзЗ рждрж╛ ржЧржгржирж╛ ржХрж░ржЫрж┐ред


---

for(auto it : freq)
    {
        if(it.first != it.second)
        {
            return false;
        }
    }
    return true;
}

тЮбя╕П ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржЬрж┐ржЯ ржпржжрж┐ рждрж╛рж░ ржорж╛ржи ржЕржирзБрж╕рж╛рж░рзЗ ржЖрж╕рзЗ тЖТ true, ржирж╛ рж╣рж▓рзЗ false


---

int nextBeautifulNumber(int n)
{
    int ans;
    for(int j = n+1; j <= 1224444; j++)
    {
        if(Balanced(j))
        {
            ans = j;
            break;
        }
    }
    return ans;
}

тЮбя╕П ржПржХ ржПржХ ржХрж░рзЗ рж╕ржВржЦрзНржпрж╛ ржЪрзЗржХ ржХрж░рзЗ Balanced() ржжрж┐рзЯрзЗред тЮбя╕П ржпрзЗ ржкрзНрж░ржержо balanced number ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рж╕рзЗржЯрж╛ржЗ ans рж╣рж┐рж╕рзЗржмрзЗ return ржХрж░ржмрзЗред


---

ЁЯзк Test Case by Case Analysis:


---

тЬЕ Test 1:

Input: n = 1
Output: 22

n+1 = 2 тЖТ not balanced

3 тЖТ not balanced

11 тЖТ 1 ржПрж╕рзЗржЫрзЗ ржжрзБржЗржмрж╛рж░ тЭМ

22 тЖТ 2 ржПрж╕рзЗржЫрзЗ ржжрзБржЗржмрж╛рж░ тЬЕ тЖТ return 22



---

тЬЕ Test 2:

Input: n = 1000
Output: 1333

ржПржХрзЗ ржПржХрзЗ ржЯрзНрж░рж╛ржЗ ржХрж░рж▓рзЗ 1333 ржЖрж╕ржмрзЗ тЖТ 1 ржПрж╕рзЗржЫрзЗ ржПржХржмрж╛рж░, 3 ржПрж╕рзЗржЫрзЗ рждрж┐ржиржмрж╛рж░ тЬЕ



---

тЬЕ Test 3:

Input: n = 3000
Output: 3133

3 ржПрж╕рзЗржЫрзЗ рждрж┐ржиржмрж╛рж░, 1 ржПржХржмрж╛рж░ тЬЕ



---

ЁЯзо Mathematical Justification:


---

ржкрзНрж░рждрж┐ рж╕ржВржЦрзНржпрж╛рж░ ржбрж┐ржЬрж┐ржЯ d тЖТ count(d) = d рж╣ржУрзЯрж╛ рж▓рж╛ржЧржмрзЗ

0 ржХржЦржирзЛ ржЖрж╕рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛

ржЙржкрж░рзЗрж░ рж╢рж░рзНржд ржорзЗржЯрж╛ ржПржоржи рж╕ржм ржерзЗржХрзЗ ржЫрзЛржЯ рж╕ржВржЦрзНржпрж╛ ржЦрзБржБржЬржмрзЛ



---
Full Code:
------------

class Solution 
{
public:
    bool HasZero(int n)
    {
        bool haszero=false;
        while(n>0)
            {
                int digit=n%10;
                if(digit==0)
                {
                    haszero=true;
                    break;
                }
                n=n/10;
            }
        return haszero;
    }
    bool Balanced(int n)
    {
        if(HasZero(n)) return false;
        vector<int>v;
        while(n>0)
            {
                int rem=n%10;
                if(rem==0) return false;
                v.push_back(rem);
                n=n/10;
            }
        bool balanced=true;
        unordered_map<int,int>freq;
        for(int i=0;i<v.size();i++)
            {
                freq[v[i]]++;
            }
        for(auto it:freq)
            {
                if(it.first!=it.second)

                {
                    balanced=false;
                    break;
                }
            }

return balanced;   
    }
    int nextBeautifulNumber(int n)
    {
        int ans;
        for(int j=n+1;j<=1224444;j++)
            {
                
                if(Balanced(j))
                {
                    ans=j;
                    break;
                }
            }
        return ans;
    }
};  
