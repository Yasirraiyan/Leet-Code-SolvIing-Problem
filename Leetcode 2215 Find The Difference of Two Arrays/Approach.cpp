‚úÖ 1. ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶®‡¶æ‡¶ì:

‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶Ü‡¶õ‡ßá‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø‡¶§‡ßá repeated values ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ unique value ‡¶®‡¶ø‡ßü‡ßá‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶Æ‡¶® value ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡¶æ:

nums1 ‡¶è ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ nums2 ‡¶§‡ßá ‡¶®‡ßá‡¶á (‚û°Ô∏è answer[0])

nums2 ‡¶è ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ nums1 ‡¶§‡ßá ‡¶®‡ßá‡¶á (‚û°Ô∏è answer[1])




---

‚úÖ 2. Efficient ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ:

‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ membership ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á ‡¶§‡¶¨‡ßá ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ï‡¶Æ ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá unordered_set ‡¶á‡¶â‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶¨‡ßá‡¶∏‡ßç‡¶ü‡•§

‡¶ï‡¶æ‡¶∞‡¶£ unordered_set-‡¶è ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç .find() O(1) ‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§


‚úÖ 4. ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡¶° ‡¶ï‡ßã‡¶°‡¶ü‡¶æ ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) 
{
    vector<vector<int>> ans(2);

‚û°Ô∏è ‡¶Ü‡¶Æ‡¶∞‡¶æ answer ‡¶®‡¶æ‡¶Æ‡ßá 2D ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞ ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡¶ø, ‡¶Ø‡¶æ‡¶§‡ßá ans[0] ‡¶è‡¶¨‡¶Ç ans[1] ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§

unordered_set<int> set1(nums1.begin(), nums1.end());
    unordered_set<int> set2(nums2.begin(), nums2.end());

‚û°Ô∏è nums1 ‡¶è‡¶¨‡¶Ç nums2 ‡¶è‡¶∞ distinct (‡¶è‡¶ï‡¶ï) ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ set ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§
‚û°Ô∏è ‡¶è‡¶§‡ßá ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßã ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶Ö‡¶®‡ßç‡¶Ø array-‡¶§‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ‡•§


---

for(int num : set1) {
        if(set2.find(num) == set2.end()) {
            ans[0].push_back(num);
        }
    }

‚û°Ô∏è set1 ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡¶ø‡•§
‚û°Ô∏è ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ set2 ‡¶§‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‚û°Ô∏è ‡¶Æ‡¶æ‡¶®‡ßá nums2 ‡¶§‡ßá ‡¶®‡ßá‡¶á ‚û°Ô∏è ‡¶§‡¶æ‡¶π‡¶≤‡ßá answer[0] ‡¶§‡ßá ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø‡•§


---

for(int num : set2) {
        if(set1.find(num) == set1.end()) {
            ans[1].push_back(num);
        }
    }

‚û°Ô∏è ‡¶è‡¶¨‡¶æ‡¶∞ set2 ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§
‚û°Ô∏è ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ set1 ‡¶§‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‚û°Ô∏è ‡¶Æ‡¶æ‡¶®‡ßá nums1 ‡¶è ‡¶®‡ßá‡¶á ‚û°Ô∏è ‡¶§‡¶æ‡¶π‡¶≤‡ßá answer[1] ‡¶§‡ßá ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø‡•§


---

return ans;
}

‚û°Ô∏è ‡¶Ö‡¶¨‡¶∂‡ßá‡¶∑‡ßá 2D ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞ answer ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§


---

‚úÖ Final Optimized Code:

class Solution {
public:
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> set1(nums1.begin(), nums1.end());
        unordered_set<int> set2(nums2.begin(), nums2.end());

        vector<vector<int>> ans(2);

        for (int num : set1) {
            if (set2.find(num) == set2.end()) {
                ans[0].push_back(num);
            }
        }

        for (int num : set2) {
            if (set1.find(num) == set1.end()) {
                ans[1].push_back(num);
            }
        }

        return ans;
    }
};


---

üß™ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á:

Example 1:

nums1 = [1,2,3], nums2 = [2,4,6]
set1 = {1,2,3}, set2 = {2,4,6}
ans[0]: 1,3 (nums1 ‡¶§‡ßá ‡¶Ü‡¶õ‡ßá, nums2 ‡¶§‡ßá ‡¶®‡¶æ‡¶á)
ans[1]: 4,6 (nums2 ‡¶§‡ßá ‡¶Ü‡¶õ‡ßá, nums1 ‡¶§‡ßá ‡¶®‡¶æ‡¶á)
‚úÖ Output: [[1,3],[4,6]]

Example 2:

nums1 = [1,2,3,3], nums2 = [1,1,2,2]
set1 = {1,2,3}, set2 = {1,2}
ans[0]: 3 (nums1 ‡¶§‡ßá ‡¶Ü‡¶õ‡ßá, nums2 ‡¶§‡ßá ‡¶®‡¶æ‡¶á)
ans[1]: [] (‡¶∏‡¶¨ nums2 ‡¶è‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ nums1 ‡¶è ‡¶Ü‡¶õ‡ßá)
‚úÖ Output: [[3],[]]


---

  Full Code:
--------------


class Solution
{
public:
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) 
    {
        vector<vector<int>>ans(2);
        unordered_set<int>set1(nums1.begin(),nums1.end());
        unordered_set<int>set2(nums2.begin(),nums2.end());
        for(int i=0;i<nums1.size();i++)
            {
                set1.insert(nums1[i]);
            }
        for(int j=0;j<nums2.size();j++)
            {
                set2.insert(nums2[j]);
            }
        for(int k=0;k<nums1.size();k++)
            {
                if(set2.find(nums1[k])==set2.end())
                {
                if (find(ans[0].begin(), ans[0].end(), nums1[k]) == ans[0].end())
                {
                    ans[0].push_back(nums1[k]);
                }
                }
    
            }
        for(int j=0;j<nums2.size();j++)
            {
                if(set1.find(nums2[j])==set1.end())
                {
                    if (find(ans[1].begin(), ans[1].end(), nums2[j]) == ans[1].end()) {
                    ans[1].push_back(nums2[j]);
                    }
            }

            }
        
        return ans;
        
    }
};
