üîç Problem Statement (‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá)
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø sorted ‡¶è‡¶¨‡¶Ç distinct (‡¶Ö‡¶®‡ßç‡¶Ø‡¶∞‡¶ï‡¶Æ) ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ array ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø target ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá‡•§
‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶ö‡ßç‡¶õ‡ßá -

‡¶Ø‡¶¶‡¶ø target array-‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡¶æ‡¶∞ index return ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá ‡¶ï‡ßã‡¶•‡¶æ‡ßü insert ‡¶ï‡¶∞‡¶≤‡ßá order ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶∏‡ßá‡¶á index return ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

üéØ Example:
cpp
Copy
Edit
Input: nums = [1, 3, 5, 6], target = 5
Output: 2  // ‡¶ï‡¶æ‡¶∞‡¶£ 5 ‡¶Ü‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç index 2-‡¶§‡ßá

Input: nums = [1, 3, 5, 6], target = 2
Output: 1  // ‡¶ï‡¶æ‡¶∞‡¶£ 2 ‡¶Ø‡¶¶‡¶ø insert ‡¶ï‡¶∞‡¶ø, ‡¶§‡¶æ‡¶π‡¶≤‡ßá 1 ‡¶è‡¶∞ ‡¶™‡¶∞‡ßá 3 ‡¶è‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶π‡¶¨‡ßá ‚Üí index 1

Input: nums = [1, 3, 5, 6], target = 7
Output: 4  // ‡¶ï‡¶æ‡¶∞‡¶£ 7 ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‚Üí index 4
üí° Observation (‡¶¨‡ßã‡¶ù‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ):
‡¶è‡¶ñ‡¶æ‡¶®‡ßá array sorted ‚Üí ‡¶Ü‡¶Æ‡¶∞‡¶æ Binary Search ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡¶æ‡¶§‡ßá runtime ‡¶π‡ßü O(log n)‡•§

‚úÖ Binary Search ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶¨?
‡¶Ü‡¶Æ‡¶∞‡¶æ Binary Search ‡¶¶‡¶ø‡ßü‡ßá:

‡¶Ø‡¶¶‡¶ø target ‡¶™‡¶æ‡¶á, ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø mid return ‡¶ï‡¶∞‡¶¨‡•§

‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶á, ‡¶§‡¶æ‡¶π‡¶≤‡ßá search ‡¶è‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá low pointer ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶æ‡¶Å‡ßú‡¶æ‡¶¨‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶π‡¶¨‡ßá insert ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï position‡•§

üéØ ‡¶ï‡¶æ‡¶∞‡¶£?
Binary Search ‡¶Ø‡¶ñ‡¶® ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü, ‡¶§‡¶ñ‡¶® low > high ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü‡•§ ‡¶§‡¶ñ‡¶® low ‡¶π‡¶≤‡ßã ‡¶∏‡ßá‡¶á index ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá target ‡¶¨‡ßú ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‚Äî ‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá‡¶á insert ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‚úÖ Code Explanation (Line by Line):
cpp
Copy
Edit
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int low = 0;                        // ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá array-‡¶è‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ
        int high = nums.size() - 1;        // array-‡¶è‡¶∞ ‡¶∂‡ßá‡¶∑ index

        while (low <= high) {
            int mid = low + (high - low) / 2; // Overflow ‡¶è‡ßú‡¶æ‡¶§‡ßá safe mid

            if (nums[mid] == target) {
                return mid;               // Target ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
            }

            if (nums[mid] < target) {
                low = mid + 1;            // ‡¶°‡¶æ‡¶®‡¶¶‡¶ø‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶¨‡ßã
            } else {
                high = mid - 1;           // ‡¶¨‡¶æ‡¶Æ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶¨‡ßã
            }
        }

        return low;  // Not found ‚Üí insert ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï position
    }
};
‚úÖ Code Dry Run/Test Case:
cpp
Copy
Edit
nums = [1,3,5,6], target = 2

Initial: low = 0, high = 3
Step 1: mid = 1 ‚Üí nums[1]=3 > 2 ‚Üí high = mid-1 = 0
Step 2: low = 0, high = 0 ‚Üí mid = 0 ‚Üí nums[0]=1 < 2 ‚Üí low = mid+1 = 1
Now: low=1, high=0 ‚Üí loop ends ‚Üí return low = 1 ‚úÖ
üîÅ ‡¶Ö‡¶®‡ßç‡¶Ø Test Case:
cpp
Copy
Edit
nums = [1,3,5,6], target = 7

Step 1: mid=1 ‚Üí nums[1]=3 < 7 ‚Üí low=2
Step 2: mid=2 ‚Üí nums[2]=5 < 7 ‚Üí low=3
Step 3: mid=3 ‚Üí nums[3]=6 < 7 ‚Üí low=4
low=4 > high=3 ‚Üí return 4 ‚úÖ
ü§î ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶ú‡ßá ‡¶®‡¶ø‡¶ú‡ßá ‡¶≠‡¶æ‡¶¨‡¶¨‡ßã?
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶≤‡ßá sorted array ‚Üí ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßã Binary Search‡•§

‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶≤‡ßá target ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡ßã‡¶•‡¶æ‡ßü insert ‡¶ï‡¶∞‡¶¨ ‚Üí ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßã index-‡¶ü‡¶æ ‡¶ï‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá?

Binary Search ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá low pointer ‡¶ï‡ßã‡¶® position ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü ‡¶§‡¶æ ‡¶ñ‡ßá‡ßü‡¶æ‡¶≤ ‡¶ï‡¶∞‡ßã‡•§

Binary Search loop ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá low ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ insertion index‡•§

üìå Complexity:
Time: O(log n)

Space: O(1)

‚úÖ Summary in Bangla:
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá "sorted" ‚Üí Binary Search

‡¶Æ‡¶ø‡¶≤‡¶≤‡ßá mid return

‡¶®‡¶æ ‡¶Æ‡¶ø‡¶≤‡¶≤‡ßá ‡¶∂‡ßá‡¶∑‡ßá low ‡¶π‡¶¨‡ßá insert position

‡¶è‡¶á ‡¶≤‡¶ú‡¶ø‡¶ï 100% accepted ‡¶π‡¶¨‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ efficient ‡¶ì optimized‡•§

Full Code:
-----------

  class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
          int mid=low+(high-low)/2;
          if(nums[mid]==target)
          {
            return mid;
          }
          if(nums[mid]<target)
          {
            low=mid+1;
          }
          else
          {
            high=mid-1;
          }
        }
        return low;
           }
};
