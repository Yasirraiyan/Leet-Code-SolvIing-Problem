ЁЯФН рж╕ржорж╕рзНржпрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Understanding the Problem)

рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ Binary Tree ржПрж░ root ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ ржПржмржВ ржПржХржЯрж╛ targetSumред

ЁЯСЙ рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣ржЪрзНржЫрзЗ:
Check ржХрж░рзЛ, ржПржоржи ржХрзЛржирзЛ path ржЖржЫрзЗ ржХрж┐ ржирж╛ ржпрзЗржЦрж╛ржирзЗ:

path рж╢рзБрж░рзБ рж╣ржмрзЗ root node ржерзЗржХрзЗ

path рж╢рзЗрж╖ рж╣ржмрзЗ leaf node ржП (leaf = ржпрж╛рж░ ржХрзЛржи child ржирзЗржЗ)

ржПржмржВ рж╕рзЗржЗ path ржПрж░ node value ржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓ рж╣ржмрзЗ targetSum



---

тЬЕ ржЙржжрж╛рж╣рж░ржгрзЗ рж╕ржорж╕рзНржпрж╛ ржмрзЛржЭрж╛

тЬЕ Example 1:

5
       / \
      4   8
     /   / \
   11  13  4
   / \
  7   2

targetSum = 22

тЬЕ path: 5 тЖТ 4 тЖТ 11 тЖТ 2 тЖТ sum = 22 тЖТ return true


---

ЁЯза рж╕ржорж╛ржзрж╛ржирзЗрж░ ржЪрж┐ржирзНрждрж╛ржнрж╛ржмржирж╛ (How to Think)

Step 1: ржХрзЛржи path ржЧрзБрж▓рзЛ рж╕ржорзНржнржм?

ржЖржорж░рж╛ ржПржоржи рж╕ржм path ржЦрзБржБржЬржмрзЛ ржпрзЗржЧрзБрж▓рзЛ root ржерзЗржХрзЗ leaf ржкрж░рзНржпржирзНржд ржпрж╛рзЯред

Step 2: рж╕ржм root-to-leaf path ржПрж░ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░ржмрзЛред

Step 3: ржкрж░рзЗ ржЪрзЗржХ ржХрж░ржмрзЛ, ржХрзЛржиржЯрж┐ targetSum ржПрж░ рж╕ржорж╛ржи ржХрж┐ ржирж╛ред

ржПржЯрж╛ ржХрж░рж╛рж░ ржЬржирзНржп BFS (Level Order Traversal) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЛред


---

ЁЯФз рждрзЛржорж╛рж░ ржХрзЛржб ржХрзА ржХрж░ржЫрзЗ (Line-by-Line Explanation in Bangla)

vector<int>BFS(TreeNode* root)

ЁЯФ╣ ржПржЗ ржлрж╛ржВрж╢ржи рж╕ржм root-to-leaf path ржПрж░ sum ржЧрзБрж▓рзЛ return ржХрж░рзЗред
ЁЯФ╣ BFS ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ queue ржжрж┐рзЯрзЗ tree traversal ржХрж░ржЫрзЛред

queue<pair<TreeNode*,int>>q;
q.push({root,root->val});

ЁЯФ╕ ржЖржорж░рж╛ queue рждрзЗ pair<TreeNode*, currSum> рж░рж╛ржЦржЫрж┐ред
ЁЯФ╕ currSum рж╣ржЪрзНржЫрзЗ ржПржЦржи ржкрж░рзНржпржирзНржд path ржПрж░ ржпрзЛржЧржлрж▓ред


---

BFS ржПрж░ ржнрж┐рждрж░рзЗрж░ ржЕржВрж╢:

while(!q.empty())
{
    TreeNode* front=q.front().first;
    int currsum=q.front().second;
    q.pop();

    if(!front->left && !front->right)
    {
        v.push_back(currsum); // leaf ржП ржкрзМржБржЫрзЗржЫрж┐, ржпрзЛржЧржлрж▓ рж░рж╛ржЦрзЛ
    }

    if(front->left)
    {
        q.push({front->left, front->left->val + currsum});
    }
    if(front->right)
    {
        q.push({front->right, front->right->val + currsum});
    }
}

ЁЯФ╣ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржЯрж┐ ржирзЛржбрзЗ ржЧрж┐рзЯрзЗ ржЪрзЗржХ ржХрж░ржЫрж┐:

ржпржжрж┐ leaf рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржпрзЛржЧржлрж▓ v рждрзЗ рж░рж╛ржЦржЫрж┐ред

ржпржжрж┐ leaf ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рждрж╛рж░ child ржЧрзБрж▓рзЛржХрзЗ queue рждрзЗ ржпрзЛржЧ ржХрж░ржЫрж┐, рж╕рж╛ржерзЗ ржирждрзБржи ржпрзЛржЧржлрж▓ржУред



---

ЁЯФН hasPathSum Function:

vector<int> vv = BFS(root); // рж╕ржм root-to-leaf ржпрзЛржЧржлрж▓ ржкрзЗрж▓рж╛ржо

ЁЯФ╕ ржПрж░ржкрж░ vv рждрзЗ рж╕ржм sum ржЖржЫрзЗ, ржПржЦржи ржЖржорж░рж╛ ржЪрзЗржХ ржХрж░ржмрзЛ targetSum ржЖржЫрзЗ ржХрж┐ ржирж╛ред

sort(vv.begin(), vv.end());

ЁЯФ╕ Binary search ржПрж░ ржЬржирзНржп sort ржХрж░рзЗржЫрж┐ред

int left=0, right=vv.size()-1;
while(left<=right)
{
    int mid=left+(right-left)/2;
    if(vv[mid]==targetSum)
        return true;
    else if(vv[mid]<targetSum)
        left=mid+1;
    else
        right=mid-1;
}
return false;

ЁЯФ╣ Binary Search ржжрж┐рзЯрзЗ targetSum ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗред
ЁЯФ╣ Efficient ржХрж╛рж░ржг ржПржЯрж┐ O(log n) ржЯрж╛ржЗржорзЗ ржЦрзБржБржЬрзЗ ржкрж╛рзЯред


---

тЬЕ ржХрзЛржи ржЯрзЗржХржирж┐ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ?

Technique	ржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯрзЗржЫрзЗ

BFS (Level Order Traversal)	рж╕ржм path cover ржХрж░рж╛рж░ ржЬржирзНржп
Pair in Queue	ржкрзНрж░рждрж┐ржЯрж┐ ржирзЛржбрзЗрж░ рж╕рж╛ржерзЗ рж╕рзЗржЗ path ржПрж░ sum ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ
Binary Search	faster search ржХрж░рж╛рж░ ржЬржирзНржп sorted array рждрзЗ



---

ЁЯзк Test Case ржжрж┐рзЯрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:

тЬЕ Test Case 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22

Paths:

5тЖТ4тЖТ11тЖТ7 тЖТ sum = 27

5тЖТ4тЖТ11тЖТ2 тЖТ тЬЕ sum = 22

5тЖТ8тЖТ13 тЖТ sum = 26

5тЖТ8тЖТ4тЖТ1 тЖТ sum = 18


vv = [18, 22, 26, 27] тЖТ Binary search тЖТ found 22 тЖТ return true


---

тЭМ Test Case 2:

Input: root = [1,2,3], targetSum = 5
Paths:
- 1тЖТ2 = 3
- 1тЖТ3 = 4
тЖТ 5 ржирзЗржЗ тЖТ return false


---

тЭМ Test Case 3:

Input: root = [], targetSum = 0
тЖТ Tree ржЦрж╛рж▓рж┐ тЖТ ржХрзЛржи path ржирзЗржЗ тЖТ return false


---

ЁЯУК Time & Space Complexity:

Time:

BFS traversal = O(n)

Binary Search = O(log n)

Sort = O(n log n)


тЮбя╕П Total: O(n log n)

Space:

Queue & vector: O(n)



---

тЬЕ ржХрзЗржи Efficient?

рж╕ржм path explore ржХрж░рждрзЗ BFS рж╕ржарж┐ржХ

ржпрзЛржЧржлрж▓ ржЖржЧрзЗржЗ calculate ржХрж░рж▓рзЗ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржПрзЬрж╛ржирзЛ ржпрж╛рзЯ

Binary search ржжрж┐рзЯрзЗ ржжрзНрж░рзБржд ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ



---

тЬЕ ржЙржкрж╕ржВрж╣рж╛рж░ (Summary in Bangla):

ЁЯФ╕ рждрзБржорж┐ ржкрзНрж░ржержорзЗ BFS ржжрж┐рзЯрзЗ tree ржПрж░ рж╕ржм root-to-leaf path ржЧрзБрж▓рзЛ ржЦрзБржБржЬрзЗ ржкрзЗрзЯрзЗржЫрзЛ
ЁЯФ╕ ржкрзНрж░рждрж┐ржЯрж┐ path ржПрж░ sum рж╣рж┐рж╕рж╛ржм ржХрж░рзЗ vector рждрзЗ рж░рзЗржЦрзЗржЫрзЛ
ЁЯФ╕ ржПрж░ржкрж░ binary search ржжрж┐рзЯрзЗ ржЪрзЗржХ ржХрж░рзЗржЫрзЛ ржХрзЛржи sum == targetSum ржХрж┐ ржирж╛

тЮбя╕П ржПржЗ рж╕ржорж╛ржзрж╛ржиржЯрж┐ efficient ржХрж╛рж░ржг BFS ржПрж░ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ sum ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзЗ ржПржмржВ search ржП O(log n) ржЯрж╛ржЗржо ржирзЗрзЯред


---

Full Code:
--------------


  class Solution 
{
public:
    
    vector<int>BFS(TreeNode* root)
    {
        vector<int>v;
        if(root==nullptr) return v;
        queue<pair<TreeNode*,int>>q;
        q.push({root,root->val});
        //vector<int>v;
        while(!q.empty())
            {
                TreeNode* front=q.front().first;
                int currsum=q.front().second;
                q.pop();
                if(!front->left&&!front->right)
                {
                v.push_back(currsum);
                }
                
                //q.pop();
                if(front->left)
                {
                    q.push({front->left,front->left->val+currsum});
                        }
                        if(front->right)
                        {
                            q.push({front->right,front->right->val+currsum});
                        }
                }
            
            
        return v;
    }
    bool hasPathSum(TreeNode* root, int targetSum) 
    {
        bool has=false;
        vector<int>vv=BFS(root);
        sort(vv.begin(),vv.end());
        int left=0;
        int right=vv.size()-1;
        while(left<=right)
            {
                int mid=left+(right-left)/2;
                if(vv[mid]==targetSum)
                {
                    has=true;
                    break;
                }
                else if(vv[mid]<targetSum)
                {
                    left=mid+1;
                }
                else
                {
                    right=mid-1;
                }
            }
        return has;
    }
};
