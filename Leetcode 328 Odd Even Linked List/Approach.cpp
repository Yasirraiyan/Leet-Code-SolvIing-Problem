ЁЯза ржкрзНрж░рж╢рзНржи ржмрзЛржЭрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ (How to Understand the Problem):
ржкрзНрж░рж╢рзНржи ржмрж▓ржЫрзЗ:

ржПржХржЯрж┐ Linked List ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред рж╕ржм odd index (1st, 3rd, 5thтАж) ржПрж░ ржирзЛржбржЧрзБрж▓рзЛ ржПржХрж╕рж╛ржерзЗ рж░рж╛ржЦрзЛ, рждрж╛рж░ржкрж░ even index (2nd, 4th, 6thтАж) ржПрж░ ржирзЛржбржЧрзБрж▓рзЛ рж░рж╛ржЦрзЛред

ЁЯУМ ржоржирзЗ рж░рзЗржЦрзЛ, index ржорж╛ржирзЗ position, ржорж╛ржирзЗ 1-based position.

ЁЯОп ржЙржжрж╛рж╣рж░ржг:

yaml
Copy
Edit
Input:  [1, 2, 3, 4, 5]
Odd positions: 1, 3, 5 тЖТ [1, 3, 5]
Even positions: 2, 4   тЖТ [2, 4]
Output: [1, 3, 5, 2, 4]
ЁЯФО рждрзБржорж┐ ржХрзАржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗржЫрзЛ? (Your approach):
рждрзБржорж┐ ржнрзЗржмрзЗржЫрзЛ:

ржжрзБржЗржЯрж╛ ржЖрж▓рж╛ржжрж╛ vector рж░рж╛ржЦржм тАФ ржПржХржЯрж╛ odd position ржПрж░ ржЬржирзНржп (v2), ржПржХржЯрж╛ even position ржПрж░ ржЬржирзНржп (v1)

рждрж╛рж░ржкрж░ ржПржЧрзБрж▓рж╛ржХрзЗ ржЖржмрж╛рж░ ржПржХрждрзНрж░ ржХрж░рзЗ ржирждрзБржи рж▓рж┐рж╕рзНржЯ ржмрж╛ржирж┐рзЯрзЗ ржлрж┐рж░рж┐рзЯрзЗ ржжрж┐ржмред

ржПржЯрж╛ рж▓ржЬрж┐ржХрж╛рж▓рж┐ рж╕ржарж┐ржХ, рждрж╛ржЗ рждрзЛржорж╛рж░ solution Accepted рж╣рзЯрзЗржЫрзЗред

тЬЕ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ (Line-by-Line in Bangla):
cpp
Copy
Edit
vector<ListNode*> v1; // even position nodes
vector<ListNode*> v2; // odd position nodes
int index = 1;
ЁЯФ╣ v1 рждрзЗ even indexed node ржЧрзБрж▓рзЛ рж░рж╛ржЦржЫрзЛред
ЁЯФ╣ v2 рждрзЗ odd indexed node ржЧрзБрж▓рзЛ рж░рж╛ржЦржЫрзЛред

cpp
Copy
Edit
while (head != nullptr) {
    if (index % 2 == 0) v1.push_back(head);
    if (index % 2 != 0) v2.push_back(head);
    head = head->next;
    index++;
}
ЁЯФ╣ ржкрзНрж░рждрж┐ржЯрж┐ ржирзЛржбрзЗрж░ ржЬржирзНржп, index ржжрзЗржЦрзЗ рждрзБржорж┐ ржарж┐ржХ ржХрж░ржЫрзЛ рж╕рзЗржЯрж╛ even ржирж╛ржХрж┐ oddред
ЁЯФ╣ рждрж╛рж░ржкрж░ head ржХрзЗ ржкрж░рзЗрж░ ржжрж┐ржХрзЗ ржПржЧрж┐рзЯрзЗ ржирж┐ржЪрзНржЫрзЛред

cpp
Copy
Edit
vector<ListNode*> vf;
for (int j = 0; j < v2.size(); j++) vf.push_back(v2[j]); // odd nodes first
for (int k = 0; k < v1.size(); k++) vf.push_back(v1[k]); // then even nodes
ЁЯФ╣ рж╕ржм odd ржирзЛржб ржЖржЧрзЗ рж░рж╛ржЦржЫрзЛ vf рждрзЗ, рждрж╛рж░ржкрж░ even ржирзЛржбред

cpp
Copy
Edit
if (vf.empty()) return nullptr;
ListNode* headd = vf[0]; // ржирждрзБржи рж╣рзЗржб
ListNode* curr = headd;
for (int i = 1; i < vf.size(); i++) {
    curr->next = vf[i];
    curr = curr->next;
}
curr->next = nullptr;
return headd;
ЁЯФ╣ ржПржЗ ржЕржВрж╢рзЗ рждрзБржорж┐ ржирждрзБржи рж▓рж┐рж╕рзНржЯ рждрзИрж░рж┐ ржХрж░ржЫрзЛ тАФ ржкрзНрж░рждрж┐ржЯрж┐ ржирзЛржбржХрзЗ ржкрж░ржкрж░ next ржХрж░рзЗ ржжрж┐рзЯрзЗржЫрзЛред
ЁЯФ╣ рж╕ржмрж╢рзЗрж╖рзЗ curr->next = nullptr; ржжрж┐рзЯрзЗржЫрзЛ ржпрж╛рждрзЗ рж▓рж┐рж╕рзНржЯрзЗрж░ рж╢рзЗрж╖рзЗ ржХрж┐ржЫрзБ random pointer ржирж╛ ржерж╛ржХрзЗред

Test Code by testcase:
---------------------

тЬЕ Test Case 1:
ЁЯФ╣ Input: head = [1, 2, 3, 4, 5]
ЁЯФз Step-by-Step Execution:
Initial Linked List:
makefile
Copy
Edit
Index:     1   2   3   4   5
Nodes:    [1,  2,  3,  4,  5]
ЁЯФБ While Loop:
Iteration 1:
index = 1 тЖТ odd тЖТ v2 = [1]

Iteration 2:
index = 2 тЖТ even тЖТ v1 = [2]

Iteration 3:
index = 3 тЖТ odd тЖТ v2 = [1, 3]

Iteration 4:
index = 4 тЖТ even тЖТ v1 = [2, 4]

Iteration 5:
index = 5 тЖТ odd тЖТ v2 = [1, 3, 5]

ЁЯФЧ Join vectors:
vf = [1, 3, 5, 2, 4]

ЁЯФД Link Construction:
cpp
Copy
Edit
ListNode* headd = vf[0]; // 1
curr = headd;

curr->next = 3 тЖТ curr
curr->next = 5 тЖТ curr
curr->next = 2 тЖТ curr
curr->next = 4 тЖТ curr
curr->next = nullptr
тЬЕ Final Linked List:
Copy
Edit
1 тЖТ 3 тЖТ 5 тЖТ 2 тЖТ 4
тЬЕ Output:
cpp
Copy
Edit
[1, 3, 5, 2, 4]
тЬЕ Test Case 2:
ЁЯФ╣ Input: head = [2, 1, 3, 5, 6, 4, 7]
Index-wise:
makefile
Copy
Edit
Index:     1   2   3   4   5   6   7
Nodes:    [2,  1,  3,  5,  6,  4,  7]
ЁЯФБ While Loop:
index	node	group	vector
1	2	odd	v2 = [2]
2	1	even	v1 = [1]
3	3	odd	v2 = [2, 3]
4	5	even	v1 = [1, 5]
5	6	odd	v2 = [2, 3, 6]
6	4	even	v1 = [1, 5, 4]
7	7	odd	v2 = [2, 3, 6, 7]

ЁЯФЧ Final Merge:
vf = [2, 3, 6, 7, 1, 5, 4]

ЁЯФД Link Build:
cpp
Copy
Edit
vf = [2, 3, 6, 7, 1, 5, 4]
ListNode* headd = vf[0]; // 2

тЖТ 3 тЖТ 6 тЖТ 7 тЖТ 1 тЖТ 5 тЖТ 4 тЖТ nullptr
тЬЕ Final Output:
cpp
Copy
Edit
[2, 3, 6, 7, 1, 5, 4]
тЬЕ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж░рж┐ржнрж┐ржЙ:
Test Case Input	Output	Matches Expected?	тЬЕ
[1, 2, 3, 4, 5]	[1, 3, 5, 2, 4]	тЬЕ	тЬЕ
[2, 1, 3, 5, 6, 4, 7]	[2, 3, 6, 7, 1, 5, 4]	тЬЕ	тЬЕ

ЁЯУМ рж╢рзЗрж╖ ржХржерж╛:
рждрзЛржорж╛рж░ ржПржЗ ржХрзЛржб test case ржЕржирзБржпрж╛рзЯрзА ржарж┐ржХржарж╛ржХ ржХрж╛ржЬ ржХрж░ржЫрзЗред
ржпржжрж┐ржУ ржПржЯрж┐ vector-based (O(n) space), рждржмрзБржУ structure ржарж┐ржХ рж░рж╛ржЦрж╛рж░ ржХрж╛рж░ржгрзЗ Accepted рж╣рзЯред

Full Code:
------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
      //  vector<ListNode*>reserve;
       vector<ListNode*>v1;
        vector<ListNode*>v2;
        int index=1;
        while(head!=nullptr)
        {
          if(/*head->val*/index%2==0)
          {
           v1.push_back(head);
          }
            if(/*head->val*/index%2!=0)
          {
           v2.push_back(head);
          }
          head=head->next;
          index++;
        }
       
        vector<ListNode*>vf;
        for(int j=0;j<v2.size();j++)
        {
          vf.push_back(v2[j]);
        }
        for(int k=0;k<v1.size();k++)
        {
          vf.push_back(v1[k]);
        }
        if (vf.empty()) return nullptr; 
        ListNode* headd=(vf[0]);
        ListNode* curr=headd;
        for(int i=1;i<vf.size();i++)
        {
          curr->next=vf[i];
          curr=curr->next;
        }
        curr->next=nullptr;
  return headd;
    }
};
