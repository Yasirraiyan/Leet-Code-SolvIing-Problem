ЁЯФН Problem ржПрж░ Understanding:

ржПржХржЯрж╛ ржорж╛ржЙржирзНржЯрзЗржи ржЕрзНржпрж╛рж░рзЗ ржПржЗ рж░ржХржо:

ржкрзНрж░ржержорзЗ ржХрж┐ржЫрзБ рж╕ржВржЦрзНржпржХ ржПрж▓рж┐ржорзЗржирзНржЯ ржХрзНрж░ржорж╛ржЧржд ржмрж╛рзЬрзЗ (increasing),

рждрж╛рж░ржкрж░ ржПржХржЯрж┐ ржкрж┐ржХ ржЖрж╕рзЗ (ржпрзЗржЦрж╛ржирзЗ ржЖржЧрзЗрж░ ржПржмржВ ржкрж░рзЗрж░ ржЙржнрзЯрзЗрж░ ржЪрзЗрзЯрзЗ ржмрзЬ),

рждрж╛рж░ржкрж░ ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржХржорзЗ (decreasing)ред


ржпрзЗржоржи:
[0, 1, 0] тЖТ ржкрж┐ржХ = 1 (index 1)
[0, 2, 1, 0] тЖТ ржкрж┐ржХ = 2 (index 1)
[0, 10, 5, 2] тЖТ ржкрж┐ржХ = 10 (index 1)


---

ЁЯФО рж▓ржХрзНрж╖рзНржп:

рждрзБржорж┐ ржПржоржи ржПржХржЯрж╛ index ржЦрзБржБржЬржмрзЗ ржпрзЗржЦрж╛ржирзЗ arr[i] > arr[i-1] ржПржмржВ arr[i] > arr[i+1] тАФ ржЕрж░рзНржерж╛рзО ржкрж┐ржХ ржПрж▓рж┐ржорзЗржирзНржЯред


---

тЬЕ Time Complexity:

рждрзЛржорж╛рж░ рж╕ржорж╛ржзрж╛ржиржЯрж┐ Binary Search ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ, рждрж╛ржЗ рж╕ржорзЯ ржХржорзЗ ржжрж╛ржБрзЬрж╛рзЯ O(log n)ред


---

ЁЯза Approach - ржХрзЗржи Binary Search ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ?

ржпрзЗрж╣рзЗрждрзБ ржорж╛ржЙржирзНржЯрзЗржи ржЕрзНржпрж╛рж░рзЗ ржкрзНрж░ржержорзЗ ржмрж╛рзЬрзЗ, ржкрж░рзЗ ржХржорзЗ, рждрж╛ржЗ ржЖржорж░рж╛ ржПржЯрж╛ ржПржХржЯрж╛ ржнрж╛ржЩрж╛ ржкрж╛рж╣рж╛рзЬрзЗрж░ ржоржд ржнрж╛ржмрждрзЗ ржкрж╛рж░рж┐ред

ржЖржорж░рж╛ ржпржжрж┐ ржХрзЛржи mid ржЗржирзНржбрзЗржХрзНрж╕ ржирж┐ржЗ, рждрж╛рж╣рж▓рзЗ рждрж┐ржиржЯрж┐ ржЕржмрж╕рзНржерж╛ рж╣рждрзЗ ржкрж╛рж░рзЗ:

1я╕ПтГг ржпржжрж┐ arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] тЖТ ржЖржорж░рж╛ ржкрж┐ржХ ржкрзЗрзЯрзЗ ржЧрзЗржЫрж┐ред

2я╕ПтГг ржпржжрж┐ arr[mid] < arr[mid+1] тЖТ ржПрж░ ржорж╛ржирзЗ ржЖржорж░рж╛ ржмрж╛рзЬрж╛рж░ ржкржерзЗ ржЖржЫрж┐, рждрж╛ржЗ ржкрж┐ржХ ржбрж╛ржи ржкрж╛рж╢рзЗ рж╣ржмрзЗ тЖТ low = mid + 1

3я╕ПтГг ржЕржирзНржпржерж╛рзЯ тЖТ ржПрж░ ржорж╛ржирзЗ ржЖржорж░рж╛ ржХржорж╛рж░ ржкржерзЗ ржЖржЫрж┐ тЖТ ржкрж┐ржХ ржмрж╛ржо ржкрж╛рж╢рзЗ тЖТ high = mid - 1


---

ЁЯФв Code Line by Line Explanation in Bangla:

int low = 1;
int high = arr.size() - 2;

ржкрзНрж░ржержо ржУ рж╢рзЗрж╖ ржЗржирзНржбрзЗржХрзНрж╕ ржХржЦржирзЛржЗ ржкрж┐ржХ рж╣рждрзЗ ржкрж╛рж░рзЗ ржирж╛ ржХрж╛рж░ржг ржорж╛ржЙржирзНржЯрзЗржи ржЕрзНржпрж╛рж░рзЗ 3 ржмрж╛ рждрж╛рж░ ржмрзЗрж╢рж┐ рж▓ржорзНржмрж╛ рж╣рзЯ ржПржмржВ ржорж╛ржЭржЦрж╛ржирзЗ ржкрж┐ржХ ржерж╛ржХрзЗред

рждрж╛ржЗ ржЖржорж░рж╛ binary search рж╢рзБрж░рзБ ржХрж░ржЫрж┐ 1 ржерзЗржХрзЗ n-2 ржкрж░рзНржпржирзНрждред


int ans = -1;

ржпржжрж┐ ржкрж┐ржХ ржкрж╛ржЗ, ржПржЗ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗ рж╕рзЗржЯ ржХрж░ржмрзЛред


while(low <= high) {
    int mid = low + (high - low) / 2;

Binary Search ржПрж░ рж╕рзНржЯрзНржпрж╛ржирзНржбрж╛рж░рзНржб ржлрж░рзНржорзБрж▓рж╛ тАФ Overflow ржПрзЬрж╛рждрзЗред


if ((arr[mid] > arr[mid-1]) && (arr[mid] > arr[mid+1])) {
        ans = mid;
        break;
    }

ржпржжрж┐ mid рждрж╛рж░ ржжрзБржЗ ржкрж╛рж╢рзЗ ржерзЗржХрзЗржУ ржмрзЬ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржПржЯрж╛ржЗ ржкрж┐ржХред ржмрзНрж░рзЗржХ ржХрж░рж▓рж╛ржоред


if (arr[mid] < arr[mid+1]) {
        low = mid + 1;
    }

arr[mid] < arr[mid+1] тЖТ ржорж╛ржирзЗ ржЖржорж░рж╛ ржПржЦржиржУ ржмрж╛рзЬрж╛рж░ ржкржерзЗ ржЖржЫрж┐, рждрж╛ржЗ ржкрж┐ржХ ржПрж░ ржбрж╛ржи ржжрж┐ржХрзЗ ржЖржЫрзЗ тЖТ Low ржмрж╛рзЬрж╛ржУред


else {
        high = mid - 1;
    }

ржЕржирзНржпржерж╛рзЯ ржорж╛ржирзЗ ржЖржорж░рж╛ ржХржорж╛рж░ ржкржерзЗ ржЖржЫрж┐ тЖТ ржкрж┐ржХ ржПрж░ ржмрж╛ржо ржжрж┐ржХрзЗ ржЖржЫрзЗ тЖТ High ржХржорж╛ржУред


return ans;

ржкрж┐ржХ ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓рзЗ рж╕рзЗржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛред



---

ЁЯзк Example Trace (arr = [0, 2, 1, 0])

Initial: low = 1, high = 2

1st Iteration:
mid = 1
arr[1] = 2, arr[0] = 0, arr[2] = 1
тЖТ 2 > 0 && 2 > 1 тЖТ ржкрж┐ржХ ржкрзЗрзЯрзЗ ржЧрзЗржЫрж┐ тЖТ return 1


---

ЁЯФБ Complexity:

Time: O(log n) тАФ ржкрзНрж░рждрж┐ рж╕рзНржЯрзЗржкрзЗ ржЦрзБржБржЬрзЗ ржирж┐ржЪрзНржЫрж┐ ржЕрж░рзНржзрзЗржХред

Space: O(1) тАФ ржХрзЛржи ржПржХрзНрж╕ржЯрзНрж░рж╛ рж╕рзНржкрзЗрж╕ ржЗржЙржЬ ржХрж░рж┐ржирж┐ред



---

тЬЕ Final Notes:

рждрзБржорж┐ ржпрзЗржЯрж╛ ржХрж░рзЗржЫрзЛ, рж╕рзЗржЯрж╛ ржПржХржжржо рж╕рзНржЯрзНржпрж╛ржирзНржбрж╛рж░рзНржб Binary Search Technique based approachред

рждрзБржорж┐ ржкрзНрж░ржержорзЗ ржмрзБржЭрзЗржЫрзЛ peak ржЦрзЛржБржЬрж╛ ржорж╛ржирзЗ ржПржоржи ржПржХржЯрж╛ index ржпрзЗржЯрж╛ рждрж╛рж░ ржжрзБржЗ ржкрж╛рж╢рзЗрж░ ржерзЗржХрзЗржУ ржмрзЬред

рждрзБржорж┐ ржПржЯрж╛ ржмрзБржЭрзЗ ржлрзЗрж▓рзЗржЫрзЛ ржпрзЗ increasing рж╣рж▓рзЗ ржбрж╛ржи ржжрж┐ржХрзЗ ржпрзЗрждрзЗ рж╣ржмрзЗ, decreasing рж╣рж▓рзЗ ржмрж╛ржо ржжрж┐ржХрзЗ ржпрзЗрждрзЗ рж╣ржмрзЗред



---

тЬЕ ржЙржкрж╕ржВрж╣рж╛рж░:

рждрзБржорж┐ ржПржЗ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржирзЗ problem pattern + binary search ржПржХрж╕рж╛ржерзЗ apply ржХрж░рзЗ ржжрж╛рж░рзБржг ржХрж╛ржЬ ржХрж░рзЗржЫрзЛред

ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛рж░ flow:

1. ржорж╛ржЙржирзНржЯрзЗржи ржЕрзНржпрж╛рж░рзЗ ржорж╛ржирзЗ increasing тЖТ peak тЖТ decreasing


2. рждрж┐ржиржЯрж┐ case ржзрж░рзЗ binary search apply


3. mid ржПрж░ ржЕржмрж╕рзНржерж╛ржи ржЕржирзБржпрж╛рзЯрзА direction ржирж┐рж░рзНржзрж╛рж░ржг


4. log(n) time ржП ржкрж┐ржХ ржмрзЗрж░ ржХрж░рзЗ ржЖржирж╛

  Full Code:
----------------

class Solution 
{
public:
    int peakIndexInMountainArray(vector<int>& arr) 
    {
        int low=1;
        int high=arr.size()-2;
        int ans=-1;
        while(low<=high)
            {
                int mid=low+(high-low)/2;
                if((arr[mid]>arr[mid-1])&&(arr[mid]>arr[mid+1]))
                   {
                ans= mid;
                    break;
                    
                   }
                if(arr[mid]<arr[mid+1])
                {
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
                
            }
        return ans;
    }
};
  
