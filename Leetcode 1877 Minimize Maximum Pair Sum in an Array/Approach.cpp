ржкрзНрж░рж╢рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:

ржЖржорж╛ржжрзЗрж░ ржПржХржЯрж┐ even-length array nums ржЖржЫрзЗред

ржЖржорж╛ржжрзЗрж░ pair рждрзИрж░рж┐ ржХрж░рждрзЗ рж╣ржмрзЗ ржпрж╛рждрзЗ ржкрзНрж░рждрж┐ржЯрж┐ element ржПржХржмрж╛рж░ржЗ ржмрзНржпржмрж╣рж╛рж░ рж╣ржпрж╝ред

ржЖржорж╛ржжрзЗрж░ рж▓ржХрзНрж╖рзНржп рж╣рж▓рзЛ maximum pair sum ржХрзЗ minimize ржХрж░рж╛ред

ржЙржжрж╛рж╣рж░ржг:
nums = [3,5,2,3]

рж╕ржм possible pairing:

(3,5) + (2,3) тЖТ pair sums = 8, 5 тЖТ max=8

(3,3) + (5,2) тЖТ pair sums = 6,7 тЖТ max=7 тЬЕ (minimum max)

ржорзЛржЯ ржХржерж╛:

ржЖржорж░рж╛ ржЪрж╛ржЗ max(a+b) ржХржоред

intuition: ржЫрзЛржЯ ржПржмржВ ржмржбрж╝ element ржПржХрждрзНрж░ ржХрж░рж▓рзЗ max pair sum ржХржо рж╣ржпрж╝ред

Solution Approach:

Step 1: Sort the array

sort(nums.begin(), nums.end());


ржХрзЗржи? sorted array рж╣рж▓рзЗ ржЖржорж░рж╛ smallest element ржУ largest element ржЬрзБржЯрж┐рждрзЗ ржкрж╛рж░рж┐ред

ржЙржжрж╛рж╣рж░ржг: [2,3,3,5]

ржЬрзБржЯрж┐ рждрзИрж░рж┐: (2,5) ржПржмржВ (3,3) тЖТ max pair sum = 7 тЬЕ

Step 2: Two-pointer technique

int i=0;
int j=nums.size()-1;
while(i<j)
{
    int sum=nums[i]+nums[j];
    v.push_back(sum);
    i++;
    j--;
}


i тЖТ left pointer (smallest number)

j тЖТ right pointer (largest number)

ржкрзНрж░рждрж┐ iteration:

left+right ржЬрзЛрзЬрж╛ sum ржХрж░рж╛

sum ржХрзЗ vector v рждрзЗ рж░рж╛ржЦрж╛

i++ ржУ j-- тЖТ move inward

ржХрж╛рж░ржг:

ржЫрзЛржЯ element + ржмржбрж╝ element = balanced pair sum

sorted ржирж╛ рж╣рж▓рзЗ, ржЖржорж░рж╛ ржПржХрж╛ ржмржбрж╝ element ржЬрзБржбрж╝рзЗ pair ржХрж░рж▓рзЗ max sum ржЕржирзЗржХ ржмржбрж╝ рж╣рждрзЗ ржкрж╛рж░рзЗред

Step 3: Find maximum sum from pairs
int ans=findmax(v);


ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ vector v ржерзЗржХрзЗ largest sum ржмрзЗрж░ ржХрж░рж┐ред

findmax function:

int findmax(vector<int>& nums) {
    int max=nums[0];
    for(int k=1;k<nums.size();k++)
    {
        if(nums[k]>max)
        {
            max=nums[k];
        }
    }
    return max;
}


simple linear search тЖТ O(n/2) = O(n)

Step 4: Return answer
return ans;


ржорж╛ржирзЗ: minimized maximum pair sum

Time Complexity Analysis:

Sorting тЖТ O(n log n)

Two-pointer sum creation тЖТ O(n)

Max finding тЖТ O(n)

Total = O(n log n)

Test Case Walkthrough (line by line)

Test case: [3,5,2,3]

Sort nums тЖТ [2,3,3,5]

i=0, j=3 тЖТ sum = 2+5=7 тЖТ v=[7]

i=1, j=2 тЖТ sum = 3+3=6 тЖТ v=[7,6]

i=2, j=1 тЖТ loop stops

findmax(v) тЖТ max(7,6) = 7

return 7 тЬЕ

Test case: [3,5,4,2,4,6]

Sort тЖТ [2,3,4,4,5,6]

i=0,j=5 тЖТ sum=2+6=8 тЖТ v=[8]

i=1,j=4 тЖТ sum=3+5=8 тЖТ v=[8,8]

i=2,j=3 тЖТ sum=4+4=8 тЖТ v=[8,8,8]

findmax(v) тЖТ 8

return 8 тЬЕ

Key Technique Used:

Greedy Approach: Always pair smallest + largest тЖТ minimize max pair sum

Two-pointer Technique: Efficient pairing in sorted array

Why it works: Pairing extreme numbers balances the sums тЖТ max sum reduced

How to think when reading question:

тАЬPair elementsтАЭ тЖТ likely greedy / two-pointer

тАЬMinimize the maximumтАЭ тЖТ pair small + large

Check constraints тЖТ even length, unique pairing

Sorted array simplifies pairing тЖТ natural hint for two-pointer

ЁЯТб Summary in Bangla:

ржкрзНрж░ржержорзЗ array sort ржХрж░рзЛ

рждрж╛рж░ржкрж░ smallest+largest ржХрж░рзЗ ржЬрзБржЯрж┐ ржмрж╛ржирж╛ржУ

ржкрзНрж░рждрж┐ржЯрж┐ ржЬрзБржЯрж┐рж░ sum ржЦрзБржБржЬрзЗ largest sum ржмрзЗрж░ ржХрж░рзЛ

Largest sum рж╣рж▓рзЛ minimized maximum pair sum

Full Code:
--------------\

  class Solution 
{
public:
int findmax(vector<int>& nums)
{
    int max=nums[0];
    for(int k=1;k<nums.size();k++)
    {
        if(nums[k]>max)
        {
            max=nums[k];
        }
    }
    return max;
}
    int minPairSum(vector<int>& nums) 
    {
        sort(nums.begin(),nums.end());
       int i=0;
       int j=nums.size()-1;
       vector<int>v;
       while(i<j)
       {
        int sum=nums[i]+nums[j];
        v.push_back(sum);
        i++;
        j--;
       }
    int ans=findmax(v);
    return ans;
    }
};
