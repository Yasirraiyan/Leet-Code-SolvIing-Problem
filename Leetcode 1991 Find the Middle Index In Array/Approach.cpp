ЁЯФН ржкрзНрж░ржмрж▓рзЗржо ржмрзБржЭрж┐ (Understanding the Problem)
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж╛ nums ржирж╛ржорзЗрж░ integer array ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред рждрзЛржорж╛ржХрзЗ ржПржоржи ржПржХржЯрж╛ middleIndex ржЦрзБржБржЬрждрзЗ рж╣ржмрзЗ, ржпрзЗржЯрж╛ satisfy ржХрж░рзЗ ржПржЗ condition:

bash
Copy
Edit
sum(nums[0] + nums[1] + ... + nums[middleIndex-1]) 
== 
sum(nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[n-1])
ржЕрж░рзНржерж╛рзО, index ржЯрж╛рж░ ржмрж╛ржорзЗ ржпрзЗрж╕ржм рж╕ржВржЦрзНржпрж╛рж░ ржпрзЛржЧржлрж▓ ржЖржЫрзЗ, ржЖрж░ index ржЯрж╛рж░ ржбрж╛ржирзЗ ржпрзЗрж╕ржм рж╕ржВржЦрзНржпрж╛рж░ ржпрзЛржЧржлрж▓ ржЖржЫрзЗ тАФ ржПржЗ ржжрзБржЗржЯрж╛ рж╕ржорж╛ржи рж╣рждрзЗ рж╣ржмрзЗред

тЬЕ ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕ ржПржирж╛рж▓рж╛ржЗрж╕рж┐рж╕
Example 1:
nums = [2,3,-1,8,4]
Index 3:
Left sum = 2 + 3 + (-1) = 4
Right sum = 4
тЬЕ Match ржХрж░рзЗржЫрзЗ тЖТ Return 3

ЁЯза ржмрзНржпржмрж╣рзГржд ржЯрзЗржХржирж┐ржХ: Prefix Sum + Running Sum
ржПржЗ рж╕ржорж╕рзНржпрж╛рзЯ ржЖржорж░рж╛ prefix sum ржХржирж╕рзЗржкрзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ ржХрж╛рж░ржг ржПрждрзЗ ржХрж░рзЗ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ index ржПрж░ ржмрж╛ржорзЗ ржУ ржбрж╛ржирзЗ ржерж╛ржХрж╛ ржЙржкрж╛ржжрж╛ржиржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓ efficiently ржмрзЗрж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

ЁЯзо ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи (Approach Step-by-Step)
Step 1: ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗржЯрж╛рж░ Total Sum ржмрзЗрж░ ржХрж░рзЛ
ржЖржорж░рж╛ ржЬрж╛ржирж┐:

ini
Copy
Edit
totalSum = sum of all elements in nums
Step 2: Loop ржЪрж╛рж▓рж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж┐ index ржПрж░ ржЬржирзНржп check ржХрж░рзЛ
ржЖржорж░рж╛ ржЪрж▓рждрж┐ ржкрж░рзНржпржирзНржд ржпрзЛржЧржлрж▓ рж░рж╛ржЦржмрзЛ leftSum ржирж╛ржорзЗред ржзрж░рзЛ ржЖржорж░рж╛ index i рждрзЗ ржЖржЫрж┐ред

рждрж╛рж╣рж▓рзЗ,

ini
Copy
Edit
rightSum = totalSum - leftSum - nums[i]
ржХрж╛рж░ржг, totalSum = leftSum + nums[i] + rightSum

тЗТ Rearranged ржХрж░рж▓рзЗ:
rightSum = totalSum - leftSum - nums[i]

Step 3: ржпржжрж┐ leftSum == rightSum рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ржЗ middleIndex
Step 4: ржирж╛ ржкрзЗрж▓рзЗ return -1
ЁЯТ╗ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ рж╕рж╣ (Line by Line with Bangla Explanation)
cpp
Copy
Edit
class Solution {
public:
    int findMiddleIndex(vector<int>& nums) {
        int totalSum = 0;     // ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗржЯрж╛рж░ total ржпрзЛржЧржлрж▓ рж░рж╛ржЦржмрзЛ ржПржЦрж╛ржирзЗ
        int leftSum = 0;      // ржкрзНрж░рждрж┐ржЯрж┐ index ржПрж░ ржЖржЧ ржкрж░рзНржпржирзНржд ржЙржкрж╛ржжрж╛ржирзЗрж░ ржпрзЛржЧржлрж▓
        
        // Step 1: Total sum ржмрзЗрж░ ржХрж░рж▓рж╛ржо
        for (int i = 0; i < nums.size(); i++) {
            totalSum += nums[i];
        }

        // Step 2: ржкрзНрж░рждрж┐ржЯрж┐ index ржП ржЪрзЗржХ ржХрж░ржмрзЛ
        for (int i = 0; i < nums.size(); i++) {
            int rightSum = totalSum - leftSum - nums[i]; // current index ржмрж╛ржж ржжрж┐рзЯрзЗ ржбрж╛ржирзЗрж░ sum
            
            if (leftSum == rightSum) {
                return i; // ржПржЯрж╛ржЗ middleIndex тЖТ leftmost ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓рзЗржЗ return
            }

            leftSum += nums[i]; // ржкрж░ржмрж░рзНрждрзА index ржПрж░ ржЬржирзНржп leftSum ржЖржкржбрзЗржЯ
        }

        // ржХрзЛржирзЛ index middleIndex ржирж╛ рж╣рж▓рзЗ
        return -1;
    }
};
ЁЯзк Test Case ржжрж┐рзЯрзЗ Step-by-Step Code Walkthrough
Input: nums = [2,3,-1,8,4]
totalSum = 2 + 3 + (-1) + 8 + 4 = 16

Loop start:

i=0:
leftSum=0, rightSum = 16 - 0 - 2 = 14 тЖТ тЭМ
leftSum = 0 + 2 = 2

i=1:
leftSum=2, rightSum = 16 - 2 - 3 = 11 тЖТ тЭМ
leftSum = 2 + 3 = 5

i=2:
leftSum=5, rightSum = 16 - 5 - (-1) = 16 - 5 + 1 = 12 тЖТ тЭМ
leftSum = 5 + (-1) = 4

i=3:
leftSum=4, rightSum = 16 - 4 - 8 = 4 тЬЕ match тЖТ return 3

тЬЕ Time & Space Complexity Analysis
Time Complexity: O(n)
ржПржХржмрж╛рж░ totalSum ржмрзЗрж░ ржХрж░рждрзЗ O(n) ржПржмржВ ржПржХржмрж╛рж░ рж▓рзБржк ржЪрж╛рж▓рж╛рждрзЗ O(n) = ржорзЛржЯ O(n)

Space Complexity: O(1)
ржХрзЛржирзЛ extra array ржмрж╛ ржбрж╛ржЯрж╛ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ рж▓рж╛ржЧржЫрзЗ ржирж╛ред

ЁЯза ржХрж┐ржнрж╛ржмрзЗ ржмрзБржЭржмрж╛ ржПржЗ Technique рж▓рж╛ржЧржмрзЗ?
ржПржЗ ржзрж░ржирзЗрж░ рж╕ржорж╕рзНржпрж╛ ржжрзЗржЦрж▓рзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЛ:

Index ржПрж░ ржмрж╛ржорзЗрж░ ржпрзЛржЧржлрж▓ ржПржмржВ ржбрж╛ржирзЗрж░ ржпрзЛржЧржлрж▓ compare ржХрж░рждрзЗ ржмрж▓рж╛ рж╣ржЪрзНржЫрзЗ?
тЗТ рждрж╛рж╣рж▓рзЗ prefix sum ржмрж╛ running sum рж▓рж╛ржЧржмрзЗ

ржПржХрж╛ржзрж┐ржХ ржмрж╛рж░ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░рждрзЗ ржмрж▓рж╛ рж╣рж▓рзЗ brute force O(n^2) рж╣рзЯрзЗ ржпрж╛ржмрзЗ
тЗТ Efficient рж╕ржорж╛ржзрж╛ржирзЗ prefix sum/total sum approach ржжрж░ржХрж╛рж░

тЬЕ Accepted ржХрзЗржи рж╣рж▓рзЛ?
Efficient O(n) solution

рж╕ржорж╕рзНржд edge case handle ржХрж░ржЫрзЗ:

beginning index (left sum = 0)

last index (right sum = 0)

ЁЯУМ ржЙржкрж╕ржВрж╣рж╛рж░
ржПржЗ рж╕ржорж╕рзНржпрж╛ ржмрзЛржЭрж╛рж░ ржорзВрж▓ ржХржирж╕рзЗржкрзНржЯ:

prefix sum = ржЪрж▓рждрж┐ ржкрж░рзНржпржирзНржд ржпрзЛржЧржлрж▓

total sum - left sum - current = right sum

ржпрзЗ index ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ left ржПржмржВ right sum рж╕ржорж╛ржи, рж╕рзЗржЯрж╛ржЗ ржЙрждрзНрждрж░ред

  Full Code:
--------------

  class Solution
 {
public:
    int findMiddleIndex(vector<int>& nums) 
    {
       int totalsum=0;
       int pivot=-1;
       int leftsum=0;
       int rightsum;
       for(int i=0;i<nums.size();i++)
       {
        totalsum+=nums[i];
       }
        for(int j=0;j<nums.size();j++)
        {
           rightsum= totalsum-leftsum;
           leftsum+=nums[j];
           if(leftsum==rightsum)
           {
            pivot=j;
            break;
           }
        }
        return pivot;
    }
};
