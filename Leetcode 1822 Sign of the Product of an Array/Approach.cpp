üî∂‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶æ (How to approach):

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¨‡¶≤‡¶õ‡ßá:

> ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá nums ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ (product) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶® (‡¶ß‡¶®‡¶æ‡¶§‡ßç‡¶Æ‡¶ï, ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï, ‡¶¨‡¶æ ‡¶∂‡ßÇ‡¶®‡ßç‡¶Ø) ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá?



‚úÖ ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶ï‡¶∞‡ßã:

‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ sign ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßá‡¶õ‡ßá, actual product ‡¶®‡¶æ!


---

üß† ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶∑‡ßü:

‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 0 ‡¶π‡ßü ‚Üí ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ 0 ‚Üí ‡¶â‡¶§‡ßç‡¶§‡¶∞ 0

‡¶Ø‡¶¶‡¶ø product > 0 ‚Üí ‡¶â‡¶§‡ßç‡¶§‡¶∞ 1

‡¶Ø‡¶¶‡¶ø product < 0 ‚Üí ‡¶â‡¶§‡ßç‡¶§‡¶∞ -1



---

üß† ‡¶§‡¶¨‡ßá ‡¶∏‡¶§‡ßç‡¶Ø‡¶ø‡¶ï‡¶æ‡¶∞ product ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá:

‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ nums.length 1000 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ -100 ‡¶•‡ßá‡¶ï‡ßá 100, ‡¶§‡¶æ‡¶á ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶ï‡¶∞‡¶≤‡ßá overflow ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶æ‡¶á‡¶® ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶ö‡¶æ‡¶á, full ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á‡•§


---

üß† ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡ßå‡¶∂‡¶≤ (Trick):

‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 0 ‡¶π‡ßü ‚Üí return 0

‡¶Ø‡¶¶‡¶ø n ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ï ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶•‡¶æ‡¶ï‡ßá:

‡¶Ø‡¶¶‡¶ø n even ‡¶π‡ßü ‚Üí ‡¶∏‡¶¨ ‡¶Æ‡¶ø‡¶≤‡¶ø‡ßü‡ßá ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶ß‡¶®‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‚Üí return 1

‡¶Ø‡¶¶‡¶ø n odd ‡¶π‡ßü ‚Üí ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‚Üí return -1




---

üî∑Step-by-step ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Line by Line in Bangla):

class Solution {
public:
    int arraySign(vector<int>& nums) {
        int count2 = 0;  // ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
        int ans;

        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] < 0) {
                count2++;  // ‡¶Ø‡¶¶‡¶ø ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá count ‡¶¨‡¶æ‡ßú‡¶æ‡¶ì
            }

            if(nums[i] == 0) {
                return 0;  // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 0 ‡¶π‡ßü, ‡¶∏‡ßã‡¶ú‡¶æ 0 ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì
            }
        }

        if(count2 % 2 == 0) {
            ans = 1;  // ‡¶Ø‡¶¶‡¶ø ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ú‡ßã‡ßú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ï ‡¶π‡ßü ‚Üí ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶ß‡¶®‡¶æ‡¶§‡ßç‡¶Æ‡¶ï
        }
        if(count2 % 2 != 0) {
            ans = -1;  // ‡¶Ø‡¶¶‡¶ø ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶ø‡¶ú‡ßã‡ßú ‡¶π‡ßü ‚Üí ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï
        }

        return ans;
    }
};


---

üî∂Test Case ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï):

‚úÖ Example 1:

nums = [-1,-2,-3,-4,3,2,1]

‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 0 ‡¶®‡ßü‡•§

‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: -1, -2, -3, -4 ‚Üí 4‡¶ü‡¶ø ‚Üí even

‡¶ó‡ßÅ‡¶£‡¶´‡¶≤: (-)(‚àí)(‚àí)(‚àí)(+)(+)(+) = positive ‚Üí ‚úÖ return 1



---

‚úÖ Example 2:

nums = [1,5,0,2,-3]

‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 0 ‡¶Ü‡¶õ‡ßá ‚Üí ‚úÖ ‡¶∏‡ßã‡¶ú‡¶æ return 0



---

‚úÖ Example 3:

nums = [-1,1,-1,1,-1]

‡ß©‡¶ü‡¶ø ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‚Üí odd

‡¶ó‡ßÅ‡¶£‡¶´‡¶≤: (-1)1(-1)1(-1) = -1 ‚Üí ‚úÖ return -1



---

üî∂ Final Thoughts:

‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶¨:

1. ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶®‡ßü ‚Üí ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶æ‡¶á‡¶®


2. ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ 0 ‚Üí ‡¶´‡¶≤ 0


3. ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶§‡ßã?

even ‚Üí ‡¶ß‡¶®‡¶æ‡¶§‡ßç‡¶Æ‡¶ï

odd ‚Üí ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï





---

‚úÖ Time & Space Complexity:

Time: O(n) ‚Üí ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶™

Space: O(1) ‚Üí ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø counter



---

üîö ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞:

‡¶è‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø overflow ‡¶è‡ßú‡¶æ‡¶§‡ßá ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶®‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶æ‡¶á‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ‡¶ü‡¶æ ‡¶ñ‡ßÅ‡¶¨‡¶á efficient ‡¶â‡¶™‡¶æ‡ßü‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá count2 ‡¶¶‡¶ø‡ßü‡ßá ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ó‡ßÅ‡¶®‡ßá ‡¶è‡¶¨‡¶Ç 0 ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá return ‡¶ï‡¶∞‡ßá‡¶õ‡ßã, ‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ì accepted approach‡•§

Full Code:
------------


  class Solution 
{
public:
    int arraySign(vector<int>& nums) 
{
        int count2=0;
        int ans;
        for(int i=0;i<nums.size();i++)
             {
                if(nums[i]<0)
                {
                    count2++;
                }
                if(nums[i]==0)
                    return 0;
            }
        if(count2%2==0)
        {
            ans=1;
        }
        if(count2%2!=0)
        {
            ans=-1;
        }
    return ans;
    }
};
