‚úÖ Problem:
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ array nums ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
‡¶§‡ßÅ‡¶Æ‡¶ø nums array-‡¶è‡¶∞ ‡¶è‡¶Æ‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ divisors (‡¶≠‡¶æ‡¶ú‡¶ï) ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ ‡¶†‡¶ø‡¶ï ‡ß™‡¶ü‡¶ø ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶Ü‡¶õ‡ßá‡•§

‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ exactly 4‡¶ü‡¶ø ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶ø ‡¶¨‡¶æ‡¶¶ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

üß† Step-by-Step Thinking Approach (Problem ‡¶™‡ßú‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶¨‡¶¨‡ßã):
‚û§ Step 1:
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ x ‡¶®‡¶ø‡ßü‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßã ‡¶§‡¶æ‡¶∞ divisors ‡¶ï‡ßü‡¶ü‡¶ø‡•§

‚û§ Step 2:
‡¶Ø‡¶¶‡¶ø divisors ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶†‡¶ø‡¶ï ‡ß™‡¶ü‡¶ø ‡¶π‡ßü ‚Äî ‡¶§‡¶æ‡¶π‡¶≤‡ßá‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶§‡¶æ‡¶∞ divisors ‡¶è‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ (sum) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã‡•§

‚û§ Step 3:
‡¶∏‡¶¨ ‡ß™ ‡¶≠‡¶æ‡¶ú‡¶ï‡¶¨‡¶ø‡¶∂‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶ú‡¶ï‡¶∏‡¶Æ‡ßÇ‡¶π‡ßá‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶Æ‡ßã‡¶ü ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤‡ßá (final sum) ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶¨‡ßã‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (line-by-line):
cpp
Copy
Edit
class Solution 
{
public:
‚úÖ Check ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®:
cpp
Copy
Edit
bool Check(int n)
{
    bool check = false;
    int count = 0;
    vector<int>v;

    for(int i = 1; i*i <= n; i++)
    {
        if(n % i == 0)
        {
            count++;
            v.push_back(i);
            
            if (i != n / i)
            {
                count++;
                v.push_back(n / i);
            }

            if (count > 4) break; // optimization
        }
    }

    if(count == 4)
    {
        check = true;
    }

    return check;
}
üîç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
count ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶™‡ßá‡¶≤‡¶æ‡¶Æ ‡¶§‡¶æ ‡¶ó‡ßÅ‡¶®‡¶õ‡¶ø‡•§

v ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞ (‡¶§‡¶¨‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ó‡ßÅ‡¶®‡¶õ‡¶ø)‡•§

‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡ß™ ‡¶ü‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶∞ ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶á ‡¶®‡¶æ ‚Äî ‡¶§‡¶æ‡¶á if (count > 4) break; ‡¶¶‡¶ø‡ßü‡ßá optimization ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

‡¶∂‡ßá‡¶∑‡ßá count == 4 ‡¶π‡¶≤‡ßá true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

‚úÖ divisors ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®:
cpp
Copy
Edit
int divisors(int n)
{
    int sum = 0;
    vector<int>v;
    
    for(int k = 1; k <= n; k++)
    {
        if(n % k == 0)
        {
            v.push_back(k);
        }
    }

    for(int j = 0; j < v.size(); j++)
    {
        sum += v[j];
    }

    return sum;
}
üîç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
n ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶¨ ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá v ‡¶§‡ßá ‡¶∞‡¶æ‡¶ñ‡¶ø‡•§

‡¶™‡¶∞‡ßá ‡¶∏‡¶¨ ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá sum ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶ø‡•§

‚ú¥Ô∏è Optimization Tip: ‡¶ö‡¶æ‡¶á‡¶≤‡ßá v ‡¶õ‡¶æ‡ßú‡¶æ‡¶á ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:

cpp
Copy
Edit
for(int k = 1; k <= n; k++)
    if(n % k == 0) sum += k;
‚úÖ Main Function: sumFourDivisors
cpp
Copy
Edit
int sumFourDivisors(vector<int>& nums) 
{
    int sum = 0;

    for(int k = 0; k < nums.size(); k++)
    {
        if(Check(nums[k]))
        {
            sum += divisors(nums[k]);
        }
    }

    return sum;
}
üîç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
nums array-‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® nums[k] ‡¶®‡¶ø‡ßü‡ßá Check() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

‡¶Ø‡¶¶‡¶ø Check() ‡¶¨‡¶≤‡ßá ‡¶è‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï ‡ß™‡¶ü‡¶ø ‡¶≠‡¶æ‡¶ú‡¶ï ‡¶Ü‡¶õ‡ßá ‚Äî ‡¶§‡¶æ‡¶π‡¶≤‡ßá divisors() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶§‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá sum-‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

üîÅ Example Test Case Step-by-Step:
üî∏ Input: nums = [21, 4, 7]
üëâ First number: 21
Divisors: 1, 3, 7, 21 ‚Üí Count = 4 ‚Üí ‚úÖ

Sum = 1 + 3 + 7 + 21 = 32

üëâ Second number: 4
Divisors: 1, 2, 4 ‚Üí Count = 3 ‚Üí ‚ùå

üëâ Third number: 7
Divisors: 1, 7 ‚Üí Count = 2 ‚Üí ‚ùå

‚û°Ô∏è Final Answer = 32

‚úÖ Accepted ‡¶ï‡ßá‡¶®?
Constraints ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶Æ‡ßü ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßã ‡¶®‡¶æ (divisor count ‚â§ sqrt(n))‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ divisors ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ count ‡¶ï‡¶∞‡¶æ efficient‡•§

‡¶ï‡ßã‡¶® ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶≠‡ßÅ‡¶≤ ‡¶®‡ßá‡¶á ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶ï‡ßã‡¶°‡¶ì ‡¶¨‡ßá‡¶∂‡¶ø ‡¶®‡ßü‡•§

üß™ Test More Cases:
cpp
Copy
Edit
vector<int> nums = {21, 4, 7}; // Output: 32
vector<int> nums2 = {21, 21}; // Output: 64
vector<int> nums3 = {1, 2, 3, 4, 5}; // Output: 0
Full Code:
----------

  class Solution 
{
public:
  bool Check(int n)
  {
    bool check=false;
     int count=0;
    vector<int>v;
    for(int i=1;i*i<=n;i++)
    {
        if(n%i==0)
        {
           count++;
           v.push_back(i);
            if (i != n / i) // avoid double-counting perfect square root
            {
                count++;
                v.push_back(n / i);
            }
             if (count > 4) break;
        }
        }
        if(count==4)
        {
            check=true;
          // break;
        }
    
    return check;
  }
 int divisors(int n)
 {
    int sum=0;
   vector<int>v;
   for(int k=1;k<=n;k++)
   {
    if(n%k==0)
    {
        v.push_back(k);
    }
   }
    for(int j=0;j<v.size();j++)
    {
        sum+=v[j];
    }
    return sum;
 }
    int sumFourDivisors(vector<int>& nums) 
    {
        int sum=0;
        for(int k=0;k<nums.size();k++)
        {
            if(Check(nums[k]))
            {
                sum+=divisors(nums[k]);
            }
        }
        return sum;
    }
};
