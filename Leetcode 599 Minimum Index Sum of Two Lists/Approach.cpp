ЁЯФ╢тЭУ Problem Summary (Bangla):

рждрзЛржорж╛ржХрзЗ ржжрзБржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ-ржПрж░ рж▓рж┐рж╕рзНржЯ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ тАФ list1 ржПржмржВ list2ред
рждрзБржорж┐ ржПржоржи common string ржЦрзБржБржЬржмрзЗ ржпрж╛ ржжрзБржЯрж┐ рж▓рж┐рж╕рзНржЯрзЗржЗ ржЖржЫрзЗ ржПржмржВ рждрж╛рж░ i + j (index ржпрзЛржЧржлрж▓) рж╕ржмржЪрзЗрзЯрзЗ ржХржоред
ржПржХрж╛ржзрж┐ржХ common string ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ ржпрж╛ржжрзЗрж░ index ржпрзЛржЧржлрж▓ рж╕ржорж╛ржи тАФ рж╕ржмржЧрзБрж▓рзЛ return ржХрж░рждрзЗ рж╣ржмрзЗред


---

ЁЯза ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛рж░ ржзрж╛ржк:

1. Common string ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗ тЗТ рждрж╛ржЗ unordered_set ржжрж┐рзЯрзЗ list1 рж░рж╛ржЦрж┐ред


2. рждрж╛рж░ржкрж░ list2 рждрзЗ ржШрзБрж░рж┐, ржпржжрж┐ ржХрзЛржирзЛ рж╕рзНржЯрзНрж░рж┐ржВ common рж╣рзЯ рждрж╛рж╣рж▓рзЗ list1 ржерзЗржХрзЗ рждрж╛рж░ index ржмрзЗрж░ ржХрж░рж┐ред


3. i + j рж╣рж┐рж╕рж╛ржм ржХрж░рж┐ (index ржпрзЛржЧржлрж▓)ред ржпржжрж┐ ржПржЗ sum рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╣рзЯ рждрж╛рж╣рж▓рзЗ reserve ржХрзНрж▓рж┐рзЯрж╛рж░ ржХрж░рзЗ ржирждрзБржиржЯрж╛ рж░рж╛ржЦрж┐ред ржпржжрж┐ рж╕ржорж╛ржи рж╣рзЯ, ржирждрзБржиржЯрж╛ржУ рж░рж╛ржЦрж┐ред




---

тЬЕ Code Explanation Line-by-Line (Bangla):

class Solution 
{
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2)

ЁЯФ╣ ржХрзНрж▓рж╛рж╕ Solution ржПрж░ ржоржзрзНржпрзЗ ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи ржмрж╛ржирж┐рзЯрзЗржЫрж┐ findRestaurant
ЁЯФ╣ ржПржЯрж╛ ржжрзБржЯрж┐ ржЗржиржкрзБржЯ ржирзЗрзЯ list1 ржЖрж░ list2, ржЖрж░ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ ржПржХржЯрж╛ vector<string> ржорж╛ржирзЗ common restaurant ржирж╛ржоржЧрзБрж▓рзЛрж░ рж▓рж┐рж╕рзНржЯред


---

unordered_set<string> r;
        for(int i = 0; i < list1.size(); i++)
        {
            r.insert(list1[i]);
        }

ЁЯФ╣ unordered_set ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрж┐ ржпрж╛рждрзЗ O(1) рж╕ржорзЯ ржХржоржи ржЪрзЗржХ ржХрж░рж╛ ржпрж╛рзЯред
ЁЯФ╣ list1 ржПрж░ рж╕ржм рж╕рзНржЯрзНрж░рж┐ржВ r ржирж╛ржорзЗ рж╕рзЗржЯрзЗ рж░рж╛ржЦрж▓рж╛ржоред


---

int min = INT_MAX;
        vector<string> reserve;

ЁЯФ╣ min рж╕рзНржЯрзЛрж░ ржХрж░рзЗ рж░рж╛ржЦржмрзЗ ржПржЦржи ржкрж░рзНржпржирзНржд ржкрж╛ржУрзЯрж╛ рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ i + j ржпрзЛржЧржлрж▓ред
ЁЯФ╣ reserve рж╣ржЪрзНржЫрзЗ ржЙрждрзНрждрж░ рж░рж╛ржЦрж╛рж░ ржнрзЗржХрзНржЯрж░ред


---

for(int j = 0; j < list2.size(); j++)

ЁЯФ╣ list2 рждрзЗ ржШрзБрж░ржмрзЛ index j ржирж┐рзЯрзЗред


---

if(r.find(list2[j]) != r.end())

ЁЯФ╣ ржпржжрж┐ list2[j] рж╕рзНржЯрзНрж░рж┐ржВржЯрж╛ list1 (ржорж╛ржирзЗ r) рждрзЗ ржерж╛ржХрзЗ, рждржЦржи ржПржЯрж╛ ржПржХржЯрж╛ common stringред


---

for(int i = 0; i < list1.size(); i++)
                {
                    if(list1[i] == list2[j])

ЁЯФ╣ ржПржЦржи list1 ржерзЗржХрзЗ ржУржЗ рж╕рзНржЯрзНрж░рж┐ржВ-ржПрж░ index i ржмрзЗрж░ ржХрж░ржЫрж┐ред
ЁЯФ╣ рждрзБржорж┐ ржПржЦрж╛ржирзЗ loop ржжрж┐рзЯрзЗ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗржЫрзЛред


---

int sum = i + j;

ЁЯФ╣ index ржпрзЛржЧржлрж▓ рж╣рж┐рж╕рж╛ржм ржХрж░ржЫрж┐: sum = i + j


---

if(sum < min)
                        {
                            reserve.clear();
                            reserve.push_back(list2[j]);
                            min = sum;
                        }

ЁЯФ╣ ржпржжрж┐ ржПржЗ ржпрзЛржЧржлрж▓ ржПржЦржи ржкрж░рзНржпржирзНржд рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╣рзЯ рждрж╛рж╣рж▓рзЗ:
тАГтАГтЬЕ ржЖржЧрзЗ ржпрзЗржЧрзБрж▓рзЛ ржЫрж┐рж▓ рж╕ржм ржорзБржЫрзЗ ржлрзЗрж▓рж┐
тАГтАГтЬЕ ржирждрзБржиржЯрж╛ рж░рж╛ржЦрж┐
тАГтАГтЬЕ min ржЖржкржбрзЗржЯ ржХрж░рж┐


---

else if(sum == min)
                        {
                            reserve.push_back(list2[j]);
                        }

ЁЯФ╣ ржпржжрж┐ ржПржХржЗ sum ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ рждрж╛рж╣рж▓рзЗ ржПржЯрж╛ржХрзЗржУ рж░рзЗржЦрзЗ ржжрж┐ржЗред


---

break;
                    }
                }

ЁЯФ╣ ржПржХржмрж╛рж░ ржорж┐рж▓ ржкрзЗрж▓рзЗ break ржХрж░рзЗ ржмрж╛рж╣рж┐рж░рзЗ ржЪрж▓рзЗ ржЖрж╕рж┐ (ржХрж╛рж░ржг list1[i] == list2[j] рждрзЛ ржПржХржмрж╛рж░ржЗ рж╣ржмрзЗ, unique)ред


---

return reserve;

ЁЯФ╣ рж╢рзЗрж╖рзЗ common рж╕рзНржЯрзНрж░рж┐ржВржЧрзБрж▓рзЛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж┐ ржпрж╛ржжрзЗрж░ index sum рж╕ржмржЪрзЗрзЯрзЗ ржХржоред

Full Code:
-----------++
class Solution 
{
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2)
    {
        unordered_set<string>r;
        for(int i=0;i<list1.size();i++)
            {
                r.insert(list1[i]);
            }
        int min=INT_MAX;
        vector<string>reserve;
        for(int j=0;j<list2.size();j++)
            {
                if(r.find(list2[j])!=r.end())
                {
                    for(int i=0;i<list1.size();i++)
                        {
                            
                        if(list1[i]==list2[j])
                        {
                            int sum=i+j;
                            
                        if(sum<min)
                            {
                                
                            reserve.clear();
                    reserve.push_back(list2[j]);
                              
                              min=sum  ;
                            }
                            else if(sum==min)
                            {
                                reserve.push_back(list2[j]);
                            }
                            break;
                        }
                        }
                }
            }
        return reserve;
    
        
                
            
    }
};
  
