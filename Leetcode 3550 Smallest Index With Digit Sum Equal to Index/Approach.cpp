ЁЯФН ржкрзНрж░рж╢рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Problem Understanding)
ржкрзНрж░рж╢рзНржи ржмрж▓ржЫрзЗ:

ржПржХржЯрж╛ nums[] integer ржЕрзНржпрж╛рж░рзЗ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред
ржЖржорж╛ржжрзЗрж░ ржПржоржи ржПржХржЯрж╛ рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ index i ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗ ржпрзЗржи nums[i] ржПрж░ digit sum = i рж╣рзЯред
ржирж╛ ржерж╛ржХрж▓рзЗ -1 return ржХрж░рждрзЗ рж╣ржмрзЗред

тЬЕ ржЙржжрж╛рж╣рж░ржг рзз: nums = [1, 3, 2]
i = 0 тЖТ digit sum of 1 = 1 тЙа 0 тЭМ

i = 1 тЖТ digit sum of 3 = 3 тЙа 1 тЭМ

i = 2 тЖТ digit sum of 2 = 2 тЬЕ

Output тЖТ 2

тЬЕ ржЙржжрж╛рж╣рж░ржг рзи: nums = [1, 10, 11]
i = 0 тЖТ 1 тЖТ digit sum = 1 тЙа 0 тЭМ

i = 1 тЖТ 10 тЖТ 1+0 = 1 тЬЕ

i = 2 тЖТ 11 тЖТ 1+1 = 2 тЬЕ
Smallest index = 1

ЁЯза ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛рж░ ржкржжрзНржзрждрж┐ (Thinking Process)
ржкрзНрж░рждрж┐ ржЗржирзНржбрзЗржХрзНрж╕ i рждрзЗ ржЧрж┐рзЯрзЗ nums[i] ржПрж░ digit sum ржмрзЗрж░ ржХрж░рзЛред

ржпржжрж┐ рж╕рзЗржЗ digit sum == i рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржПржЯрж┐ржЗ ржЙрждрзНрждрж░ред

ржкрзНрж░ржержо ржпрзЗржЗ i ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржорж┐рж▓ ржкрж╛ржмрзЗ, рж╕рзЗржЯрж╛ржЗ рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╣ржмрзЗред

ржХрзЛржирзЛ index ржирж╛ ржорж┐рж▓рзЗ ржЧрзЗрж▓рзЗ -1 return ржХрж░рзЛред

тЬЕ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрж╛ржВрж▓рж╛рзЯ
cpp
Copy
Edit
class Solution 
{
public:
ржПржХржЯрж╛ Solution ржХрзНрж▓рж╛рж╕ ржмрж╛ржирж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред

ЁЯФ╣ Digit Sum Calculator Function
cpp
Copy
Edit
int CalculateDigitSum(int n)
{
  int sum = 0;
  while(n > 0)
  {
    int rem = n % 10;
    sum += rem;
    n = n / 10;
  }
  return sum;
}
ЁЯФ╕ ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ digit sum ржмрзЗрж░ ржХрж░рзЗред
ржпрзЗржоржиржГ 123 тЖТ 1+2+3 = 6

ЁЯФ╣ Main Function: Smallest Index Checker
cpp
Copy
Edit
int smallestIndex(vector<int>& nums) 
{
    int ans = -1;
ржкрзНрж░ржержорзЗ ржзрж░ржЫрж┐, ржХрзЛржирзЛ ржорж┐рж▓ ржирж╛ржЗ тАФ рждрж╛ржЗ ans = -1

cpp
Copy
Edit
    for(int i = 0; i < nums.size(); i++)
    {
        if(CalculateDigitSum(nums[i]) == i)
        {
            ans = i;
            break;
        }
    }
ЁЯФ╕ ржкрзНрж░рждрж┐ржЯрж┐ index i ржПрж░ ржЬржирзНржп:

nums[i] ржПрж░ digit sum ржмрзЗрж░ ржХрж░рж┐ред

ржпржжрж┐ рж╕рзЗржЗ sum == i рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж┐ржЗ ржЙрждрзНрждрж░ред

ржпрзЗрж╣рзЗрждрзБ ржкрзНрж░ржержо ржорж┐рж▓ ржкрзЗрж▓рзЗржЗ ржмрзЗрж░ рж╣рзЯрзЗ ржпрж╛ржЗ (break), рждрж╛ржЗ рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ index ржЯрж╛ржЗ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗред

cpp
Copy
Edit
    return ans;
}
рж╢рзЗрж╖рзЗ ржЙрждрзНрждрж░ return ржХрж░рзЛред

тЬЕ Test Case ржЪрзЗржХрж┐ржВ тАФ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ Bangla ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
ЁЯзк Test Case 1:
cpp
Copy
Edit
nums = [1, 3, 2]
i = 0 тЖТ digit sum(1) = 1 тЙа 0 тЭМ

i = 1 тЖТ digit sum(3) = 3 тЙа 1 тЭМ

i = 2 тЖТ digit sum(2) = 2 тЬЕ тЖТ Return 2

ЁЯзк Test Case 2:
cpp
Copy
Edit
nums = [1, 10, 11]
i = 0 тЖТ digit sum(1) = 1 тЙа 0 тЭМ

i = 1 тЖТ digit sum(10) = 1+0 = 1 тЬЕ тЖТ Return 1 (earliest match)

ЁЯзк Test Case 3:
cpp
Copy
Edit
nums = [1, 2, 3]
i = 0 тЖТ digit sum(1) = 1 тЙа 0 тЭМ

i = 1 тЖТ digit sum(2) = 2 тЙа 1 тЭМ

i = 2 тЖТ digit sum(3) = 3 тЙа 2 тЭМ
тЖТ ржХрзЛржирзЛ ржорж┐рж▓ ржирж╛ржЗ тЖТ Return -1

тП▒я╕П Time & Space Complexity
ржмрж┐рж╖рзЯ	ржорж╛ржи
Time	O(n * D) тЖТ ржпрзЗржЦрж╛ржирзЗ D = digit count of nums[i]
Space	O(1)

тЬЕ ржХрзЗржи рждрзЛржорж╛рж░ ржХрзЛржб Accepted рж╣рж▓рзЛ?
тЬЕ Efficient loop

тЬЕ рж╕ржарж┐ржХ digit sum function

тЬЕ ржкрзНрж░ржержо match ржкрж╛ржУрзЯрж╛рж░ ржкрж░ржЗ break ржХрж░ржЫрзЛ тЖТ minimal index ржкрж╛ржЪрзНржЫрзЛ

тЬЕ Edge case handled тЖТ -1 return ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ

ЁЯФЪ рж╕ржВржХрзНрж╖рзЗржкрзЗ
ржзрж╛ржк	ржХрж╛ржЬ
Step 1	ржкрзНрж░рждрж┐ index i ржПрж░ ржЬржирзНржп nums[i] ржПрж░ digit sum ржмрзЗрж░ ржХрж░рзЛ
Step 2	ржпржжрж┐ digit sum == i рж╣рзЯ тЖТ return i
Step 3	ржХрзЛржирзЛ match ржирж╛ ржерж╛ржХрж▓рзЗ тЖТ return -1

  Full Code:
------------

  class Solution 
{
public:
int CalculateDigitSum(int n)
{
  int sum=0;
  while(n>0)
  {
    int rem=n%10;
    sum+=rem;
    n=n/10;
  }
  return sum;
}
    int smallestIndex(vector<int>& nums) 
    {
        int ans=-1;
        for(int i=0;i<nums.size();i++)
        {
          if(CalculateDigitSum(nums[i])==i)
          {
            ans=i;
            break;
          }
        }
        return ans;
    }
};
