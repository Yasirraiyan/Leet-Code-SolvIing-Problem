ЁЯФН Step-by-step Thinking Approach (Bangla)
тЬЕ Step 1: ржкрзНрж░рж╢рзНржи ржерзЗржХрзЗ ржХрж┐ ржмрзБржЭрж▓рж╛ржо?
arr рж╣ржЪрзНржЫрзЗ strictly increasing positive рж╕ржВржЦрзНржпрж╛ ржирж┐рзЯрзЗ ржЧржарж┐ржд ржПржХржЯрж╛ ржЕрзНржпрж╛рж░рзЗред

ржХрж┐ржЫрзБ рж╕ржВржЦрзНржпрж╛ ржорж┐рж╕рж┐ржВ тАФ ржпрзЗржЧрзБрж▓рзЛ arr-ржП ржирзЗржЗ, ржХрж┐ржирзНрждрзБ 1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржкрж░ржкрж░ ржерж╛ржХрж╛ ржЙржЪрж┐ржд ржЫрж┐рж▓ред

ржЖржорж╛ржжрзЗрж░ k-рждржо ржорж┐рж╕рж┐ржВ ржкржЬрж┐ржЯрж┐ржн ржЗржирзНржЯрж┐ржЬрж╛рж░ржЯрж╛ ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯУМ ржпрзЗржоржиржГ
arr = [2,3,4,7,11], k = 5
Missing numbers: [1,5,6,8,9,...] тЖТ 5th one is 9.

ЁЯза ржХрж┐ржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЛ?
ржкрзНрж░ржержорзЗржЗ ржПржХржЯрж╛ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржкрзНрж░рж╢рзНржи ржХрж░рзЛ:

тЭУ "ржЖржорж┐ ржпржжрж┐ 1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржкрзНрж░рждрж┐ржЯрж╛ ржкржЬрж┐ржЯрж┐ржн ржирж╛ржорзНржмрж╛рж░ ржЪрзЗржХ ржХрж░рж┐, рждрж╛рж╣рж▓рзЗ ржХрж┐ ржЖржорж┐ ржорж┐рж╕рж┐ржВ рж╕ржВржЦрзНржпрж╛ ржЧрзБрж▓рзЛ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ ржкрж╛рж░рж┐?"

рж╣рзНржпрж╛ржБ, ржкрж╛рж░рж┐ред
рждрзБржорж┐ 1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржЪрзЗржХ ржХрж░рждрзЗ ржкрж╛рж░рзЛ arr ржПрж░ ржоржзрзНржпрзЗ рж╕рзЗржЗ ржирж╛ржорзНржмрж╛рж░ ржЖржЫрзЗ ржХрж┐ ржирж╛ред

тЬЕ Algorithm (Bangla)
arr ржХрзЗ ржПржХржЯрж┐ unordered_set-ржП рж░рж╛ржЦрзЛ, ржпрж╛рждрзЗ O(1)-time ржП ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред

count = 0 рж░рж╛ржЦрзЛ тАФ ржХрзЯржЯрж╛ ржорж┐рж╕рж┐ржВ ржирж╛ржорзНржмрж╛рж░ ржкрзЗрзЯрзЗржЫрж┐ рждрж╛ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржпред

num = 1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржЪрзЗржХ ржХрж░рзЛ:

ржпржжрж┐ num тЖТ set-ржП ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ missing numberред count++ ржХрж░рзЛред

ржпржжрж┐ count == k, рждрж╛рж╣рж▓рзЗ ржЙрждрзНрждрж░ num ржЗред

ржпржЦржиржЗ k-ржЯрж╛ missing number ржкрзЗрзЯрзЗ ржЧрзЗржЫрзЛ, break ржХрж░рзЗ ржжрж╛ржУред

тЬЕ Code Explanation (Bangla)
cpp
Copy
Edit
class Solution 
{
public:
    int findKthPositive(vector<int>& arr, int k) 
    {
        unordered_set<int> set1;
        int ans;

        // Step 1: рж╕ржм elements ржХрзЗ рж╕рзЗржЯ-ржП рж░рж╛ржЦржЫрж┐
        for(int i = 0; i < arr.size(); i++)
        {
            set1.insert(arr[i]);
        }

        int count = 0;

        // Step 2: 1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржкрзНрж░рждрж┐ржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржЪрзЗржХ ржХрж░ржЫрж┐
        for(int j = 1; count < k; j++)
        {
            // ржпржжрж┐ j рж╕рзЗржЯрзЗ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржПржЯрж╛ ржорж┐рж╕рж┐ржВ ржирж╛ржорзНржмрж╛рж░
            if(set1.find(j) == set1.end())
            {
                count++;

                // ржпржжрж┐ ржПржЗржЯрж╛ржЗ k-рждржо ржорж┐рж╕рж┐ржВ рж╕ржВржЦрзНржпрж╛ рж╣рзЯ
                if(count == k)
                {
                    ans = j;
                    break;
                }
            }
        }

        return ans;
    }
};
ЁЯзк Test Case Walkthrough
ЁЯФ╣ Test 1:
cpp
Copy
Edit
Input: arr = [2,3,4,7,11], k = 5
Missing numbers: [1,5,6,8,9,...]

5th missing number = 9

Output: тЬЕ 9

ЁЯФ╣ Test 2:
cpp
Copy
Edit
Input: arr = [1,2,3,4], k = 2
Missing numbers: [5,6,7,...]

2nd missing = 6

Output: тЬЕ 6

тЬЕ Time Complexity:
O(n + k), ржпрзЗржЦрж╛ржирзЗ n рж╣ржЪрзНржЫрзЗ arr.size(), ржЖрж░ k рж╣ржЪрзНржЫрзЗ ржХрждржЯрж╛ ржкрж░рзНржпржирзНржд missing ржирж╛ржорзНржмрж╛рж░ ржЦрзБржБржЬржмрзЛред

Worst case ржпржжрж┐ arr ржЕржирзЗржХ dense рж╣рзЯ, рждрж╛рж╣рж▓рзЗ j ржмрзЬ рж╣рждрзЗ ржкрж╛рж░рзЗред рждржмрзЗ k <= 1000, рждрж╛ржЗ acceptableред

Full Code:
-----------

  class Solution 
{
public:
    int findKthPositive(vector<int>& arr, int k) 
    {
        unordered_set<int>set1;
        int ans;
        for(int i=0;i<arr.size();i++)
        {
          set1.insert(arr[i]);
        }
        int count=0;
        for(int j=1;count<k;j++)
        {
          if(set1.find(j)==set1.end())
          {
            count++;
            if(count==k)
            {
                 ans=j;
                 break;
            }
          }
        }
return ans;
    }
};
