
class Solution
{
public:
    int majorityElement(vector<int>& nums) 
{
        int ans;
        unordered_map<int,int>freq;
        for(int i=0;i<nums.size();i++)
        {
          freq[nums[i]]++;
        }
        int  n=nums.size();
        for(auto it:freq)
        {
           if(it.second>n/2)
           {
            ans=it.first;
            break;
           }
        }
        return ans;
    }
}; 


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int ans;
        unordered_map<int,int>freq;
        for(int i=0;i<nums.size();i++)
        {
          freq[nums[i]]++;
        }
        int  n=nums.size();
‚Ä¶};
Saved

Search questions in bangla approach so that in fututre i read it and understand it test solution by test case 


ChatGPT said:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá ‡¶ï‡ßã‡¶°‡¶ü‡¶æ LeetCode ‡¶è‡¶∞ 169. Majority Element ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡ßá‡¶õ‡ßã, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨ ‡¶ï‡ßá‡¶∏ ‡¶™‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶®‡¶ø‡¶ö‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶è‡¶á ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Bangla Approach Explanation) ‡¶≤‡¶ø‡¶ñ‡¶õ‡¶ø ‡¶Ø‡¶æ‡¶§‡ßá ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶π‡¶ú‡ßá ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:

üîç ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ nums ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ array ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá ‡¶Ø‡¶æ‡¶∞ size ‡¶π‡¶≤‡ßã n‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® (element) ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡¶æ ‚åän/2‚åã ‡¶è‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡¶æ‡¶∞ ‡¶∞‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶Æ‡¶® ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‚Äî ‡¶è‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ‡ßá ‡¶¨‡¶≤‡¶æ ‡¶Ü‡¶õ‡ßá‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Bangla):
int majorityElement(vector<int>& nums)
{
    int ans;
    unordered_map<int,int>freq;
üî∏ unordered_map<int, int> freq; ‚Äî ‡¶è‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ frequency (‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá) ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

    for(int i=0;i<nums.size();i++) {
        freq[nums[i]]++;
    }
üî∏ ‡¶è‡¶á loop ‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ frequency map ‡¶è count ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
nums = [2, 2, 1, 1, 1, 2, 2] ‚Üí map ‡¶π‡¶¨‡ßá: {2: 4, 1: 3}

    int n = nums.size();
    for(auto it:freq) {
        if(it.second > n/2) {
            ans = it.first;
            break;
        }
    }
üî∏ map ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ element check ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶Ø‡¶æ‡¶∞ frequency n/2 ‡¶è‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø, ‡¶∏‡ßá‡¶ü‡¶æ‡¶á majority element‡•§
üî∏ ‡¶Ø‡ßá‡¶á element majority ‡¶∂‡¶∞‡ßç‡¶§ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá ans ‡¶è ‡¶∞‡ßá‡¶ñ‡ßá break ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

    return ans;
üî∏ ‡¶∂‡ßá‡¶∑ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ans return ‡¶ï‡¶∞‡¶õ‡¶ø ‡¶Ø‡ßá‡¶ü‡¶æ majority element‡•§

üß™ Test Case ‡¶¶‡¶ø‡ßü‡ßá ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
Input: nums = [3,2,3]
Step 1: freq = {3: 2, 2: 1}
Step 2: n = 3 ‚Üí n/2 = 1
Step 3: 3 has frequency 2 > 1 ‚Üí ans = 3

Output: 3 ‚úÖ
‚öôÔ∏è Time & Space Complexity:
‚úÖ Time Complexity: O(n)
(‡¶ï‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ element ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á loop ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§)

‚ùå Space Complexity: O(n)
(‡¶ï‡¶æ‡¶∞‡¶£ hashmap ‡¶è ‡¶∏‡¶¨ unique elements store ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§)










No file chosenNo file chosen
ChatGPT can make mistakes. Check important info.
