ЁЯФН рж╕ржорж╕рзНржпрж╛ ржмрзБржЭрж┐:
рждрзЛржорж╛ржХрзЗ ржПржоржи ржПржХржЯрж┐ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ x ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ, ржПржмржВ рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ:

рждрж╛рж░ ржмрж░рзНржЧржорзВрж▓ (square root) ржмрзЗрж░ ржХрж░рж╛

ржХрж┐ржирзНрждрзБ ржжрж╢ржорж┐ржХ ржирзЯ, ржмрж░ржВ ржирзАржЪрзЗрж░ ржжрж┐ржХрзЗ рж░рж╛ржЙржирзНржб ржХрж░рж╛ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ рж╣ржмрзЗ

ржПржмржВ ржХрзЛржирзЛ sqrt, pow, x ** 0.5 ржПрж░ржХржо ржлрж╛ржВрж╢ржи/ржЕржкрж╛рж░рзЗржЯрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред

тЬЕ ржХрзЛржб рж▓ржЬрж┐ржХ (Binary Search):
ржЖржорж░рж╛ ржЬрж╛ржирж┐, sqrt(x) ржПрж░ ржорж╛ржи рж╕рж░рзНржмрзЛржЪрзНржЪ x ржкрж░рзНржпржирзНржд рж╣рждрзЗ ржкрж╛рж░рзЗ (ржпрзЗржоржи sqrt(9) = 3, ржХрж┐ржирзНрждрзБ рждрж╛рж░ range 1 ржерзЗржХрзЗ 9 ржПрж░ ржнрж┐рждрж░рзЗ)ред

ржЖржорж░рж╛ Binary Search ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ ржПржЗ рж░рзЗржЮрзНржЬрзЗ (1 ржерзЗржХрзЗ x) ржПржЗ ржЪрзЗржХ ржХрж░рждрзЗ ржХрж░рждрзЗ ржпрзЗ ржХрзЛржи рж╕ржВржЦрзНржпрж╛рж░ square ржХрж░рж▓рзЗ x ржПрж░ рж╕ржорж╛ржи рж╣рзЯ ржмрж╛ ржХржо рж╣рзЯред

ЁЯФН ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи:
cpp
Copy
Edit
class Solution 
{
public:
    int mySqrt(int x) 
    {
ржПржХржЯрж╛ ржХрзНрж▓рж╛рж╕ Solution ржмрж╛ржирж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ ржпрзЗржЦрж╛ржирзЗ ржлрж╛ржВрж╢ржи mySqrt ржЖржЫрзЗ, ржпрж╛ int x ржЗржиржкрзБржЯ ржирзЗрзЯ ржПржмржВ рждрж╛рж░ рж╕рзНржХрзЯрж╛рж░ рж░рзБржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

cpp
Copy
Edit
        int ans;
        long long high = x;
        long long low = 1;
ans ржнрзЗрж░рж┐рзЯрзЗржмрж▓ржЯрж╛ рж╕рзНржХрзЯрж╛рж░ рж░рзБржЯ рж╣рж┐рж╕рж╛ржмрзЗ ржзрж░рзЗ рж░рж╛ржЦрж╛ рж╣ржмрзЗред

low = 1 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ high = x ржкрж░рзНржпржирзНржд Binary Search ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗред

long long ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржпрзЗржи mid * mid ржХрж░рж▓рзЗ overflow ржирж╛ рж╣рзЯред

cpp
Copy
Edit
        if(x == 0) return 0;
ржпржжрж┐ ржЗржиржкрзБржЯ x = 0 рж╣рзЯ рждрж╛рж╣рж▓рзЗ рж╕рзНржХрзЯрж╛рж░ рж░рзБржЯ 0 рж╣рзЯ, рж╕рж░рж╛рж╕рж░рж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

cpp
Copy
Edit
        while(low <= high)
        {
            long long mid = low + (high - low) / 2;
Binary Search ржПрж░ рж╕рзНржЯрзНржпрж╛ржирзНржбрж╛рж░рзНржб ржлрж░рзНржорзБрж▓рж╛ mid = low + (high - low)/2ред

cpp
Copy
Edit
            if(mid * mid < x)
            {
                ans = (int)mid;
                low = mid + 1;
            }
ржпржжрж┐ mid^2 < x рж╣рзЯ, рждрж╛рж╣рж▓рзЗ mid рж╣рждрзЗ ржкрж╛рж░рзЗ рж╕рзНржХрзЯрж╛рж░ рж░рзБржЯ ржЕржержмрж╛ ржЖрж░рзЛ ржмрзЬ рж╕ржВржЦрзНржпрж╛ржУ рж╣рждрзЗ ржкрж╛рж░рзЗред
рждрж╛ржЗ ans ржЖржкржбрзЗржЯ ржХрж░рж┐ ржПржмржВ ржбрж╛ржи ржкрж╛рж╢рзЗ ржЦрзБржБржЬрж┐ low = mid + 1 ржХрж░рзЗред

cpp
Copy
Edit
            else if(mid * mid == x)
            {
                ans = (int)mid;
                break;
            }
ржпржжрж┐ ржПржХржжржо mid^2 == x рж╣рзЯ, рждрж╛рж╣рж▓рзЗ perfect squareред ans рж╕рзЗржЯ ржХрж░рзЗ рж▓рзБржк ржмрзНрж░рзЗржХ ржХрж░рж┐ред

cpp
Copy
Edit
            else
            {
                high = mid - 1;
            }
ржпржжрж┐ mid^2 > x рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржмрзЬ рж╣рзЯрзЗ ржпрж╛ржЪрзНржЫрзЗ, рждрж╛ржЗ high ржХржорж┐рзЯрзЗ ржЫрзЛржЯ рж░рзЗржЮрзНржЬ ржжрзЗржЦрж┐ред

cpp
Copy
Edit
        }
        return ans;
    }
};
рж▓рзБржк рж╢рзЗрж╖рзЗ ans рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж┐ред

ЁЯУШ Test Case 1: x = 4
makefile
Copy
Edit
Initial: low = 1, high = 4

1st iteration:
mid = (1 + 4) / 2 = 2
2^2 = 4 == x тЖТ perfect match
ans = 2, break

Return: 2
ЁЯУШ Test Case 2: x = 8
vbnet
Copy
Edit
Initial: low = 1, high = 8

1st iteration:
mid = 4 тЖТ 4^2 = 16 > 8 тЖТ high = 3

2nd iteration:
mid = 2 тЖТ 2^2 = 4 < 8 тЖТ ans = 2, low = 3

3rd iteration:
mid = 3 тЖТ 3^2 = 9 > 8 тЖТ high = 2

=> Loop ends, return ans = 2
ЁЯдФ ржХрзЗржи Accepted рж╣рж▓рзЛ?
Time Complexity: O(log x) тЖТ Binary Search рж╣ржУрзЯрж╛рж░ ржХрж╛рж░ржгрзЗред

No Built-in Function Used тЖТ problem constraint ржорж╛ржирж╛ рж╣рзЯрзЗржЫрзЗред

Handles Large Values Safely тЖТ long long ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ mid * mid overflow ржПрзЬрж╛рждрзЗред

ЁЯза рждрзБржорж┐ ржХрзАржнрж╛ржмрзЗ рж╕ржорж╛ржзрж╛ржи ржнрж╛ржмржмрзЗ?
x ржПрж░ рж╕рзНржХрзЯрж╛рж░ рж░рзБржЯ ржорж╛ржирзЗ ржПржоржи ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржпрж╛рж░ ржмрж░рзНржЧ x ржПрж░ рж╕ржорж╛ржи ржмрж╛ рждрж╛рж░ ржХржоред

Binary Search рж╣рж▓рзЛ ржПржоржи ржПржХржЯрж┐ efficient ржкржжрзНржзрждрж┐ ржпрж╛ sorted range ржП apply ржХрж░рж╛ ржпрж╛рзЯред ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ 1 ржерзЗржХрзЗ x range ржзрж░рзЗ Binary Search ржХрж░ржмрзЛред

ржЖржорж░рж╛ ржпржЦржиржЗ mid * mid <= x ржкрж╛ржЗ, рж╕рзЗржЯрж┐ржХрзЗ potential ржЙрждрзНрждрж░ рж╣рж┐рж╕рж╛ржмрзЗ рж░рж╛ржЦрж┐ред

Binary Search ржП left/right ржП move ржХрж░рж╛рж░ ржорзВрж▓ strategy рж╣рж▓рзЛ:

mid┬▓ < x	mid┬▓ > x	mid┬▓ == x
ржЙрждрзНрждрж░ рж╣рждрзЗ ржкрж╛рж░рзЗ, ржбрж╛ржиржжрж┐ржХрзЗ ржпрж╛ржЗ	ржмрзЬ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ, ржмрж╛ржоржжрж┐ржХрзЗ ржпрж╛ржЗ	perfect ржЙрждрзНрждрж░, рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж┐

Test Code:
-----------

  ЁЯФв Test Input:
cpp
Copy
Edit
x = 8
ЁЯзк Code with Line-by-Line Execution:
cpp
Copy
Edit
class Solution 
{
public:
    int mySqrt(int x) 
    {
ЁЯФ╕ ржХрзНрж▓рж╛рж╕ Solution ржПрж░ ржоржзрзНржпрзЗ mySqrt ржлрж╛ржВрж╢ржи рж╢рзБрж░рзБред x = 8 ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред

cpp
Copy
Edit
        int ans;
        long long high = x;     // high = 8
        long long low = 1;      // low = 1
ЁЯФ╕ ржЖржорж░рж╛ Binary Search ржПрж░ ржЬржирзНржп low = 1 ржПржмржВ high = 8 ржирж┐рж▓рж╛ржоред
ЁЯФ╕ ans ржХрзЛржирзЛ ржорж╛ржи рж░рж╛ржЦрж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛред

cpp
Copy
Edit
        if(x == 0) return 0;
ЁЯФ╕ x = 8 рждрж╛ржЗ ржПржЗ рж▓рж╛ржЗржи рж╕рзНржХрж┐ржкред

cpp
Copy
Edit
        while(low <= high)
ЁЯФ╕ ржкрзНрж░ржержоржмрж╛рж░: low = 1, high = 8 тЖТ рж╢рж░рзНржд рж╕рждрзНржп тЖТ рж▓рзБржкрзЗ ржврзБржХржмрзЛред

ЁЯФБ 1st Iteration:
cpp
Copy
Edit
long long mid = low + (high - low) / 2;
// mid = 1 + (8 - 1) / 2 = 1 + 3 = 4
cpp
Copy
Edit
if(mid * mid < x)
ЁЯФ╕ mid = 4, рждрж╛ржЗ mid * mid = 16
ЁЯФ╕ 16 > 8 тЖТ ржПржЗ рж╢рж░рзНржд false

cpp
Copy
Edit
else if(mid * mid == x)
ЁЯФ╕ 16 != 8 тЖТ false

cpp
Copy
Edit
else
{
    high = mid - 1;   // high = 4 - 1 = 3
}
ЁЯФ╕ ржПржмрж╛рж░ high ржЫрзЛржЯ ржХрж░рзЗ ржжрж┐рж▓рж╛ржоред

ЁЯФБ 2nd Iteration:
cpp
Copy
Edit
low = 1, high = 3
mid = 1 + (3 - 1)/2 = 1 + 1 = 2
cpp
Copy
Edit
if(mid * mid < x) тЖТ 2*2 = 4 < 8 тЖТ true
ЁЯФ╕ ans = 2, ржХрж╛рж░ржг 2 рж╣рзЯрждрзЛ ржЖржорж╛ржжрзЗрж░ ржЙрждрзНрждрж░ред
ЁЯФ╕ low = mid + 1 = 3

cpp
Copy
Edit
ans = (int)mid;   // ans = 2
low = mid + 1;    // low = 3
ЁЯФБ 3rd Iteration:
cpp
Copy
Edit
low = 3, high = 3
mid = 3 + (3 - 3)/2 = 3
cpp
Copy
Edit
if(mid * mid < x) тЖТ 3*3 = 9 < 8 тЖТ false
cpp
Copy
Edit
else if(mid * mid == x) тЖТ 9 == 8 тЖТ false
cpp
Copy
Edit
else
{
    high = mid - 1 = 2
}
ЁЯЫС End of Loop:
cpp
Copy
Edit
while(low <= high) тЖТ 3 <= 2 тЖТ false
ЁЯФ╕ рж▓рзБржк рж╢рзЗрж╖ред ржПржЦржи ans = 2

cpp
Copy
Edit
return ans;
тЬЕ Final Output:
makefile
Copy
Edit
Output: 2
Explanation: sqrt(8) тЙИ 2.828 тЖТ ржирж┐ржЪрзЗрж░ ржжрж┐ржХ ржерзЗржХрзЗ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛рзЯ рж░рж╛ржЙржирзНржб ржХрж░рж▓рзЗ 2
ЁЯФО Step-by-Step Variable Table
Iteration	low	high	mid	mid┬▓	Action	ans
1	1	8	4	16	high = mid - 1	тАФ
2	1	3	2	4	ans = mid, low++	2
3	3	3	3	9	high = mid - 1	2
Exit	3	2	тАФ	тАФ	loop ends	2

ЁЯзк Extra Test: x = 0
cpp
Copy
Edit
if(x == 0) return 0;
тЖТ ржПржХржжржо рж╢рзБрж░рзБрждрзЗржЗ return 0 ржХрж░рзЗ ржжрж┐ржмрзЗред

ЁЯзк Extra Test: x = 4
cpp
Copy
Edit
low = 1, high = 4
mid = 2 тЖТ 2*2 = 4 тЖТ match тЖТ return 2


  Full Code:
------------

 class Solution {
public:
    bool isPerfectSquare(int num) 
    {
        long long low=0;
        long long  high=num;
       long long mid;
        bool isperfect=false;
        if(num==0) return 0;
        while(low<=high)
        {
            mid=low+(high-low)/2;
            if(mid*mid==num)
            {
             isperfect=true;
             break;
            }
          else  if(mid*mid>num)
            {
             high=mid-1;
            }
            else
            {
            low=mid+1;
            }
        }
        return isperfect;
    }
};
