üîç Step-by-Step ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶®‡¶æ‡¶ì ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ:
Objective:
‡¶™‡ßÅ‡¶∞‡ßã tree traversal ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨ node-‡¶è‡¶∞ value ‡¶®‡¶ø‡ßü‡ßá ‡¶∏‡ßá‡¶ü‡¶ø‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá second smallest ‡¶Æ‡¶æ‡¶® ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá (‡¶Æ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨ value ‡¶è‡¶ï‡¶á), ‡¶§‡¶æ‡¶π‡¶≤‡ßá -1 return ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‚úÖ Input Example 1:
yaml
Copy
Edit
Input: [2,2,5,null,null,5,7]
       2
      / \
     2   5
        / \
       5   7
‡¶∏‡¶¨ values: [2,2,5,5,7]

Unique values: [2,5,7]

Second smallest = 5 ‚úÖ

‚úÖ Input Example 2:
css
Copy
Edit
Input: [2,2,2]
       2
      / \
     2   2
‡¶∏‡¶¨ values: [2,2,2]

Unique values: [2]

Second smallest ‡¶®‡ßá‡¶á, ‡¶§‡¶æ‡¶á output: -1

üß† ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá approach ‡¶≠‡¶æ‡¶¨‡¶¨‡ßã?
Tree-‡¶è‡¶∞ ‡¶∏‡¶¨ nodes-‡¶è‡¶∞ value ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã ‚Üí BFS traversal ‡¶¶‡¶ø‡ßü‡ßá‡•§

‡¶∏‡¶¨ value ‡¶•‡ßá‡¶ï‡ßá unique values ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã ‚Üí unordered_map ‡¶¨‡¶æ set ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ unique values ‡¶ó‡ßÅ‡¶≤‡ßã sort ‡¶ï‡¶∞‡ßá ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü‡¶ü‡¶æ ‡¶®‡ßá‡¶¨‡•§

‡¶Ø‡¶¶‡¶ø second min ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá (‡¶Æ‡¶æ‡¶®‡ßá unique value ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ), ‡¶§‡¶æ‡¶π‡¶≤‡ßá -1 return ‡¶ï‡¶∞‡¶¨‡ßã‡•§

üîé ‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Line-by-line) ‚Äî ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π:
cpp
Copy
Edit
class Solution 
{
public:
 // Step 1: Tree traversal using BFS (Level Order Traversal)
 vector<int>BFS(TreeNode* root)
 {
  queue<TreeNode*>q;
  q.push(root); // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá root ‡¶ï‡ßá queue ‡¶§‡ßá ‡¶¢‡ßÅ‡¶ï‡¶æ‡¶≤‡¶æ‡¶Æ
  vector<int>v;
  
  while(!q.empty())
  {
    TreeNode* front=q.front(); // queue ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá‡¶∞ node ‡¶®‡¶ø‡ßü‡ßá ‡¶è‡¶≤‡¶æ‡¶Æ
    q.pop();
    
    if(front!=nullptr)
    {
      v.push_back(front->val); // node ‡¶è‡¶∞ value vector ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
    }

    // ‡¶Ø‡¶¶‡¶ø child ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ queue ‡¶§‡ßá ‡¶¢‡ßÅ‡¶ï‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ
    if(front->left!=nullptr) q.push(front->left);
    if(front->right!=nullptr) q.push(front->right);
  }
  return v; // ‡¶∏‡¶¨ node ‡¶è‡¶∞ value return ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
 }
cpp
Copy
Edit
    int findSecondMinimumValue(TreeNode* root) 
    {
      vector<int>vv = BFS(root); // BFS ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶∏‡¶¨ value ‡¶®‡¶ø‡ßü‡ßá ‡¶è‡¶≤‡¶æ‡¶Æ

      unordered_map<int,int>freq;
      for(int i=0;i<vv.size();i++)
      {
        freq[vv[i]]++; // frequency ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶∞‡¶æ‡¶ñ‡¶≤‡¶æ‡¶Æ
      }
‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø: unique values ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ

cpp
Copy
Edit
      vector<int>v;
      for(auto it:freq)
      {
        v.push_back(it.first); // map ‡¶•‡ßá‡¶ï‡ßá unique value ‡¶ó‡ßÅ‡¶≤‡ßã vector ‡¶è ‡¶∞‡¶æ‡¶ñ‡¶≤‡¶æ‡¶Æ
      }

      sort(v.begin(),v.end()); // sort ‡¶ï‡¶∞‡¶≤‡ßá second smallest ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá
cpp
Copy
Edit
      int secondmin;
      if(v.size()>=2) // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß®‡¶ü‡¶ø unique ‡¶Æ‡¶æ‡¶® ‡¶•‡¶æ‡¶ï‡ßá
      {
        secondmin = v[1]; // ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶õ‡ßã‡¶ü‡¶ü‡¶æ ‡¶π‡¶≤ second minimum
      }
      else
      {
        return -1; // ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá -1 return ‡¶ï‡¶∞‡¶¨‡ßã
      }

      return secondmin; // ‡¶â‡¶§‡ßç‡¶§‡¶∞ return ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
    }
};
‚úÖ ‡¶ï‡ßá‡¶® ‡¶è‡¶á ‡¶ï‡ßã‡¶° Accepted ‡¶π‡ßü?
‚úÖ Tree traversal ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü BFS ‡¶¶‡¶ø‡ßü‡ßá ‚Üí ‡¶∏‡¶¨ value ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

‚úÖ unordered_map ‡¶¶‡¶ø‡ßü‡ßá duplicate ‡¶õ‡¶æ‡ßú‡¶æ‡¶á unique values ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡•§

‚úÖ Unique value sort ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ second minimum ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‚úÖ Time Complexity: O(n + k log k) ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá n = nodes, k = unique values ‚Üí efficient‡•§

üß™ Test Case ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßã‡¶ù‡¶æ:
Test Case 1:
cpp
Copy
Edit
Input: [2,2,5,null,null,5,7]

Tree:
       2
      / \
     2   5
        / \
       5   7

Traversal: BFS ‚Üí [2,2,5,5,7]
Unique Values: {2, 5, 7}
Sorted: [2, 5, 7]
Second minimum: 5 ‚úÖ
Test Case 2:
cpp
Copy
Edit
Input: [2,2,2]

Tree:
      2
     / \
    2   2

Traversal: BFS ‚Üí [2,2,2]
Unique Values: {2}
Sorted: [2]
Second min ‡¶®‡ßá‡¶á ‚Üí return -1 ‚úÖ
‚úçÔ∏è Summary of Thought Process (Bangla):
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡¶æ ‡¶õ‡¶ø‡¶≤ tree-‡¶è‡¶∞ ‡¶∏‡¶¨ value ‡¶•‡ßá‡¶ï‡ßá second smallest ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá‡•§

‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ tree-‡¶è‡¶∞ ‡¶ó‡¶†‡¶® special ‡¶õ‡¶ø‡¶≤ (root.val = min(left.val, right.val)), ‡¶§‡¶æ‡¶á ‡¶ú‡¶æ‡¶®‡¶ø smallest value ‡¶π‡¶¨‡ßá root.val

BFS ‡¶¶‡¶ø‡ßü‡ßá traversal ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§

map ‡¶¶‡¶ø‡ßü‡ßá unique values ‡¶∞‡¶æ‡¶ñ‡¶≤‡¶æ‡¶Æ‡•§

sort ‡¶ï‡¶∞‡ßá second minimum ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§

Full Code:
-----------

  /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
 vector<int>BFS(TreeNode* root)
 {
  queue<TreeNode*>q;
  q.push(root);
  vector<int>v;
  while(!q.empty())
  {
    TreeNode* front=q.front();
    q.pop();
    if(front!=nullptr)
    {
    v.push_back(front->val);
  }
  if(front->left!=nullptr) q.push(front->left);
  if(front->right!=nullptr) q.push(front->right);
  
  }
  return v;
 }
    int findSecondMinimumValue(TreeNode* root) 
    {
      vector<int>vv=BFS(root);
        unordered_map<int,int>freq;
        for(int i=0;i<vv.size();i++)
        {
          freq[vv[i]]++;
        }
        vector<int>v;
        for(auto it:freq)
        {
          v.push_back(it.first);
        }
        sort(v.begin(),v.end());
        int ans;
        int secondmin;
        if(v.size()>=2)
        {
        secondmin=v[1];
        }
        else
        {
          return -1;
        }
        ans=secondmin;
        return ans;

    }
};
