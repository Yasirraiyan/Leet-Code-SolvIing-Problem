рждрзБржорж┐ ржпрзЗ рж╕ржорж╕рзНржпрж╛ржЯрж╛ ржжрж┐рж▓рзЗ, рж╕рзЗржЯрж╛рж░ ржирж╛ржо рж╣рждрзЗ ржкрж╛рж░рзЗ:
"Minimum Common Element in Two Sorted Arrays"

ЁЯФН Problem ржЯрж╛ ржмрзБржЭрж┐:
рждрзЛржорж╛ржХрзЗ ржжрзБржЗржЯрж╛ array nums1 ржПржмржВ nums2 ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ ржпрзЗржЧрзБрж▓рзЛ sorted in non-decreasing orderред
рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ, ржПржЗ ржжрзБржЗржЯрж╛рждрзЗ common (ржпрзЗ ржЙржнрзЯрзЗ ржЖржЫрзЗ) ржПржоржи рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ (minimum) рж╕ржВржЦрзНржпрж╛ржЯрж╛ return ржХрж░рж╛ред
ржпржжрж┐ ржХрзЛржи рж╕ржВржЦрзНржпрж╛ common ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ -1 return ржХрж░рждрзЗ рж╣ржмрзЗред

тЬЕ ржЙржжрж╛рж╣рж░ржг:
Example 1:
makefile
Copy
Edit
nums1 = [1, 2, 3]
nums2 = [2, 4]

common: [2] тЖТ return 2
Example 2:
makefile
Copy
Edit
nums1 = [1, 2, 3, 6]
nums2 = [2, 3, 4, 5]

common: [2, 3] тЖТ ржЫрзЛржЯржЯрж╛ рж╣рж▓рзЛ 2 тЖТ return 2
ЁЯФО Approach (ржнрж╛ржмрж╛рж░ ржкржжрзНржзрждрж┐):
ЁЯФ╣ Step 1: Sorted Arrays = Binary Search ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ
ржпрзЗрж╣рзЗрждрзБ ржжрзБржЗржЯрж╛ array sorted, рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ Binary Search ржЗржЙржЬ ржХрж░рзЗ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЛ тАФ ржжрзНржмрж┐рждрзАрзЯ array-ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ element ржкрзНрж░ржержо array-рждрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ред

ЁЯФ╣ Step 2: nums2 ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржирж┐рзЯрзЗ, nums1-ржП Binary Search ржЪрж╛рж▓рж╛ржУред
ржпржжрж┐ ржкрж╛ржЗ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ржЗ ржкрзНрж░ржержо ржкрж╛ржУрзЯрж╛ common ржПржмржВ рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╣ржмрзЗ ржХрж╛рж░ржг array ржЯрж╛ sorted (ржЕрж▓рзНржкрждрзЗржЗ ржкрзЗрзЯрзЗ ржпрж╛ржмрзЛ)ред

ЁЯФ╣ Step 3: ржкрзНрж░ржержо common ржкрж╛ржУрзЯрж╛ ржорж╛рждрзНрж░ return ржХрж░рзЗ ржжрж╛ржУ, ржХрж╛рж░ржг ржПрж░ржкрж░рзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ржЧрзБрж▓рж╛ ржЖрж╕ржмрзЗред
тЬЕ рждрзЛржорж╛рж░ Solution:
рждрзБржорж┐ ржарж┐ржХ ржПржЗ ржЪрж┐ржирзНрждрж╛ржЯрж╛ржЗ Follow ржХрж░рзЗржЫрзЛред
nums2-ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржзрж░рзЗ ржзрж░рзЗ nums1-ржП Binary Search ржХрж░ржЫрзЛред

ЁЯФз рждрзЛржорж╛рж░ Code:
cpp
Copy
Edit
class Solution {
  bool BinarySearch(vector<int>& v, int target) {
    int low = 0;
    int high = v.size() - 1;
    while (low <= high) {
      int mid = low + (high - low) / 2;
      if (v[mid] < target) {
        low = mid + 1;
      } else if (v[mid] > target) {
        high = mid - 1;
      } else {
        return true; // ржорж┐рж▓рж▓рзЗ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ true
      }
    }
    return false; // ржирж╛ ржорж┐рж▓рж▓рзЗ false
  }

public:
  int getCommon(vector<int>& nums1, vector<int>& nums2) {
    for (int j = 0; j < nums2.size(); j++) {
      if (BinarySearch(nums1, nums2[j])) {
        return nums2[j]; // ржкрзНрж░ржержо common ржорж╛ржи return
      }
    }
    return -1; // ржХрж┐ржЫрзБ ржирж╛ ржорж┐рж▓рж▓рзЗ
  }
};
ЁЯзк Test Case ржжрж┐рзЯрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ (Bangla)
Test Case:
ini
Copy
Edit
nums1 = [1, 2, 3, 6]
nums2 = [2, 3, 4, 5]
Step-by-step:
nums2[0] = 2
тЖТ Binary Search ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗ nums1 = [1,2,3,6] ржПрж░ ржоржзрзНржпрзЗред
тЖТ mid = 2 тЖТ nums1[2] = 3 > 2 тЖТ high ржХржорзЗ ржпрж╛ржмрзЗ
тЖТ ржПрж░ржкрж░ mid = 0, nums1[0] = 1 < 2 тЖТ low ржмрзЗрзЬрзЗ ржпрж╛ржмрзЗ
тЖТ рждрж╛рж░ржкрж░ mid = 1, nums1[1] = 2 тЖТ ржорж┐рж▓рзЗржЫрзЗ! тЬЕ
тЖТ Return 2

тЬЕ Time Complexity:
Binary Search: O(log n)

Outer loop: O(m) (nums2 ржПрж░ size m)

Final Time: O(m * log n)
ржпрзЗржЦрж╛ржирзЗ m = nums2.size() ржПржмржВ n = nums1.size()

Full Code;
----------

class Solution 
{
bool BinarySearch(vector<int>&v,int target)
  {
    int low=0;
    int high=v.size()-1;
    int mid;
    bool find=false;
    while(low<=high)
    {
      mid=low+(high-low)/2;
      if(v[mid]<target)
      {
           low=mid+1;
      }
      if(v[mid]>target)
      {
           high=mid-1;
      }
     
      if(v[mid]==target)
      {
        find=true;
        break;
      }
    }
    return find;
  }
public:
    int getCommon(vector<int>& nums1, vector<int>& nums2) 
{
  int ans=-1;
        for(int j=0;j<nums2.size();j++)
      {

      
        if(BinarySearch(nums1,nums2[j]))
        {
          ans=nums2[j];
          break;
        }
      }
return ans;
    }
};
