ржЪрж▓рзБржи ржЖржорж░рж╛ ржирж┐ржЪрзЗрж░ ржХрзЛржбржЯрж╛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж┐ ржПржмржВ ржПржХржЯрж┐-ржПржХржЯрж┐ рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж┐ ржпрзЗржи ржнржмрж┐рж╖рзНржпрждрзЗ рждрзБржорж┐ ржжрзЗржЦрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЛ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗред

ЁЯФ╕ ржкрзНрж░рж╢рзНржиржЯрж┐ ржХрзА ржмрж▓ржЫрзЗ?

рждрзЛржорж╛ржХрзЗ рзз ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд рж╕ржм рж╕ржВржЦрзНржпрж╛ржХрзЗ рждрж╛ржжрзЗрж░ ржЕржВржХрзЗрж░ ржпрзЛржЧржлрж▓ (digit sum) ржЕржирзБржпрж╛ржпрж╝рзА ржЧрзНрж░рзБржк ржХрж░рждрзЗ рж╣ржмрзЗред рждрж╛рж░ржкрж░ ржжрзЗржЦрждрзЗ рж╣ржмрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпржХ ржЙржкрж╛ржжрж╛ржи (element) ржпрзЗрж╕ржм ржЧрзНрж░рзБржкрзЗ ржЖржЫрзЗ, рж╕рзЗржЗ рж░ржХржо ржХрзЯржЯрж┐ ржЧрзНрж░рзБржк ржЖржЫрзЗред

ЁЯФ╕ ржзрж░рж┐ n = 13
рждрж╛рж╣рж▓рзЗ рзз ржерзЗржХрзЗ рззрзй ржкрж░рзНржпржирзНржд рж╕ржВржЦрзНржпрж╛ржЧрзБрж▓рзЛ рж╣рж▓рзЛ:
[1, 2, 3, ..., 13]
ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ digit sum ржмрзЗрж░ ржХрж░ржмрзЛ ржпрзЗржоржи:

1 тЖТ 1

10 тЖТ 1

11 тЖТ 2

12 тЖТ 3

13 тЖТ 4
рждрж╛рж╣рж▓рзЗ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛ ржжрж╛ржБрзЬрж╛рзЯ:

[1, 10], [2, 11], [3, 12], [4, 13], [5], [6], [7], [8], [9]

ржкрзНрж░рждрж┐ржЯрж┐ ржЧрзНрж░рзБржкрзЗрж░ рж╕рж╛ржЗржЬ ржХржд?
[1,10]=2, [2,11]=2, [3,12]=2, [4,13]=2 ржмрж╛ржХрж┐ржЧрзБрж▓рзЛ 1 рж╕рж╛ржЗржЬрзЗрж░ред
рждрж╛рж╣рж▓рзЗ max group size = 2
ржПржоржи ржЧрзНрж░рзБржк ржХрзЯржЯрж╛ ржЖржЫрзЗ ржпрж╛рж░ рж╕рж╛ржЗржЬ 2? тЖТ 4ржЯрж┐

тЬЕ ржЙрждрзНрждрж░ = 4

ЁЯФН ржПржЦржи ржХрзЛржб ржПржХрзНрж╕ржкрзНрж▓рзЗржЗржи ржХрж░рж┐ рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржиржГ

int CalculateDigitSum(int x)
ЁЯСЙ ржПржЗ ржлрж╛ржВрж╢ржиржЯрж╛ ржХрзЛржирзЛ ржПржХржЯрж╛ ржирж╛ржорзНржмрж╛рж░рзЗрж░ digit sum ржмрзЗрж░ ржХрж░рзЗред ржпрзЗржоржи 12 рж╣рж▓рзЗ return ржХрж░ржмрзЗ 1+2 = 3ред

cpp
Copy
Edit
int sum=0;
while(x>0) {
    int rem=x%10;
    sum+=rem;
    x=x/10;
}
return sum;
ЁЯСЙ x ржХрзЗ 10 ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░рзЗ ржХрж░рзЗ ржкрзНрж░рждрж┐ржмрж╛рж░ ржПржХрзЗржХржЯрж╛ digit ржмрзЗрж░ ржХрж░рзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

for(int i=1;i<=n;i++) {
    int sum = CalculateDigitSum(i);
    freq[sum]++;
}
ЁЯСЙ рзз ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд рж╕ржм рж╕ржВржЦрзНржпрж╛рж░ digit sum ржмрзЗрж░ ржХрж░рзЗ ржорзНржпрж╛ржкрзЗ count ржмрж╛рзЬрж╛ржирзЛ рж╣ржЪрзНржЫрзЗред


int maxSize = 0;
for (auto& it : freq) {
    maxSize = max(maxSize, it.second);
}
ЁЯСЙ ржорзНржпрж╛ржк ржерзЗржХрзЗ ржЖржорж░рж╛ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржЧрзНрж░рзБржкрзЗрж░ рж╕рж╛ржЗржЬ ржмрзЗрж░ ржХрж░ржЫрж┐ (ржпрзЗржЯрж╛ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржмрж╛рж░ ржПрж╕рзЗржЫрзЗ)ред

t
vector<int> reserve;
for(auto it:freq) {
    reserve.push_back(it.second);
}
ЁЯСЙ frequency ржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ ржнрзЗржХрзНржЯрж░рзЗ рж░рж╛ржЦржЫрж┐ред

for(int k=0;k<reserve.size();k++) {
    if(reserve[k]==maxSize) {
        count++;
    }
}
ЁЯСЙ ржПржмрж╛рж░ reserve-ржП ржпрждржЧрзБрж▓рзЛ frequency ржЖржЫрзЗ ржпрзЗржЧрзБрж▓рзЛ maxSize ржПрж░ рж╕ржорж╛ржи, рж╕рзЗржЧрзБрж▓рзЛрж░ рж╕ржВржЦрзНржпрж╛ ржЧрзБржирзЗ count-ржП рж░рж╛ржЦржЫрж┐ред

тЬЕ Return:

return count;
ЁЯСЙ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпржХ ржЙржкрж╛ржжрж╛ржиржмрж┐рж╢рж┐рж╖рзНржЯ ржЧрзНрж░рзБржк ржХрзЯржЯрж┐ ржЖржЫрзЗ, рж╕рзЗржЗ рж╕ржВржЦрзНржпрж╛ржЯрж╛ржЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

ЁЯФН ржзрж░рзЛ Test Case: n = 2
1 тЖТ sum = 1

2 тЖТ sum = 2
2ржЯрж╛ ржнрж┐ржирзНржи ржЧрзНрж░рзБржк тЖТ size = 1
max group size = 1
ржХрзЯржЯрж╛ ржЧрзНрж░рзБржк ржЖржЫрзЗ ржпрж╛ржжрзЗрж░ size 1? тЖТ 2

тЬЕ Output = 2

ржирж┐рж╢рзНржЪрж┐ржд! рждрзЛржорж╛рж░ ржжрзЗржУрзЯрж╛ ржХрзЛржбржЯрж╛ ржПржмржВ рж╕ржорж╛ржзрж╛ржи ржкржжрзНржзрждрж┐ржЯрж╛ ржЖржорж┐ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░ржм, рждрзЛржорж╛рж░ ржЪрж┐ржирзНрждрж╛ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржХрзЗржоржи ржЫрж┐рж▓ рж╕рзЗржЯрж╛ржУ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░ржм, ржПржмржВ ржмрж╛ржВрж▓рж╛рзЯ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрж▓ржм ржпрж╛рждрзЗ ржнржмрж┐рж╖рзНржпрждрзЗ ржмрзБржЭрждрзЗ рж╕рзБржмрж┐ржзрж╛ рж╣рзЯред

рзз. ржкрзНрж░рж╢рзНржиржЯрж╛ ржХрзА ржмрзЛржЭрж╛ржЪрзНржЫрзЗ?
рждрзЛржорж╛ржХрзЗ рзз ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд рж╕ржВржЦрзНржпрж╛ржЧрзБрж▓рзЛржХрзЗ рждрж╛ржжрзЗрж░ digit sum (ржЕржВржХрзЗрж░ ржпрзЛржЧржлрж▓) ржЕржирзБржпрж╛рзЯрзА ржЧрзНрж░рзБржк ржХрж░рждрзЗ рж╣ржмрзЗред
ржЙржжрж╛рж╣рж░ржг:

14 ржПрж░ digit sum = 1+4=5

5 ржПрж░ digit sum = 5
рждрж╛рж╣рж▓рзЗ 14 ржЖрж░ 5 ржПржХржЗ ржЧрзНрж░рзБржкрзЗ ржпрж╛ржмрзЗред
ржХрж┐ржирзНрждрзБ 13 ржПрж░ digit sum = 4 ржЖрж░ 3 ржПрж░ digit sum = 3, рж╕рзЗржЬржирзНржп ржЖрж▓рж╛ржжрж╛ ржЧрзНрж░рзБржкрзЗред

рждрзБржорж┐ ржЬрж╛ржиржмрзЗ: ржХрзЛржи ржЧрзНрж░рзБржкржЧрзБрж▓рзЛ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ, ржЕрж░рзНржерж╛рзО рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ рж╕ржВржЦрзНржпржХ ржЙржкрж╛ржжрж╛ржи ржЖржЫрзЗ?
ржЖрж░ рж╕рзЗржЗ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛ ржХрждржЧрзБрж▓рзЛ?

рзи. рждрзБржорж┐ ржХрж┐ржнрж╛ржмрзЗ рж╕ржорж╛ржзрж╛ржи ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗржЫрзЛ?
ржкрзНрж░ржержорзЗ, ржпрзЗржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛рж░ digit sum ржмрзЗрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи рждрзИрж░рж┐ ржХрж░рзЗржЫрзЛ: CalculateDigitSum

рждрж╛рж░ржкрж░ рзз ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд рж╕ржм рж╕ржВржЦрзНржпрж╛рж░ digit sum ржмрзЗрж░ ржХрж░рзЗ рждрж╛рж░ frequency (ржЧржгржирж╛) рж░рж╛ржЦрждрзЗ ржПржХржЯрж╛ unordered_map ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЛред

ржорзНржпрж╛ржкрзЗрж░ key рж╣ржмрзЗ digit sum ржЖрж░ value рж╣ржмрзЗ рж╕рзЗржЗ digit sum ржПрж░ frequencyред

ржПрж░ржкрж░ ржорзНржпрж╛ржк ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ frequency ржмрзЗрж░ ржХрж░рзЗржЫрзЛ (maxSize), ржЕрж░рзНржерж╛рзО рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржЧрзНрж░рзБржкрзЗрж░ рж╕рж╛ржЗржЬред

рждрж╛рж░ржкрж░ ржжрзЗржЦрзЗржЫрзЛ ржХрзЯржЯрж┐ ржЧрзНрж░рзБржкрзЗрж░ рж╕рж╛ржЗржЬ рж╕рзЗржЗ maxSize ржПрж░ рж╕ржорж╛ржиред

рж╕ржмрж╢рзЗрж╖рзЗ рж╕рзЗржЗ рж╕ржВржЦрзНржпрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗржЫрзЛред

рзй. ржХрзЛржбрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЕржВрж╢рзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛
cpp
Copy
Edit
int CalculateDigitSum(int x) {
    int sum=0;
    while(x>0) {
        int rem = x % 10;
        sum += rem;
        x = x / 10;
    }
    return sum;
}
ржХрж┐ ржХрж░ржЫрзЗ?
ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛рж░ digit ржЧрзБрж▓рзЛ ржпрзЛржЧ ржХрж░рзЗ total sum ржмрзЗрж░ ржХрж░ржЫрзЗред

ржЙржжрж╛рж╣рж░ржг:
x=123 тЖТ sum=1+2+3=6

cpp
Copy
Edit
unordered_map<int,int> freq;
for(int i=1; i<=n; i++) {
    int sum = CalculateDigitSum(i);
    freq[sum]++;
}
рзз ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ digit sum ржмрзЗрж░ ржХрж░рзЗ freq ржорзНржпрж╛ржкрзЗ рж╕рзЗржЗ sum ржПрж░ рж╕ржВржЦрзНржпрж╛ ржПржХ ржХрж░рзЗ ржмрж╛рзЬрж╛ржЪрзНржЫрзЛред

ржПрж░ ржлрж▓рзЗ, map ржП digit sum ржХрждржмрж╛рж░ ржПрж╕рзЗржЫрзЗ рж╕рзЗржЯрж╛ ржерж╛ржХржмрзЗред

cpp
Copy
Edit
int maxSize = 0;
for (auto& it : freq) {
    maxSize = max(maxSize, it.second);
}
ржХрж┐ ржХрж░ржЫрзЗ?
ржорзНржпрж╛ржкрзЗрж░ value ржЧрзБрж▓рзЛ (group size ржЧрзБрж▓рзЛ) ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржорж╛ржи ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░ржЫрзЗред

ржЕрж░рзНржерж╛рзО, ржХрзЛржи digit sum ржПрж░ frequency рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ред

cpp
Copy
Edit
vector<int> reserve;
for(auto it: freq) {
    reserve.push_back(it.second);
}
рж╕ржорж╕рзНржд frequency ржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ ржнрзЗржХрзНржЯрж░рзЗ рж░рж╛ржЦржЫрзЗ ржпрж╛рждрзЗ ржкрж░рзЗ рж╕рзЗржЧрзБрж▓рзЛ ржЧрзБржирждрзЗ ржкрж╛рж░рзЗред

cpp
Copy
Edit
int count = 0;
for(int k=0; k<reserve.size(); k++) {
    if(reserve[k] == maxSize) {
        count++;
    }
}
return count;
рж╕ржм ржЧрзНрж░рзБржкрзЗрж░ frequency ржЪрзЗржХ ржХрж░рзЗ ржпрж╛рж░рж╛ maxSize ржПрж░ рж╕ржорж╛ржи, рждрж╛ржжрзЗрж░ рж╕ржВржЦрзНржпрж╛ ржЧрзБржиржЫрзЗред

ржПржЯрж╛ржЗ рж╣рж▓рзЛ рж╕рзЗржЗ ржЧрзНрж░рзБржкрзЗрж░ рж╕ржВржЦрзНржпрж╛ ржпрзЗржЧрзБрж▓рзЛрж░ рж╕рж╛ржЗржЬ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬред

рзк. Test case ржПрж░ ржорж╛ржзрзНржпржорзЗ ржмрзБржЭрзЗ ржирзЗржУрзЯрж╛
Test Case 1: n = 13
digit sums ржПржмржВ frequency (freq map) рж╣рждрзЗ ржкрж╛рж░рзЗ:

sum=1 тЖТ 1,10 тЖТ frequency = 2

sum=2 тЖТ 2,11 тЖТ frequency = 2

sum=3 тЖТ 3,12 тЖТ frequency = 2

sum=4 тЖТ 4,13 тЖТ frequency = 2

sum=5 тЖТ 5 тЖТ frequency = 1

sum=6 тЖТ 6 тЖТ frequency = 1

sum=7 тЖТ 7 тЖТ frequency = 1

sum=8 тЖТ 8 тЖТ frequency = 1

sum=9 тЖТ 9 тЖТ frequency = 1

max frequency = 2

frequency = 2 ржПрж░ ржЧрзНрж░рзБржк ржЖржЫрзЗ 4ржЯрж╛ тЖТ [1,10], [2,11], [3,12], [4,13]

рж╕рзБрждрж░рж╛ржВ ржЖржЙржЯржкрзБржЯ = 4 (ржпрзЗржоржи ржЪрж╛ржУрзЯрж╛ рж╣рзЯрзЗржЫрж┐рж▓)

Test Case 2: n = 2
sum=1 тЖТ [1] frequency=1

sum=2 тЖТ [2] frequency=1

max frequency = 1

frequency = 1 ржПрж░ ржЧрзНрж░рзБржк ржЖржЫрзЗ 2ржЯрж╛ тЖТ [1], [2]

ржЖржЙржЯржкрзБржЯ = 2

рзл. рждрзЛржорж╛рж░ ржЪрж┐ржирзНрждрж╛ржзрж╛рж░рж╛рж░ ржнрж╛рж▓рзЛ ржжрж┐ржХ
рждрзБржорж┐ ржмрзЬ рж╕ржорж╕рзНржпрж╛ ржЫрзЛржЯ ржЫрзЛржЯ ржЯрзБржХрж░рзЛ ржХрж░рзЗ ржирж┐рзЯрзЗржЫрзЛ (digit sum ржмрзЗрж░ ржХрж░рж╛, frequency ржЧрзЛржирж╛, max frequency ржмрзЗрж░ ржХрж░рж╛, ржЧржгржирж╛ ржХрж░рж╛)

ржПржХржЯрж┐ ржорж╛ржиржЪрж┐рждрзНрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ frequency рж╣рж┐рж╕рж╛ржм ржХрж░рзЗржЫрзЛ ржпрзЗржЯрж╛ ржЦрзБржмржЗ ржЙржкржпрзЛржЧрзА

ржХрзЛржбржЯрж╛ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржПржмржВ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ, рж╕рж╣ржЬрзЗржЗ ржбрж┐ржмрж╛ржЧ ржХрж░рж╛ ржпрж╛рзЯ

рзм. рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж╕рж╛рж░ржорж░рзНржо (Bangla):
рзз ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ digit sum ржмрзЗрж░ ржХрж░рзЛ

sum ржПрж░ frequency рж░рж╛ржЦрзЛ ржорзНржпрж╛ржкрзЗ

ржорзНржпрж╛ржк ржерзЗржХрзЗ max frequency ржмрзЗрж░ ржХрж░рзЛ

max frequency ржПрж░ рж╕ржорж╛ржи ржХрзЯржЯрж┐ group ржЖржЫрзЗ рждрж╛ ржЧрзЛржирзЛ

рж╕рзЗржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ
Full Code:
----------
  #include<vector>
#include<iostream>
using namespace std;
class Solution
 {
public:
  int CalculateDigitSum(int x)
  {
    int sum=0;
    while(x>0)
    {
        int rem=x%10;
        sum+=rem;
        x=x/10;
    }
   return sum;
  }
   bool check(int a,int b)
   {
       bool isequal=false;
       if(CalculateDigitSum(a)==CalculateDigitSum(b))
       {
        isequal=true;
       }
       return isequal;
   }
   int findmax(vector<int> &arr)
   {
    int max=arr[0];
    for(int j=1;j<arr.size();j++)
    {
        if(arr[j]>max)
        {
            max=arr[j];
        }
    }
    return max;
   }
   
       int countLargestGroup(int n)
       {
             int count=0;
             unordered_map<int,int>freq;
             for(int i=1;i<=n;i++)
             {
               
               int sum=CalculateDigitSum(i);
               freq[sum]++;
             }
             vector<int>reserve;
                 int maxSize = 0;
        for (auto& it : freq) 
        {
            maxSize = max(maxSize, it.second);
        }

             for(auto it:freq)
             {
                reserve.push_back(it.second);
             }
             
              if (reserve.size() == 0) return 0;
             for(int k=0;k<reserve.size();k++)
             {
                if(reserve[k]==maxSize)
                {
                    count++;
                }
             }
   return count;
       }
    
};
