 ‡¶¨‡ßã‡¶ù‡¶æ (Understanding the Problem)

‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ n ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶Æ‡¶® ‡¶∏‡¶¨ ‡¶ú‡ßã‡ßú‡¶æ [x, y] ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá:

1. 


2. 


3.  ‡¶è‡¶¨‡¶Ç  ‡¶â‡¶≠‡ßü‡¶á prime number (‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ) ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§



‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

n = 10 ‡¶π‡¶≤‡ßá:

‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶ú‡ßã‡ßú‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã: [2, 8], [3, 7], [4, 6], [5, 5]

‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ [3,7] ‡¶è‡¶¨‡¶Ç [5,5] ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‚Äî ‡¶§‡¶æ‡¶á Output ‡¶π‡¶¨‡ßá: [[3,7],[5,5]].




---

‚úÖ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ‡¶ß‡¶æ‡¶∞‡¶æ (Thinking Approach)

1. ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ x ‚â§ y ‡¶è‡¶¨‡¶Ç x + y = n

‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ x + y = n, ‡¶è‡¶¨‡¶Ç x ‚â§ y, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶Ü‡¶Æ‡¶∞‡¶æ x = n/2 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‡¶ï‡¶æ‡¶∞‡¶£ ‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá x ‡¶¨‡ßú ‡¶π‡¶≤‡ßá y = n - x ‡¶õ‡ßã‡¶ü ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç x > y ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‚Äî ‡¶Ø‡¶æ ‡¶∂‡¶∞‡ßç‡¶§‡ßá ‡¶Æ‡¶æ‡¶®‡¶æ‡¶®‡¶∏‡¶á ‡¶®‡¶æ‡•§


2. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø x ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:

y = n - x ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡ßã

‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã x ‡¶è‡¶¨‡¶Ç y ‡¶â‡¶≠‡ßü‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ï‡¶ø‡¶®‡¶æ

‡¶Ø‡¶¶‡¶ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ú‡ßã‡ßú‡¶æ‡¶ü‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßã



---

‚úÖ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶•‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¶‡¶ø‡¶ï (Mathematical Insight)

Prime Number Test:

‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ n ‡¶è‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá:

‡¶Ø‡¶¶‡¶ø n < 2, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ

2 ‡¶•‡ßá‡¶ï‡ßá sqrt(n) ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø, ‡¶Ø‡¶¶‡¶ø n ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ú‡ßç‡¶Ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ

‡¶è‡¶ü‡¶æ‡¶á ‡¶ï‡ßã‡¶°‡ßá for (int i = 2; i * i <= n; i++) ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá



---

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ C++ ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Line by Line Explanation)

class Solution
{
public:
    bool TestPrime(int n)
    {
        if(n < 2) return false;         // ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡ß® ‡¶è‡¶∞ ‡¶ï‡¶Æ, ‡¶§‡¶æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ
        bool test = true;
        for(int i = 2; i * i <= n; i++) // ‡ß® ‡¶•‡ßá‡¶ï‡ßá sqrt(n) ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶≤‡ßÅ‡¶™
        {
            if(n % i == 0)              // ‡¶Ø‡¶¶‡¶ø n ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶ó ‡¶Ø‡¶æ‡ßü
            {
                test = false;           // ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ
                break;
            }
        }
        return test;                    // ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶π‡¶≤‡ßá true ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡ßü
    }

    vector<vector<int>> findPrimePairs(int n)
    {
        vector<vector<int>> v;
        for(int i = 2; i <= n/2; i++)   // x ‡¶ï‡ßá ‡ß® ‡¶•‡ßá‡¶ï‡ßá n/2 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø
        {
            int a = i;
            int b = n - i;             // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ a + b = n
            if(TestPrime(a) && TestPrime(b)) // ‡¶Ø‡¶¶‡¶ø a ‡¶è‡¶¨‡¶Ç b ‡¶â‡¶≠‡ßü‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶π‡ßü
            {
                v.push_back({a, b});   // ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶ú‡ßã‡ßú‡¶æ‡¶ü‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßã
            }
        }
        return v;
    }
};


---

‚úÖ Test Case ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ

üîπTest Case 1: n = 10

Loop: i = 2 ‡¶•‡ßá‡¶ï‡ßá 5 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§
‡¶ö‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶ø:

i = 2 ‚Üí a = 2, b = 8 ‚Üí 2 ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ, 8 ‡¶®‡¶æ ‚Üí ‡¶¨‡¶æ‡¶¶

i = 3 ‚Üí a = 3, b = 7 ‚Üí ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‚úÖ ‚Üí ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°: [3,7]

i = 4 ‚Üí a = 4, b = 6 ‚Üí 4 ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ ‚Üí ‡¶¨‡¶æ‡¶¶

i = 5 ‚Üí a = 5, b = 5 ‚Üí ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‚úÖ ‚Üí ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°: [5,5]


Final Output: [[3,7],[5,5]]

üîπTest Case 2: n = 2

Loop: i = 2 to n/2 = 1 ‚Üí No loop executes ‚Üí return []


---

‚úÖ Time Complexity ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£

‡¶¨‡¶æ‡¶á‡¶∞‡ßá‡¶∞ ‡¶≤‡ßÅ‡¶™ O(n/2)

‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï ‡¶á‡¶ü‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü ‡¶Ø‡¶æ O(‚àön)

‡¶§‡¶æ‡¶á ‡¶Æ‡ßã‡¶ü time complexity: O(n * ‚àön)



---

‚úÖ ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞ (Conclusion)

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßú‡ßá‡¶á ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‚Äî ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ x + y = n, ‡¶§‡¶æ‡¶á ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ß‡¶∞‡¶≤‡ßá‡¶á ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

‡¶è‡¶∞‡¶™‡¶∞ x ‚â§ y ‡¶¨‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ x ‡¶ï‡ßá n/2 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß ‡¶ï‡¶∞‡¶ø‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø (x, y) ‡¶ú‡ßã‡ßú‡¶æ‡ßü ‡¶¶‡ßÅ‡¶ü‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶ø‡•§

‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶∞‡¶æ square root ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶≠‡¶æ‡¶ó ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶ø‡•§

‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶™‡ßá‡ßü‡¶æ‡¶∞ ‡¶™‡ßá‡¶≤‡ßá‡¶á return ‡¶ï‡¶∞‡¶ø‡•§

Full Code:
-----------


 ‡¶¨‡ßã‡¶ù‡¶æ (Understanding the Problem)

‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ n ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶Æ‡¶® ‡¶∏‡¶¨ ‡¶ú‡ßã‡ßú‡¶æ [x, y] ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá:

1. 


2. 


3.  ‡¶è‡¶¨‡¶Ç  ‡¶â‡¶≠‡ßü‡¶á prime number (‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ) ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§



‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

n = 10 ‡¶π‡¶≤‡ßá:

‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶ú‡ßã‡ßú‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã: [2, 8], [3, 7], [4, 6], [5, 5]

‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ [3,7] ‡¶è‡¶¨‡¶Ç [5,5] ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‚Äî ‡¶§‡¶æ‡¶á Output ‡¶π‡¶¨‡ßá: [[3,7],[5,5]].




---

‚úÖ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ‡¶ß‡¶æ‡¶∞‡¶æ (Thinking Approach)

1. ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ x ‚â§ y ‡¶è‡¶¨‡¶Ç x + y = n

‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ x + y = n, ‡¶è‡¶¨‡¶Ç x ‚â§ y, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶Ü‡¶Æ‡¶∞‡¶æ x = n/2 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‡¶ï‡¶æ‡¶∞‡¶£ ‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá x ‡¶¨‡ßú ‡¶π‡¶≤‡ßá y = n - x ‡¶õ‡ßã‡¶ü ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç x > y ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‚Äî ‡¶Ø‡¶æ ‡¶∂‡¶∞‡ßç‡¶§‡ßá ‡¶Æ‡¶æ‡¶®‡¶æ‡¶®‡¶∏‡¶á ‡¶®‡¶æ‡•§


2. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø x ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:

y = n - x ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡ßã

‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã x ‡¶è‡¶¨‡¶Ç y ‡¶â‡¶≠‡ßü‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ï‡¶ø‡¶®‡¶æ

‡¶Ø‡¶¶‡¶ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ú‡ßã‡ßú‡¶æ‡¶ü‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßã



---

‚úÖ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶•‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶¶‡¶ø‡¶ï (Mathematical Insight)

Prime Number Test:

‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ n ‡¶è‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá:

‡¶Ø‡¶¶‡¶ø n < 2, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ

2 ‡¶•‡ßá‡¶ï‡ßá sqrt(n) ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø, ‡¶Ø‡¶¶‡¶ø n ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ú‡ßç‡¶Ø ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ

‡¶è‡¶ü‡¶æ‡¶á ‡¶ï‡ßã‡¶°‡ßá for (int i = 2; i * i <= n; i++) ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá



---

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ C++ ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (Line by Line Explanation)

class Solution
{
public:
    bool TestPrime(int n)
    {
        if(n < 2) return false;         // ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡ß® ‡¶è‡¶∞ ‡¶ï‡¶Æ, ‡¶§‡¶æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ
        bool test = true;
        for(int i = 2; i * i <= n; i++) // ‡ß® ‡¶•‡ßá‡¶ï‡ßá sqrt(n) ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶≤‡ßÅ‡¶™
        {
            if(n % i == 0)              // ‡¶Ø‡¶¶‡¶ø n ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶ó ‡¶Ø‡¶æ‡ßü
            {
                test = false;           // ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ
                break;
            }
        }
        return test;                    // ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶π‡¶≤‡ßá true ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡ßü
    }

    vector<vector<int>> findPrimePairs(int n)
    {
        vector<vector<int>> v;
        for(int i = 2; i <= n/2; i++)   // x ‡¶ï‡ßá ‡ß® ‡¶•‡ßá‡¶ï‡ßá n/2 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø
        {
            int a = i;
            int b = n - i;             // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ a + b = n
            if(TestPrime(a) && TestPrime(b)) // ‡¶Ø‡¶¶‡¶ø a ‡¶è‡¶¨‡¶Ç b ‡¶â‡¶≠‡ßü‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶π‡ßü
            {
                v.push_back({a, b});   // ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶ú‡ßã‡ßú‡¶æ‡¶ü‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßã
            }
        }
        return v;
    }
};


---

‚úÖ Test Case ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ

üîπTest Case 1: n = 10

Loop: i = 2 ‡¶•‡ßá‡¶ï‡ßá 5 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§
‡¶ö‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶ø:

i = 2 ‚Üí a = 2, b = 8 ‚Üí 2 ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ, 8 ‡¶®‡¶æ ‚Üí ‡¶¨‡¶æ‡¶¶

i = 3 ‚Üí a = 3, b = 7 ‚Üí ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‚úÖ ‚Üí ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°: [3,7]

i = 4 ‚Üí a = 4, b = 6 ‚Üí 4 ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶®‡¶æ ‚Üí ‡¶¨‡¶æ‡¶¶

i = 5 ‚Üí a = 5, b = 5 ‚Üí ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‚úÖ ‚Üí ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°: [5,5]


Final Output: [[3,7],[5,5]]

üîπTest Case 2: n = 2

Loop: i = 2 to n/2 = 1 ‚Üí No loop executes ‚Üí return []


---

‚úÖ Time Complexity ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£

‡¶¨‡¶æ‡¶á‡¶∞‡ßá‡¶∞ ‡¶≤‡ßÅ‡¶™ O(n/2)

‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï ‡¶á‡¶ü‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü ‡¶Ø‡¶æ O(‚àön)

‡¶§‡¶æ‡¶á ‡¶Æ‡ßã‡¶ü time complexity: O(n * ‚àön)



---

‚úÖ ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞ (Conclusion)

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßú‡ßá‡¶á ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‚Äî ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ x + y = n, ‡¶§‡¶æ‡¶á ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ß‡¶∞‡¶≤‡ßá‡¶á ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

‡¶è‡¶∞‡¶™‡¶∞ x ‚â§ y ‡¶¨‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ x ‡¶ï‡ßá n/2 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß ‡¶ï‡¶∞‡¶ø‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø (x, y) ‡¶ú‡ßã‡ßú‡¶æ‡ßü ‡¶¶‡ßÅ‡¶ü‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶ø‡•§

‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶∞‡¶æ square root ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶≠‡¶æ‡¶ó ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶ø‡•§

‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶Æ ‡¶™‡ßá‡ßü‡¶æ‡¶∞ ‡¶™‡ßá‡¶≤‡ßá‡¶á return ‡¶ï‡¶∞‡¶ø‡•§

