üîç ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¨‡ßã‡¶ù‡¶æ (Mathematical Analysis):

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶ú‡¶æ‡¶∞ nums ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã:

‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø (third distinct maximum) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ‡•§

‡¶Ø‡¶¶‡¶ø ‡¶§‡¶ø‡¶®‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§



---

üß† ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶¨?

1. ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡¶æ‡¶á ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§


2. ‡¶∏‡ßá‡¶á ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßú ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡ßã‡¶ü ‡¶ï‡ßç‡¶∞‡¶Æ‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§


3. ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ:

‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§

‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§





---

üßÆ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡ßÅ‡¶ù‡¶ø:

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ 1:

Input: [3, 2, 1]
‚Üí Distinct values: [3, 2, 1]
‚Üí Sorted descending: [3, 2, 1]
‚Üí Third max = 1 ‚úÖ

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ 2:

Input: [1, 2]
‚Üí Distinct values: [2, 1]
‚Üí Third max doesn't exist ‚áí return max = 2 ‚úÖ

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ 3:

Input: [2, 2, 3, 1]
‚Üí Distinct values: [3, 2, 1]
‚Üí Third max = 1 ‚úÖ


---

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï (Accepted):

class Solution {
public:
    int findmax(vector<int>& nums)
    {
        int max = nums[0];
        for(int j = 1; j < nums.size(); j++)
        {
            if(nums[j] > max)
            {
                max = nums[j];
            }
        }
        return max;
    }

    int thirdMax(vector<int>& nums) {
        vector<int>v;
        unordered_map<int,int>freq;
        int ans;

        // Step 1: Frequency map ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶
        for(int i = 0; i < nums.size(); i++)
        {
            freq[nums[i]]++;
        }

        // Step 2: ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã vector-‡¶è ‡¶§‡ßã‡¶≤‡¶æ
        for(auto it : freq)
        {
            v.push_back(it.first);
        }

        // Step 3: ‡¶¨‡ßú ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡ßã‡¶ü ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
        sort(v.begin(), v.end());
        reverse(v.begin(), v.end());

        // Step 4: ‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ
        if(v.size() >= 3)
        {
            ans = v[2];
        }
        else
        {
            ans = findmax(v);
        }

        return ans;
    }
};


---

üîç Bangla Line-by-Line Explanation:

int findmax(vector<int>& nums)

‚û§ nums ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ü‡¶ø‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡•§

int max = nums[0];

‚û§ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶á ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶á ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú‡•§

for(int j = 1; j < nums.size(); j++)

‚û§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ü‡¶ø‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ò‡ßÅ‡¶∞‡¶ø‡•§

if(nums[j] > max) max = nums[j];

‚û§ ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡ßú ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá‡¶á ‡¶®‡¶§‡ßÅ‡¶® max ‡¶ß‡¶∞‡¶ø‡•§


---

unordered_map<int,int> freq;

‚û§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶®‡ßá‡¶á, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ frequency ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü‡•§ ‡¶è‡¶§‡ßá ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶∏‡¶π‡¶ú‡ßá ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

for(int i = 0; i < nums.size(); i++) freq[nums[i]]++;

‚û§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø count ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

for(auto it : freq) v.push_back(it.first);

‚û§ ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ unique ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã v ‡¶§‡ßá ‡¶§‡ßã‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

sort(v.begin(), v.end());
reverse(v.begin(), v.end());

‚û§ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßú ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡ßã‡¶ü ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã‡•§

if(v.size() >= 3) ans = v[2];

‚û§ ‡¶Ø‡¶¶‡¶ø ‡ß© ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßÉ‡¶§‡ßÄ‡ßü‡¶ü‡¶ø return ‡¶ï‡¶∞‡¶¨ (index 2)‡•§

else ans = findmax(v);

‚û§ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá v-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø return ‡¶ï‡¶∞‡¶¨‡•§


---

üß™ Test Case by Test Case ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:

Test Case: [3,2,1]

freq: {1:1, 2:1, 3:1}

v: [3,2,1]

v[2] = 1 ‚Üí ‚úÖ


Test Case: [1,2]

freq: {1:1, 2:1}

v: [2,1]

v.size() < 3 ‚Üí return max(v) = 2 ‚Üí ‚úÖ


Test Case: [2,2,3,1]

freq: {1:1, 2:2, 3:1}

v: [3,2,1]

v[2] = 1 ‚Üí ‚úÖ



---

‚úÖ Time Complexity:

Map ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡ßü: O(n)

Unique ‡¶ó‡ßÅ‡¶≤‡ßã sort + reverse ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡ßü: O(k log k) ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá k = unique values ‚â§ n

Final Complexity: O(n log n) (worst case), ‡¶§‡¶¨‡ßá accepted ‚úÖ

  Full Code:
---------------

  class Solution 
{
public:
    int findmax(vector<int>& nums)
    {
        int max =nums[0];
        for(int j=1;j<nums.size();j++)
            {
                if(nums[j]>max)
                {
                    max=nums[j];
                }
            }
        return max;
    }

    int thirdMax(vector<int>& nums) {
        vector<int>v;
        unordered_map<int,int>freq;
        int ans;
        for(int i=0;i<nums.size();i++)
            {
                freq[nums[i]]++;
            }
        for(auto it:freq)
            {
                v.push_back(it.first);
            }
        sort(v.begin(),v.end());
        reverse(v.begin(),v.end());
        if(v.size()>=3)
        {
            ans= v[2];
        }
        if(v.size()<3)
        {
            ans=findmax(v);
        }
        return ans;
    }
};
