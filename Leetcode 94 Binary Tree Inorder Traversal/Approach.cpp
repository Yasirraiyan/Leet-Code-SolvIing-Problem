1я╕ПтГг ржкрзНрж░ржержорзЗ ржкрзНрж░рж╢рзНржиржЯрж╛ ржкржбрж╝рзЗ ржХрзАржнрж╛ржмрзЗ рж╕ржорж╛ржзрж╛ржи ржнрж╛ржмрждрзЗ рж╣ржмрзЗ

ржкрзНрж░рж╢рзНржи ржмрж▓ржЫрзЗ:

ржЖржорж╛ржжрзЗрж░ ржПржХржЯрж╛ binary tree ржжрзЗржУржпрж╝рж╛ ржЖржЫрзЗ

ржЖржорж╛ржжрзЗрж░ inorder traversal ржХрж░рждрзЗ рж╣ржмрзЗ, ржЖрж░ node-ржПрж░ value ржЧрзБрж▓рзЛржХрзЗ ржПржХржЯрж╛ array/list ржЖржХрж╛рж░рзЗ ржлрзЗрж░ржд ржжрж┐рждрзЗ рж╣ржмрзЗред


ЁЯФ╣ Inorder Traversal ржХрзА?

Mathematically ржПржмржВ definition ржЕржирзБржпрж╛ржпрж╝рзА тАФ Inorder Traversal = Left тЖТ Root тЖТ Right
ржорж╛ржирзЗ:

1. ржкрзНрж░ржержорзЗ Left Subtree traverse ржХрж░рждрзЗ рж╣ржмрзЗ


2. рждрж╛рж░ржкрж░ Current Node (root) ржПрж░ value ржирж┐рждрзЗ рж╣ржмрзЗ


3. рж╢рзЗрж╖рзЗ Right Subtree traverse ржХрж░рждрзЗ рж╣ржмрзЗ



ЁЯУМ ржЙржжрж╛рж╣рж░ржг:

1
        \
         2
        /
       3

Inorder: Left(1) тЖТ Root(1) тЖТ Right(2 ржПрж░ Left subtree), рждрж╛рж░ржкрж░ Root(2) тЖТ Right(2 ржПрж░ Right subtree)

Output рж╣ржмрзЗ: [1, 3, 2]



---

2я╕ПтГг рждрзЛржорж╛рж░ ржХрзЛржбрзЗ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛

class Solution 
{
public:
    void inorder(TreeNode* root, vector<TreeNode*>& v)
    {
        if(root == nullptr) return;

ЁЯТб ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЦрж╛ржирзЗ ржПржХржЯрж╛ helper function ржмрж╛ржирж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ inorder ржирж╛ржорзЗ, ржпрзЗржЯрж╛ recursion ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзБрж░рзЛ tree traverse ржХрж░ржмрзЗред

if(root == nullptr) return; тАФ ржпржжрж┐ current node ржлрж╛ржБржХрж╛ рж╣ржпрж╝ (null), рждрж╛рж╣рж▓рзЗ ржХрж┐ржЫрзБржЗ ржХрж░рж╛рж░ ржжрж░ржХрж╛рж░ ржирзЗржЗ, ржлрж┐рж░рзЗ ржпрж╛ржУ (recursion base case)ред



---

if(root->left != nullptr) inorder(root->left, v);

ЁЯТб ржмрзНржпрж╛ржЦрзНржпрж╛:

Left subtree ржЖржЧрзЗ traverse ржХрж░рзЛ, ржХрж╛рж░ржг inorder-ржПрж░ ржкрзНрж░ржержо ржзрж╛ржкржЗ Leftред

ржпржжрж┐ root-ржПрж░ left child ржерж╛ржХрзЗ, рждржЦржи recursive ржнрж╛ржмрзЗ рждрж╛рж░ ржЙржкрж░ inorder ржХрж▓ ржХрж░рзЛред



---

v.push_back(root);

ЁЯТб ржмрзНржпрж╛ржЦрзНржпрж╛:

Left traversal рж╢рзЗрж╖ рж╣рж▓рзЗ current root node vector-ржП ржпрзЛржЧ ржХрж░рзЛред

ржПржЦрж╛ржирзЗ ржкрзБрж░рзЛ TreeNode* (pointer) ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ, value ржиржпрж╝ тАФ ржХрж╛рж░ржг ржкрж░рзЗ value ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржмрзЗрж░ ржХрж░рж╛ рж╣ржмрзЗред



---

if(root->right != nullptr) inorder(root->right, v);

ЁЯТб ржмрзНржпрж╛ржЦрзНржпрж╛:

рж╢рзЗрж╖рзЗ Right subtree traverse ржХрж░рзЛ, ржХрж╛рж░ржг inorder-ржПрж░ рждрзГрждрзАржпрж╝ ржзрж╛ржк Rightред



---

}

тЬЕ ржПрждржЯрзБржХрзБржЗ recursion logic тАФ Base case + Left тЖТ Root тЖТ Rightред


---

vector<int> inorderTraversal(TreeNode* root) 
    {
        vector<TreeNode*> v;
        inorder(root, v);

ЁЯТб ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЦрж╛ржирзЗ ржПржХржЯрж╛ ржЦрж╛рж▓рж┐ vector v ржмрж╛ржирж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ, ржпрзЗржЯрж╛рждрзЗ TreeNode* ржЧрзБрж▓рзЛ ржЬржорж╛ рж╣ржмрзЗ inorder ржХрзНрж░ржорзЗред

рждрж╛рж░ржкрж░ helper function inorder ржХрж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ root-ржПрж░ ржЙржкрж░ред



---

vector<int> ans;
        for(int i = 0; i < v.size(); i++)
        {
            if(v[i] != nullptr)
            {
                ans.push_back(v[i]->val);
            }
        }

ЁЯТб ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЦрж╛ржирзЗ ans ржирж╛ржорзЗрж░ ржирждрзБржи vector ржмрж╛ржирж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ ржпрж╛рждрзЗ рж╢рзБржзрзБ node-ржПрж░ value рж░рж╛ржЦрж╛ рж╣ржмрзЗред

v[i] != nullptr ржЪрзЗржХ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЬржирзНржп (ржпржжрж┐ржУ ржЖржорж╛ржжрзЗрж░ recursion logic-ржП null ржЖрж╕ржмрзЗ ржирж╛)ред

рждрж╛рж░ржкрж░ node-ржПрж░ value (v[i]->val) ans ржП ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред



---

return ans;
    }
};

ЁЯТб ржмрзНржпрж╛ржЦрзНржпрж╛:

рж╕ржм value ржпрзБржХрзНржд рж╣ржУржпрж╝рж╛рж░ ржкрж░ ans return ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ тАФ ржПржЯрж╛ржЗ final outputред



---

3я╕ПтГг Testcase ржЕржирзБржпрж╛ржпрж╝рзА ржХрзЛржб ржХрж╛ржЬ ржХрж░рж╛рж░ ржмрзНржпрж╛ржЦрзНржпрж╛

Example 1:

root = [1,null,2,3]

Tree:
   1
    \
     2
    /
   3

Traversal:

1. Left(1) тЖТ ржХрж┐ржЫрзБ ржирзЗржЗ


2. Root(1) тЖТ 1 ржпрзЛржЧ


3. Right(2):

Left(3) тЖТ 3 ржпрзЛржЧ

Root(2) тЖТ 2 ржпрзЛржЧ
Final Output = [1, 3, 2] тЬЕ





---

Example 2:

root = [1,2,3,4,5,null,8,null,null,6,7,9]

Tree structure ржЕржирзБрж╕рж╛рж░рзЗ traversal рж╣ржмрзЗ:

Left subtree: 4, 2, 6, 5, 7

Root(1)

Right subtree: 3, 9, 8 Output = [4, 2, 6, 5, 7, 1, 3, 9, 8] тЬЕ



---

4я╕ПтГг Mathematical recursion flow

Inorder(root):

Inorder(left subtree)
Visit root
Inorder(right subtree)

Recursion Tree (Example 1-ржПрж░ ржЬржирзНржп):

inorder(1)
 тФЬтФА inorder(null)  // ржХрж┐ржЫрзБржЗ ржирж╛
 тФЬтФА visit(1)
 тФФтФА inorder(2)
     тФЬтФА inorder(3)
     тФВ   тФЬтФА inorder(null)
     тФВ   тФЬтФА visit(3)
     тФВ   тФФтФА inorder(null)
     тФЬтФА visit(2)
     тФФтФА inorder(null)

Output order: 1, 3, 2


---

5я╕ПтГг ржХрзЗржи ржПржЗ ржХрзЛржб accepted рж╣ржпрж╝рзЗржЫрзЗ?

Recursion ржарж┐ржХржорждрзЛ inorder rule (Left тЖТ Root тЖТ Right) ржЕржирзБрж╕рж╛рж░рзЗ рж▓рзЗржЦрж╛ рж╣ржпрж╝рзЗржЫрзЗред

Base case ржарж┐ржХ ржЖржЫрзЗ (if(root == nullptr) return;)

рж╕ржм node visit рж╣ржЪрзНржЫрзЗ ржПржХржмрж╛рж░ржЗ тЖТ Time Complexity: O(n)

ржЕрждрж┐рж░рж┐ржХрзНржд vector ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ value store ржХрж░рж╛рж░ ржЬржирзНржп тЖТ Space Complexity: O(n)

Full Code:
------------

class Solution 
{
public:
    void inorder(TreeNode* root,vector<TreeNode*>&v)
    {
        if(root==nullptr) return;
        if(root->left!=nullptr) inorder(root->left,v);
        v.push_back(root);
        if(root->right!=nullptr) inorder(root->right,v);
    }
    vector<int> inorderTraversal(TreeNode* root) 
    {
        vector<TreeNode*>v;
        inorder(root,v);
        vector<int>ans;
        for(int i=0;i<v.size();i++)
            {
                if(v[i]!=nullptr)
                {
            
        ans.push_back(v[i]->val);
                }
            }
        return ans;
    }
};
