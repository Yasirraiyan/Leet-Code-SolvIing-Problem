рждрзБржорж┐ ржпрзЗ ржХрзЛржбржЯрж┐ рж▓рж┐ржЦрзЗржЫрзЛ рж╕рзЗржЯрж╛ рж╣рж▓рзЛ Binary Search Algorithm ржПрж░ ржХрзНрж▓рж╛рж╕рж┐ржХ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯрзЗрж╢ржи, ржПржмржВ ржПржЯрж╛ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред ржирж┐ржЪрзЗ ржЖржорж┐ line-by-line Bangla explanation ржжрж┐ржмрзЛ, рж╕рж╛ржерзЗ ржЧрж╛ржгрж┐рждрж┐ржХ ржмрзНржпрж╛ржЦрзНржпрж╛, ржЙржжрж╛рж╣рж░ржг, ржПржмржВ ржХрзЗржи low = mid + 1 ржПржмржВ high = mid - 1 рж╣рзЯ рждрж╛рж░ ржмрзНржпрж╛ржЦрзНржпрж╛ржУ ржжрж┐ржмрзЛред

ЁЯФв ржХрзЛржбржГ
cpp
Copy
Edit
class Solution 
{
public: 
    int search(vector<int>& nums, int target) 
    {
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            if(nums[mid]<target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return -1;
    }
};
ЁЯУШ Line-by-Line Bangla Explanation:
ЁЯФ╣ int low=0;
ЁЯФ╕ ржЦрзЛржБржЬ рж╢рзБрж░рзБ рж╣ржмрзЗ ржЕрзНржпрж╛рж░рзЗрж░ рж╢рзБрж░рзБ ржерзЗржХрзЗ, рждрж╛ржЗ low рж░рж╛ржЦрж▓рж╛ржо 0-рждрзЗред

ЁЯФ╣ int high=nums.size()-1;
ЁЯФ╕ ржЦрзЛржБржЬ рж╢рзЗрж╖ рж╣ржмрзЗ ржЕрзНржпрж╛рж░рзЗрж░ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд, рждрж╛ржЗ high рж░рж╛ржЦрж▓рж╛ржо size - 1 (ржпрзЗрж╣рзЗрждрзБ index 0 ржерзЗржХрзЗ рж╢рзБрж░рзБ рж╣рзЯ)ред

ЁЯФД while(low<=high)
ЁЯФ╕ ржпрждржХрзНрж╖ржг low ржПржмржВ high ржПрж░ ржорж╛ржЭрзЗ ржЦрзЛржБржЬрж╛рж░ ржЬрж╛рзЯржЧрж╛ ржЖржЫрзЗ, ржЦрзЛржБржЬрж╛ ржЪрж▓ржмрзЗред
ЁЯФ╕ ржпржЦржи low > high рж╣рзЯрзЗ ржпрж╛ржмрзЗ, рждржЦржи ржмрзБржЭржмрзЛ ржЦрзЛржБржЬрж╛рж░ ржЬрж╛рзЯржЧрж╛ рж╢рзЗрж╖ тАФ ржорж╛ржирзЗ target ржирж╛ржЗред

ЁЯФ╣ int mid=low+(high-low)/2;
ЁЯФ╕ ржПржЯрж╛ рж╣рж▓рзЛ ржорж╛ржЭржЦрж╛ржирзЗрж░ ржЗржиржбрзЗржХрзНрж╕ ржмрзЗрж░ ржХрж░рж╛рж░ ржЙржкрж╛рзЯред
ЁЯФ╕ ржпржжрж┐ low = 2 ржПржмржВ high = 6 рж╣рзЯ,

ini
Copy
Edit
mid = 2 + (6 - 2)/2 = 2 + 4/2 = 4
ЁЯФ╕ ржХрзЗржи low + (high - low)/2?
тЮбя╕П ржХрж╛рж░ржг ржпржжрж┐ low ржЖрж░ high ржЕржирзЗржХ ржмрзЬ рж╕ржВржЦрзНржпрж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ low + high ржХрж░рж▓рзЗ overflow рж╣рждрзЗ ржкрж╛рж░рзЗред

ЁЯФ╣ if(nums[mid]==target)
ЁЯФ╕ ржпржжрж┐ ржорж╛ржЭржЦрж╛ржирзЗ ржерж╛ржХрж╛ ржЙржкрж╛ржжрж╛ржиржЯрж╛ target ржПрж░ рж╕ржорж╛ржи рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рзЛржЬрж╛ mid рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЛред ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗред

ЁЯФ╣ if(nums[mid]<target)
ЁЯФ╕ ржпржжрж┐ ржорж╛ржЭржЦрж╛ржирзЗрж░ ржорж╛ржи target ржерзЗржХрзЗ ржЫрзЛржЯ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржмрзБржЭржмрзЛ target ржбрж╛ржи ржкрж╛рж╢рзЗ ржЖржЫрзЗред

ржЙржжрж╛рж╣рж░ржг:
text
Copy
Edit
nums = [1, 3, 5, 7, 9]
target = 9
low = 0, high = 4 тЖТ mid = 2 тЖТ nums[2] = 5 < 9
тЮбя╕П рждрж╛рж╣рж▓рзЗ ржЦрзЛржБржЬ ржХрж░рж╛рж░ ржжрж░ржХрж╛рж░ рж╢рзБржзрзБ ржбрж╛ржи ржкрж╛рж╢рзЗ:

text
Copy
Edit
low = mid + 1 = 3
ЁЯФ╕ рждрж╛ржЗ ржХрж░рж┐ low = mid + 1

ЁЯФ╣ else тЖТ high = mid - 1;
ЁЯФ╕ ржпржжрж┐ nums[mid] > target, рждрж╛рж╣рж▓рзЗ ржмрзБржЭржмрзЛ target ржмрж╛ржо ржкрж╛рж╢рзЗ ржЖржЫрзЗред

ржЙржжрж╛рж╣рж░ржг:
text
Copy
Edit
nums = [1, 3, 5, 7, 9]
target = 3
low = 0, high = 4 тЖТ mid = 2 тЖТ nums[2] = 5 > 3
тЮбя╕П рждрж╛рж╣рж▓рзЗ ржЦрзЛржБржЬ ржХрж░рж╛рж░ ржжрж░ржХрж╛рж░ рж╢рзБржзрзБ ржмрж╛ржо ржкрж╛рж╢рзЗ:

text
Copy
Edit
high = mid - 1 = 1
ЁЯФ╕ рждрж╛ржЗ ржХрж░рж┐ high = mid - 1

ЁЯФЪ return -1;
ЁЯФ╕ ржпржжрж┐ ржХржЦржиржУ nums[mid] == target ржирж╛ рж╣рзЯ, ржПржмржВ low > high рж╣рзЯрзЗ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ ржмрзБржЭржмрзЛ target ржирж╛ржЗ, рждрж╛ржЗ -1 рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЛред

ЁЯФв ржЧрж╛ржгрж┐рждрж┐ржХржнрж╛ржмрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ (Binary Search Logic):
Binary Search = ржкрзНрж░рждрж┐ржмрж╛рж░ search space ржЕрж░рзНржзрзЗржХ ржХрж░рзЗред

ржзрж░рзЛ рждрзЛржорж╛рж░ ржХрж╛ржЫрзЗ ржЕрзНржпрж╛рж░рзЗ ржЖржЫрзЗ 16 рж╕рж╛ржЗржЬрзЗрж░ред рждрж╛рж╣рж▓рзЗ ржкрзНрж░ржержоржмрж╛рж░рзЗржЗ рждрзБржорж┐ 8 ржиржорзНржмрж░ ржЗржиржбрзЗржХрзНрж╕рзЗ ржЧрж┐рзЯрзЗ ржЪрзЗржХ ржХрж░ржмрзЗред

ржпржжрж┐ ржирж╛ ржорзЗрж▓рзЗ, рждрзБржорж┐ 8 ржПрж░ ржбрж╛ржирзЗ ржмрж╛ ржмрж╛ржорзЗ ржпрж╛ржмрзЗред ржЕрж░рзНржерж╛рзО ржЕрж░рзНржзрзЗржХ ржмрж╛ржж ржпрж╛ржмрзЗред

рж╕рзЗржЬржирзНржп Binary Search ржПрж░ ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐ рж╣рзЯ:
O(logтВВN)

тЬЕ ржХрзЗржи Accepted рж╣рзЯ:
Input size ржмрзЬ рж╣рж▓рзЗржУ ржкрзНрж░рждрж┐ ржзрж╛ржкрзЗ ржЕрж░рзНржзрзЗржХ ржмрж╛ржж ржжрж┐рзЯрзЗ ржжрж┐ржЪрзНржЫрж┐ред

Search space efficiently narrow ржХрж░ржЫрж┐ low = mid + 1 ржПржмржВ high = mid - 1 ржжрж┐рзЯрзЗред

Edge cases ржпрзЗржоржи:

1ржЯрж┐ ржЙржкрж╛ржжрж╛ржи

target ржкрзНрж░ржержорзЗ ржмрж╛ рж╢рзЗрж╖рзЗ ржЖржЫрзЗ

target ржирзЗржЗ

рж╕ржмржЗ handle ржХрж░рзЗ ржПржЗ ржХрзЛржбред

ЁЯОп Example Walkthrough:
text
Copy
Edit
nums = [2, 4, 6, 8, 10, 12]
target = 10

Step 1: low = 0, high = 5 тЖТ mid = 2 тЖТ nums[2] = 6 < 10 тЖТ low = 3
Step 2: low = 3, high = 5 тЖТ mid = 4 тЖТ nums[4] = 10 тЖТ return 4
ЁЯза Binary Search ржорзВрж▓ ржнрж╛ржмржирж╛:
Binary Search ржЪрж▓рзЗ ржПржХржЯрж╛ рж░рзЗржЮрзНржЬрзЗ тАУ ржпрзЗржЯрж╛ ржЖржорж░рж╛ ржзрж░рзЗ ржирж┐ржЗ [low, high]
тЮбя╕П ржПржЗ рж░рзЗржЮрзНржЬрзЗрж░ ржнрж┐рждрж░рзЗ ржЖржорж░рж╛ ржЬрж╛ржирж┐, target ржпржжрж┐ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржПржЗ рж░рзЗржЮрзНржЬрзЗрж░ ржоржзрзНржпрзЗржЗ ржерж╛ржХржмрзЗред

ЁЯФБ ржХржирж╕рзЗржкрзНржЯ: [low, high] Range ржП ржХрж╛ржЬ рж╣ржЪрзНржЫрзЗ
ржЖржорж░рж╛ ржкрзНрж░рждрж┐ рж╕рзНржЯрзЗржкрзЗ ржПржЗ рж░рзЗржЮрзНржЬрзЗ ржПржХржЯрж╛ mid ржмрзЗрж░ ржХрж░рж┐ред

рждрж╛рж░ржкрж░ nums[mid] ржПрж░ рж╕рж╛ржерзЗ target compare ржХрж░рж┐ред

тЬЕ ржпржжрж┐ nums[mid] == target:
тЮбя╕П ржорж┐рж▓ ржкрзЗрзЯрзЗ ржЧрзЗржЫрж┐, return mid

тЬЕ ржпржжрж┐ nums[mid] < target рж╣рзЯ:
ржЖржорж╛ржжрзЗрж░ current range: [low, high]

ржЖржорж░рж╛ mid ржмрзЗрж░ ржХрж░рж▓рж╛ржо: mid = (low + high)/2

ржПржЦржи ржпрзЗрж╣рзЗрждрзБ nums[mid] < target, ржЖржорж░рж╛ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ:

target ржХржЦржирзЛржЗ mid ржмрж╛ рждрж╛рж░ ржмрж╛ржорзЗрж░ ржоржзрзНржпрзЗ ржерж╛ржХржмрзЗ ржирж╛

ржХрж╛рж░ржг nums[mid] ржПрж░ ржорж╛ржи target ржПрж░ ржЪрзЗрзЯрзЗ ржЫрзЛржЯ

рждрж╛рж╣рж▓рзЗ target ржерж╛ржХрж▓рзЗ ржПржЗ рж░рзЗржЮрзНржЬрзЗ ржерж╛ржХржмрзЗ:

csharp
Copy
Edit
[mid + 1, high]  тЬЕ
тЮбя╕П рждрж╛ржЗ ржЖржорж░рж╛ ржХрж░рж┐ржГ

cpp
Copy
Edit
low = mid + 1;
ЁЯФ╕ mid ржмрж╛ржж ржжрж┐ржЪрзНржЫрж┐, ржХрж╛рж░ржг mid рждрзЛ ржЖржЧрзЗржЗ ржЪрзЗржХ ржХрж░рзЗ ржлрзЗрж▓рзЗржЫрж┐ тАФ ржЖрж░ рж╕рзЗржЯрж╛ target ржирж╛, ржПржЯрж╛ ржЖржорж░рж╛ ржЬрж╛ржирж┐ред

тЬЕ ржпржжрж┐ nums[mid] > target рж╣рзЯ:
рждржЦржи target mid ржПрж░ ржЪрзЗрзЯрзЗ ржЫрзЛржЯ ржорж╛ржирзЗ ржмрж╛ржо ржкрж╛рж╢рзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ

рждрж╛рж╣рж▓рзЗ ржЖржорж╛ржжрзЗрж░ search range рж╣ржмрзЗ:

csharp
Copy
Edit
[low, mid - 1] тЬЕ
тЮбя╕П рждрж╛ржЗ ржЖржорж░рж╛ ржХрж░рж┐ржГ

cpp
Copy
Edit
high = mid - 1;
ЁЯФ╕ mid ржмрж╛ржж ржжрж┐ржЪрзНржЫрж┐, ржХрж╛рж░ржг mid ржЪрзЗржХ ржХрж░рж╛ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ тАФ ржХрж┐ржирзНрждрзБ ржУржЯрж╛ target ржирж╛, ржХрж╛рж░ржг рж╕рзЗржЯрж╛ ржмрзЬред

ЁЯУК ржЪрж▓ ржжрзЗржЦрж┐ рж░рзЗржЮрзНржЬ ржХрж┐ржнрж╛ржмрзЗ ржЫрзЛржЯ рж╣рзЯ (Efficiency Proof)
ржзрж░рзЛ,

cpp
Copy
Edit
nums = [1, 3, 5, 7, 9, 11, 13, 15]
target = 13
Initial:

makefile
Copy
Edit
low = 0, high = 7
Range = [0, 7]
mid = 3 тЖТ nums[3] = 7 < 13
тЮбя╕П target must be in [4, 7] тЖТ low = mid + 1 = 4
Next:

makefile
Copy
Edit
low = 4, high = 7
mid = 5 тЖТ nums[5] = 11 < 13
тЮбя╕П target must be in [6, 7] тЖТ low = mid + 1 = 6
Next:

ini
Copy
Edit
low = 6, high = 7
mid = 6 тЖТ nums[6] = 13 == target тЖТ found
ржжрзЗржЦрзЛ ржХрзАржнрж╛ржмрзЗ ржкрзНрж░рждрж┐ржмрж╛рж░ search space ржЕрж░рзНржзрзЗржХ рж╣ржЪрзНржЫрзЗ:
css
Copy
Edit
[0,7] тЖТ [4,7] тЖТ [6,7] тЖТ found
ЁЯФН ржпржжрж┐ ржЖржорж░рж╛ low = mid ржХрж░рждрж╛ржо?
рждрж╛рж╣рж▓рзЗ ржПржХржЗ mid ржмрж╛рж░ржмрж╛рж░ ржЪрзЗржХ рж╣рждрзЗ ржкрж╛рж░рждред

Example:

text
Copy
Edit
low = 6, high = 7
mid = 6

nums[6] = 13 < 15 тЖТ low = mid (wrong!) тЖТ ржЖржмрж╛рж░ mid = 6 рж╣ржмрзЗ тЖТ stuck!
тЮбя╕П рждрж╛ржЗ low = mid + 1 ржирж╛ ржХрж░рж▓рзЗ infinite loop рж╣рждрзЗ ржкрж╛рж░рзЗред

ЁЯз╛ Summary Table:
Condition	Logic	Action	Reason
nums[mid] == target	Match	return mid	Target found
nums[mid] < target	Right	low = mid+1	Mid ржПрж░ ржбрж╛ржирзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ, mid ржмрж╛ржж
nums[mid] > target	Left	high=mid-1	Mid ржПрж░ ржмрж╛ржорзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ, mid ржмрж╛ржж

тЬЕ Binary Search Efficiency:
ржкрзНрж░рждрж┐ ржзрж╛ржкрзЗ [low, high] рж░рзЗржЮрзНржЬ ржЕрж░рзНржзрзЗржХ рж╣рзЯрзЗ ржпрж╛рзЯ

рждрж╛ржЗ time complexity рж╣рзЯ O(logтВВN)

Efficiency ржЖрж╕рзЗ ржПржЗ mid+1 ржЖрж░ mid-1 ржПрж░ ржорж╛ржзрзНржпржорзЗ checked value ржмрж╛ржж ржжрзЗрзЯрж╛рж░ ржЬржирзНржп
тЖТ ржХрж╛рж░ржг Binary Search already checked value ржирж┐рзЯрзЗ ржЖрж░ ржХрж╛ржЬ ржХрж░рзЗ ржирж╛

ЁЯФЪ рж╢рзЗрж╖ ржХржерж╛:
ЁЯФБ ржЖржорж░рж╛ low = mid+1 ржХрж░рж┐ ржХрж╛рж░ржг ржЖржорж░рж╛ mid ржЖржЧрзЗржЗ check ржХрж░рзЗ ржлрзЗрж▓рзЗржЫрж┐ ржПржмржВ ржмрзБржЭрзЗржЫрж┐ target ржбрж╛ржи ржкрж╛рж╢рзЗред рждрж╛ржЗ mid ржмрж╛ржж ржжрж┐рзЯрзЗ ржбрж╛ржирзЗ ржпрж╛ржЗ тАФ [mid+1, high]
ЁЯФБ ржЖржорж░рж╛ high = mid-1 ржХрж░рж┐ ржХрж╛рж░ржг mid ржЖржЧрзЗржЗ check ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржПржмржВ ржмрзБржЭрзЗржЫрж┐ target ржмрж╛ржо ржкрж╛рж╢рзЗред рждрж╛ржЗ mid ржмрж╛ржж ржжрж┐рзЯрзЗ ржмрж╛ржорзЗ ржпрж╛ржЗ тАФ [low, mid-1]


Full Code:
-----------

  class Solution 
{
public: 
    int search(vector<int>& nums, int target) 
    {
     
      int low=0;
      int high=nums.size()-1;
      while(low<=high)
      {
        int mid=low+(high-low)/2;
        if(nums[mid]==target)
        {
          return mid;
        }
        if(nums[mid]<target)
        {
          low=mid+1;
        }
        else
        {
          high=mid-1;
        }
      }
      return -1;
    }
};
