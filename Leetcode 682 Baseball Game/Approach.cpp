‚úÖ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Understand the Problem):
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶≤‡¶õ‡ßá:
‡¶è‡¶ï‡¶ü‡¶ø operations ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá, ‡¶Ø‡ßá‡¶ü‡¶ø‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶£‡ßá‡¶∞ ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá:

‡¶á‡¶®‡¶ü‡¶ø‡¶ú‡¶æ‡¶∞ x ‚Üí ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ï‡ßã‡¶∞, ‡¶è‡¶ü‡¶ø‡¶ï‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

"C" ‚Üí ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ü‡¶ø ‡¶á‡¶®‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° (‡¶¨‡¶æ‡¶§‡¶ø‡¶≤) ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Æ‡¶æ‡¶®‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶¨‡ßã‡•§

"D" ‚Üí ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡ßá‡¶∞ ‡¶°‡¶æ‡¶¨‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßã‡•§

"+" ‚Üí ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡ßá‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßã‡•§

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶π‡¶≤‡ßã, ‡¶∏‡¶¨ ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá ‡¶Ø‡¶æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶§‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§

üß† ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶≠‡¶æ‡¶¨‡¶®‡¶æ (How to Think):
‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶¨‡¶æ ‡¶°‡¶æ‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á ‚Äî stack ‡¶π‡¶≤‡ßã ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡•§

üßÆ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Example: ["5","2","C","D","+"]) ‚Äî ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π:
Step	Operation	Stack	Explanation
1	"5"	[5]	‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ 5 ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§
2	"2"	[5, 2]	‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ 2 ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§
3	"C"	[5]	‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ (2) ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§
4	"D"	[5, 10]	‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ (5) ‡¶°‡¶æ‡¶¨‡¶≤ ‡¶ï‡¶∞‡ßá 10 ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§
5	"+"	[5, 10, 15]	‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ 5+10 = 15 ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ‡•§

Final Sum = 5 + 10 + 15 = 30

‚úÖ ‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Line-by-Line Explanation in Bangla):
cpp
Copy
Edit
int calPoints(std::vector<std::string>& operations) 
{
    stack<int> st;        // ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï
    int sum = 0;          // ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá

    for (int i = 0; i < operations.size(); i++) 
    {
        if (operations[i] == "C") 
        {
            if (!st.empty()) 
                st.pop();  // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶ø
        } 
        else if (operations[i] == "D") 
        {
            if (!st.empty()) 
                st.push(2 * st.top()); // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡ßá‡¶∞ ‡¶°‡¶æ‡¶¨‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶ø
        } 
        else if (operations[i] == "+") 
        {
            if (st.size() >= 2) 
            {
                int top1 = st.top(); st.pop();
                int top2 = st.top(); 
                st.push(top1); // top1 ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶´‡¶ø‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶á
                st.push(top1 + top2); // ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶ø
            }
        } 
        else 
        {
            // ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶ï‡ßá ‡¶á‡¶®‡ßç‡¶ü‡ßá‡¶ú‡¶æ‡¶∞‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶ø
            int val = std::stoi(operations[i]);
            // ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶ø‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶ø
            if (val >= -30000 && val <= 30000) 
                st.push(val); // ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶ø
        }
    }

    // ‡¶∏‡¶¨ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶ø
    while (!st.empty()) 
    {
        sum += st.top();
        st.pop();
    }

    return sum;
}
‚úÖ ‡¶ï‡ßá‡¶® ‡¶∏‡¶≤‡¶ø‡¶â‡¶∂‡¶® Accepted ‡¶π‡ßü‡ßá‡¶õ‡ßá?
‡¶∏‡¶¨ ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (C, D, +, integer)

‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶∞‡ßá‡¶û‡ßç‡¶ú ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (value check)

‡¶≤‡¶ú‡¶ø‡¶ï ‡¶™‡ßÅ‡¶∞‡ßã‡¶™‡ßÅ‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá

üß™ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á:
Input: ["5","2","C","D","+"]
Stack Steps: [5], [5,2], [5], [5,10], [5,10,15]

Final Sum = 5+10+15 = 30

Input: ["1","C"]
Stack: [1] ‚Üí [] ‚Üí sum = 0 ‚úÖ

üîÅ ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßÅ‡¶ù‡¶¨‡ßã?
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá "‡¶∏‡¶¶‡ßç‡¶Ø ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá" ‡¶¨‡¶≤‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶ñ‡¶® stack ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßã‡•§
‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ‡ßá C, D, + ‡¶∏‡¶¨‡¶á ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá, ‡¶§‡¶æ‡¶á stack ‡¶†‡¶ø‡¶ï‡¶†‡¶æ‡¶ï ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡•§

üìå ‡¶ü‡ßá‡¶ï‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ì (Key Learnings):
‚úÖ Stack ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶á‡¶®‡¶´‡ßã ‡¶∏‡¶π‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶Ü‡¶∏‡¶≤‡ßá‡¶ì ‡¶Ü‡¶Æ‡¶∞‡¶æ integer-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‚úÖ Special operations ‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§

Full Code:
-----------
#include <iostream>
#include <vector>
#include <stack>
class Solution 
{
public:
int calPoints(std::vector<std::string>& operations) 
{
   stack<int>st;
   int ans;
   int sum=0;
     for(int i=0;i<operations.size();i++)
   {
    if(operations[i]=="C")
    {
      if (!st.empty()) 
      st.pop();
    }
    else if(operations[i]=="D")
    {
      if(!st.empty())
      {
        st.push(2*st.top());
      }
    }
    else if(operations[i]=="+")
    {
   if(st.size()>=2)
   {
   int top1=st.top();
   st.pop();
   int top2=st.top();
   st.push(top1);
 int top3=top1+top2;
 st.push(top3);
 }
    }
   else
   {
    int val=std::stoi(operations[i]);
    if(val>=-30000&&val<=30000)
    {
      st.push(val);
    }
   }
   }
  while(!st.empty())
   {
    sum+=st.top();
    st.pop();
   }
 return sum;
}
};
