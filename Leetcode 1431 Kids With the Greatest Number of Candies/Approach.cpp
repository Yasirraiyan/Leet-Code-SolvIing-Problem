Amar 1 ta array ase candies.1 ta int ase extra candies. Ami prottekke extra candies dile ba protteker sathe extra candies jog korle jodi array r max number er beshi ba equal hoy taile array te true push korbo
Naile false push korbo.
  Amar 1 ta bool array return chaise.
  First e 1 ta function banai main function er baire ja array r max xcalculate krbe

Helper Function:
----------------
   int getmax(vector<int>arr)
  {
    int max=arr[0];
    for(int i=1;i<arr.size();i++)
    {
      if(arr[i]>max)
      {
        max=arr[i];
      }
    }
    return max;
  }
Explaination:
--------------
  ‡¶è‡¶á getmax ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø vector<int> (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé int ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞) ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶á ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá, ‡¶∏‡ßá‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡•§

‡¶ö‡¶≤‡ßã ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶ø:

cpp
Copy
Edit
int getmax(vector<int> arr)
‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶°‡ßá‡¶´‡¶ø‡¶®‡¶ø‡¶∂‡¶® ‡¶Ø‡ßá‡¶ü‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ getmax‡•§

‡¶è‡¶ü‡¶ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá vector<int> arr ‡¶®‡ßá‡ßü, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá arr ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ (integer) ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡•§

‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ü‡¶æ‡¶á‡¶™ int, ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§

cpp
Copy
Edit
int max = arr[0];
‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶®‡¶ï‡ßá (index 0) ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶á ‡¶è‡¶ñ‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡•§

cpp
Copy
Edit
for(int i = 1; i < arr.size(); i++)
‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡ßá‡¶∞ ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® (index 1) ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßá‡¶∑ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ for ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

cpp
Copy
Edit
if(arr[i] > max)
{
    max = arr[i];
}
‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® max ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßú ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá max ‡¶ï‡ßá ‡¶∏‡ßá‡¶á ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

cpp
Copy
Edit
return max;
‡¶≤‡ßÅ‡¶™ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá, ‡¶Ø‡ßá‡¶ü‡¶æ max ‡¶§‡ßá ‡¶Ü‡¶õ‡ßá (‡¶Æ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ), ‡¶∏‡ßá‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

üìå ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¨‡ßÅ‡¶ù‡¶ø:
getmax ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞) ‡¶®‡ßá‡ßü ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡•§

‡¶Ø‡ßá‡¶Æ‡¶®:


vector<int> numbers = {5, 9, 3, 15, 7};
int result = getmax(numbers);
// result = 15

#include <iostream>
#include <vector>
using namespace std;

// ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶® ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
int getmax(vector<int> arr) {
    int max = arr[0];
    for (int i = 1; i < arr.size(); i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

int main() {
    // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶≠‡ßá‡¶ï‡ßç‡¶ü‡¶∞
    vector<int> numbers = {5, 9, 3, 15, 7};

    // getmax ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
    int result = getmax(numbers);

    // ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü
    cout << "‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßã: " << result << endl;

    return 0;
}
üìù ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶¨‡ßá:

‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßã: 15
üîç ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
‡¶Ü‡¶Æ‡¶∞‡¶æ numbers ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶∏‡ßá‡¶á ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶ü‡¶ø getmax ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá‡¶õ‡¶ø‡•§

getmax ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡ßá‡¶õ‡ßá ‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú, ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶æ‡¶á ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§

Erpor main function e 1 ta vector array create kori bool type er.Karon amr ans e return chaise bool type array
 1 ta loop chalai j=0 to j<candies.size() porjonto j++ kori
  Check kori protteker sathe extra candies jog kore max er besi ba soman kina
tai helper function getmax() call kor
So,
  Code:
  ------

   if(candies[j]+extraCandies>=getmax(candies)) 
  jodi true hoy tai 
ans e push kori true;
naile 
else 
push kori false;
So,
  Code is:
------------
  if(candies[j]+extraCandies>=getmax(candies))
          {
            ans.push_back(true);
          }
          else
          {
            ans.push_back(false);
          }
return kori ans;
Code With loop:
---------------
  for(int j=0;j<candies.size();j++)
        {
          if(candies[j]+extraCandies>=getmax(candies))
          {
            ans.push_back(true);
          }
          else
          {
            ans.push_back(false);
          }
        }

Main Function:
---------------

vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) 
    {
        vector<bool>ans;
        for(int j=0;j<candies.size();j++)
        {
          if(candies[j]+extraCandies>=getmax(candies))
          {
            ans.push_back(true);
          }
          else
          {
            ans.push_back(false);
          }
        }
        return ans;
    }

Full Code:
-----------

  #include<vector>
#include<iostream>
#include<cctype>
class Solution 
{
public:
  int getmax(vector<int>arr)
  {
    int max=arr[0];
    for(int i=1;i<arr.size();i++)
    {
      if(arr[i]>max)
      {
        max=arr[i];
      }
    }
    return max;
  }
    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) 
    {
        vector<bool>ans;
        for(int j=0;j<candies.size();j++)
        {
          if(candies[j]+extraCandies>=getmax(candies))
          {
            ans.push_back(true);
          }
          else
          {
            ans.push_back(false);
          }
        }
        return ans;
    }
};





