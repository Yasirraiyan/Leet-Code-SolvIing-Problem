ЁЯФ╕ рзз. Word ржЧрзБржирждрзЗ рж╣ржмрзЗ тЖТ ржорж╛ржирзЗ Frequency Count ржжрж░ржХрж╛рж░
ЁЯФ╣ ржкрзНрж░рж╢рзНржирзЗ ржмрж▓рж╛ рж╣рзЯрзЗржЫрзЗ:

"рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржмрж╛рж░ ржпрзЗ рж╢ржмрзНржжржЯрж╛ ржПрж╕рзЗржЫрзЗ (most frequent word)"
ржорж╛ржирзЗ, ржЖржорж╛ржжрзЗрж░ ржкрзНрж░рждрж┐ржЯрж╛ рж╢ржмрзНржжрзЗрж░ рж╕ржВржЦрзНржпрж╛ ржЧрзБржирждрзЗ рж╣ржмрзЗред

ЁЯУМ ржПржЦрж╛ржирзЗржЗ ржорж╛ржерж╛рзЯ ржЖрж╕ржмрзЗ:
"ржЖржорж┐ ржХрж┐ ржПржХржЯрж╛ HashMap/Dictionary ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐?"
тЮбя╕П рж╣рзНржпрж╛ржБ, ржПржЯрж╛ рж╣рж▓рзЛ word frequency ржмрзЗрж░ ржХрж░рж╛рж░ standard ржЙржкрж╛рзЯред

cpp
Copy
Edit
unordered_map<string, int> freq;
ЁЯФ╕ рзи. Punctuation ржмрж╛ржж ржжрж┐рждрзЗ рж╣ржмрзЗ (",", ".", "!" ржЗрждрзНржпрж╛ржжрж┐)
ЁЯФ╣ ржкрзНрж░рж╢рзНржирзЗ ржмрж▓рж╛ рж╣рзЯрзЗржЫрзЗ:

"words can not contain punctuation symbols"

ржорж╛ржирзЗ, ball, ржПржмржВ ball ржПржХ ржЬрж┐ржирж┐рж╕ред рждрж╛ржЗ punctuation ржЧрзБрж▓рзЛ рж░рж┐ржорзБржн ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯУМ ржнрж╛ржмржмрзЗ:

ржЖржорж┐ paragraph ржЯрж╛ржХрзЗ traverse ржХрж░рзЗ isalnum() ржмрж╛ isalpha() ржжрж┐рзЯрзЗ рж╢рзБржзрзБ letter ржирж┐рж▓рзЗржЗ рждрзЛ punctuation ржмрж╛ржж ржпрж╛ржмрзЗред

ржЖрж░ punctuation ржкрзЗрж▓рзЗржЗ space ржжрж┐рзЯрзЗ ржжрж┐ржЗ, ржпрзЗржи ржкрж░рзЗ split ржХрж░рж╛ ржпрж╛рзЯред

ЁЯФ╕ рзй. Case insensitive тЖТ ржЫрзЛржЯ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗ
ЁЯФ╣ ржкрзНрж░рж╢рзНржирзЗ ржмрж▓рж╛ рж╣рзЯрзЗржЫрзЗ:

"The words in paragraph are case-insensitive"

ЁЯУМ ржмрзБржЭрждрзЗ рж╣ржмрзЗ:

Ball, BALL, ball тЖТ ржПржЧрзБрж▓рзЛ рж╕ржм ржПржХржЗред

рждрж╛ржЗ, ржкрзБрж░рзЛ string ржЯрж╛ржХрзЗ tolower() ржжрж┐рзЯрзЗ ржЫрзЛржЯ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ ржирж┐рждрзЗ рж╣ржмрзЗред

ЁЯФ╕ рзк. Words ржЖрж▓рж╛ржжрж╛ ржХрж░рж╛ (Split into words)
ЁЯУМ ржпрждржХрзНрж╖ржг ржкрж░рзНржпржирзНржд paragraph ржкрзБрж░рзЛржкрзБрж░рж┐ clean ржирж╛ ржХрж░рж┐, рждрждржХрзНрж╖ржг ржкрж░рзНржпржирзНржд word split ржХрж░рждрзЗ ржкрж╛рж░ржм ржирж╛ред
рждрж╛ржЗ punctuation remove ржХрж░рзЗ тЖТ space ржжрж┐рзЯрзЗ split ржХрж░ржмред
C++ ржП ржП ржЬржирзНржп stringstream ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

ЁЯФ╕ рзл. Banned word ржмрж╛ржж ржжрж┐рждрзЗ рж╣ржмрзЗ
ЁЯФ╣ ржкрзНрж░рж╢рзНржирзЗ ржмрж▓рж╛ рж╣рзЯрзЗржЫрзЗ:

"Return the most frequent word that is not banned."

ЁЯУМ рждрж╛ржЗ ржнрж╛ржмржмрзЗ:

ржПржХржЯрж╛ unordered_set<string> bannedWords; рж░рж╛ржЦрж┐ред

рждрж╛рж░ржкрж░ word traverse ржХрж░рж╛рж░ рж╕ржорзЯ ржпржжрж┐ рж╕рзЗржЯрж╛ banned-ржП ржирж╛ ржерж╛ржХрзЗ тЖТ рждржЦржиржЗ ржЧрзБржиржмрзЛред

ЁЯФ╕ рзм. Max Frequency Word Return ржХрж░рждрзЗ рж╣ржмрзЗ
ЁЯУМ ржПржЦржи hashmap рждрзИрж░рж┐ рж╣рзЯрзЗ ржЧрзЗржЫрзЗред
рждрзБржорж┐ ржЪрзЗржХ ржХрж░ржмрзЗ ржХрзЛржи word ржПрж░ frequency рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐:

cpp
Copy
Edit
int maxFreq = 0;
string ans = "";
for (auto it : freq) {
    if (it.second > maxFreq) {
        maxFreq = it.second;
        ans = it.first;
    }
}
return ans;
ЁЯза рж╕ржВржХрзНрж╖рзЗржкрзЗ ржЪрж┐ржирзНрждрж╛рж░ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк:
ржзрж╛ржк	ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЛ
ЁЯФ╣ Step 1	punctuation ржмрж╛ржж ржжрж┐рзЯрзЗ рж╕ржм lowercase ржП ржХржиржнрж╛рж░рзНржЯ ржХрж░ржмрзЛ
ЁЯФ╣ Step 2	string ржЯрж╛ржХрзЗ word-ржП ржнрзЗржЩрзЗ ржлрзЗрж▓ржмрзЛ
ЁЯФ╣ Step 3	banned list ржХрзЗ set ржП рж░рж╛ржЦржмрзЛ
ЁЯФ╣ Step 4	banned ржЫрж╛рзЬрж╛ word ржЧрзБрж▓рзЛрж░ frequency count ржХрж░ржмрзЛ
ЁЯФ╣ Step 5	рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржпрзЗ word ржЯрж╛ ржПрж╕рзЗржЫрзЗ рж╕рзЗржЯрж╛ return ржХрж░ржмрзЛ

тЬЕ ржЙржкрж╕ржВрж╣рж╛рж░ (Conclusion)
ржПржЗ ржкрзНрж░рж╢рзНржиржЯрж╛ рждрзЛржорж╛ржХрзЗ рж╢рзЗржЦрж╛рзЯ:

Data clean ржХрж┐ржнрж╛ржмрзЗ ржХрж░рждрзЗ рж╣рзЯ

HashMap ржжрж┐рзЯрзЗ frequency count ржХрж┐ржнрж╛ржмрзЗ ржХрж░рждрзЗ рж╣рзЯ

Set ржжрж┐рзЯрзЗ banned word exclude ржХрж░рж╛ ржпрж╛рзЯ ржХрж┐ржнрж╛ржмрзЗ

Real-world string manipulation problem ржХрж┐ржнрж╛ржмрзЗ handle ржХрж░рждрзЗ рж╣рзЯ






ЁЯФ╢ ржкрзНрж░рж╢рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (How to Think from the Question)
ржкрзНрж░рж╢рзНржирзЗ ржпрж╛ ржмрж▓рж╛ ржЖржЫрзЗ:

ржПржХржЯрж┐ string paragraph ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред

ржПржХржЯрж┐ string array banned ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред

рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣ржЪрзНржЫрзЗ paragraph ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржмрж╛рж░ ржпрзЗржЗ рж╢ржмрзНржжржЯрж╛ ржПрж╕рзЗржЫрзЗ ржПржмржВ рж╕рзЗржЯрж┐ banned list-ржП ржирзЗржЗ, рж╕рзЗржЗ рж╢ржмрзНржжржЯрж┐ return ржХрж░рж╛ред

ржмрж┐рж╢рзЗрж╖ ржирж┐рзЯржо:

Word ржЧрзБрж▓рзЛ case-insensitive (ржорж╛ржирзЗ "Ball" ржЖрж░ "ball" ржПржХржЗ ржзрж░рж╛ рж╣ржмрзЗ)ред

Punctuation (ржпрзЗржоржи .,!?;) ржХрзЗ ignore ржХрж░рждрзЗ рж╣ржмрзЗред

Return рж╣ржмрзЗ lowercase ржПред

ЁЯФ╖ Step-by-Step Approach (рж╕ржорж╛ржзрж╛ржирзЗрж░ ржзрж╛ржкржЧрзБрж▓рзЛ):
Step 1: Paragraph-ржХрзЗ ржкрзНрж░рж┐-ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЛ:

рж╕ржм punctuation ржмрж╛ржж ржжрж╛ржУред

рж╕ржм ржЫрзЛржЯрж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЛред

space ржжрж┐рзЯрзЗ word ржнрж╛ржЧ ржХрж░рзЛред

**Step 2: Banned word ржЧрзБрж▓рзЛржХрзЗ Set-ржП рж░рж╛ржЦрзЛ (O(1) lookup speed)ред

**Step 3: Frequency Count ржХрж░рзЛ (HashMap ржжрж┐рзЯрзЗ) banned ржЫрж╛рзЬрж╛ word ржЧрзБрж▓рзЛрж░ред

**Step 4: рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржпрзЗ word ржПрж╕рзЗржЫрзЗ рж╕рзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЛред

тЬЕ рждрзЛржорж╛рж░ ржжрзЗржУрзЯрж╛ ржХрзЛржб + ржмрзНржпрж╛ржЦрзНржпрж╛:
cpp
Copy
Edit
class Solution 
{
public:
    // ЁЯФ╕ Utility function: findMax() => рж╕рж░рзНржмрзЛржЪрзНржЪ frequency ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗ
    int findMax(vector<int>& arr)
    {
        int maxElement = arr[0];
        for (int i = 1; i < arr.size(); ++i)
        {
            if (arr[i] > maxElement) 
            {
                maxElement = arr[i]; 
            }
        }
        return maxElement;
    }
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:
findMax() ржлрж╛ржВрж╢ржиржЯрж╛ vector ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗ тАФ ржПржЯрж╛ frequency max ржЦрзБржБржЬрждрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржмрзЗред

cpp
Copy
Edit
    string mostCommonWord(string paragraph, vector<string>& banned) 
    {
        string cleanText = "";

        // ЁЯФ╕ Step 1: paragraph ржерзЗржХрзЗ punctuation ржмрж╛ржж ржжрж┐рзЯрзЗ рж╕ржм ржЫрзЛржЯрж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░
        for (char c : paragraph)
        {
            if (isalpha(c))
            {
                cleanText += tolower(c); 
            } 
            else 
            {
                cleanText += ' ';
            }
        }
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:

isalpha(c) ржЪрзЗржХ ржХрж░рзЗ ржЕржХрзНрж╖рж░ ржХрж┐ржирж╛ (punctuation ржмрж╛ржж ржжрзЗрзЯ)

рж╕ржм lowercase ржХрж░рзЗ

punctuation ржПрж░ ржЬрж╛рзЯржЧрж╛рзЯ space ржмрж╕рж╛ржирзЛ рж╣рзЯ ржпрж╛рждрзЗ ржкрж░рзЗ рж╕рж╣ржЬрзЗ word split ржХрж░рж╛ ржпрж╛рзЯ

cpp
Copy
Edit
        vector<string> words;

        stringstream ss(cleanText);
        string word;

        // ЁЯФ╕ Step 2: string ржерзЗржХрзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж╢ржмрзНржж ржЖрж▓рж╛ржжрж╛ ржХрж░рзЛ (split by space)
        while (ss >> word) 
        {
            words.push_back(word);
        }
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:

stringstream ржжрж┐рзЯрзЗ space ржЕржирзБржпрж╛рзЯрзА word split ржХрж░рзЗ ржПржХржЯрж╛ vector ржП рж░рж╛ржЦржЫрзЗред

cpp
Copy
Edit
        unordered_set<string> set1;
        for (int i = 0; i < banned.size(); i++)
        {
            set1.insert(banned[i]);
        }
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:

banned word ржЧрзБрж▓рзЛржХрзЗ unordered_set ржП рж░рж╛ржЦржЫрзЗ ржпрж╛рждрзЗ lookup O(1) ржЯрж╛ржЗржорзЗ рж╣рзЯред

cpp
Copy
Edit
        vector<string> v;
        for (int j = 0; j < words.size(); j++)
        {
            if (set1.find(words[j]) == set1.end()) // ЁЯФ╕ not banned
            {
                v.push_back(words[j]);
            }
        }
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:

рж╕ржм word ржерзЗржХрзЗ banned ржирж╛ ржПржоржи word ржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ рж░рж╛ржЦржЫрзЗ vector v рждрзЗред

cpp
Copy
Edit
        unordered_map<string, int> freq;
        for (int k = 0; k < v.size(); k++)
        {
            freq[v[k]]++;
        }
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:

frequency рж╣рж┐рж╕рж╛ржм рж░рж╛ржЦржЫрзЗ HashMap ржжрж┐рзЯрзЗред

cpp
Copy
Edit
        vector<int> f;
        for (auto it : freq)
        {
            f.push_back(it.second);
        }

        int maxfreq = findMax(f);
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:

frequency ржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржПржХржЯрж╛ vector ржП рж░рж╛ржЦржЫрзЗ, рждрж╛рж░ржкрж░ рж╕рж░рзНржмрзЛржЪрзНржЪржЯрж╛ ржЦрзБржБржЬрзЗ maxfreq ржмрзЗрж░ ржХрж░ржЫрзЗред

ржПржЗ ржЕржВрж╢ржЯрж╛ рж╕рж░рж╛рж╕рж░рж┐ HashMap ржерзЗржХрзЗржЗ max ржЦрзБржБржЬрж▓рзЗ efficient рж╣рждрзЛред ржирж┐ржЪрзЗ suggest ржХрж░ржмред

cpp
Copy
Edit
        string ans = "";
        for (auto it : freq)
        {
            if (it.second == maxfreq)
            {
                ans += it.first;
                break;
            }
        }

        return ans;
    }
};
ЁЯФ╣ ржмрзНржпрж╛ржЦрзНржпрж╛:

ржпрзЗ word-ржПрж░ frequency maxfreq ржПрж░ рж╕ржорж╛ржи, рж╕рзЗржЯрж╛ржЗ return ржХрж░ржЫрзЗред

ЁЯзк Test Case Walkthrough:
тЬЕ Test Case 1:
cpp
Copy
Edit
paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.";
banned = ["hit"]
Step-by-step:

Punctuation remove тЖТ "bob hit a ball the hit ball flew far after it was hit"

Lowercase тЖТ ржарж┐ржХржЗ рж╣рзЯрзЗржЫрзЗ

Split тЖТ [bob, hit, a, ball, the, hit, ball, flew, far, after, it, was, hit]

Remove banned "hit" тЖТ [bob, a, ball, the, ball, flew, far, after, it, was]

Frequency:

ball тЖТ 2

ржмрж╛ржХрж┐ржЧрзБрж▓рзЛ 1 ржмрж╛рж░ ржХрж░рзЗ

тЬЕ Answer = "ball"

Full Code:
------------

  class Solution 
{
public:
    int findMax(vector<int>&arr)
     {
    int maxElement = arr[0];
    for (int i = 1; i < arr.size(); ++i)
     {
        if (arr[i] > maxElement) 
        {
            maxElement = arr[i]; 
        }
    }
    return maxElement;
}
    string mostCommonWord(string paragraph, vector<string>& banned) 
    {
       string cleanText = "";


for (char c : paragraph)
 {
    if (isalpha(c))
     {
        cleanText += tolower(c); 
    } else 
    {
        cleanText += ' ';
    }
}


vector<string> words;




    
    stringstream ss(cleanText);
    string word;

    while (ss >> word) 
    {
        words.push_back(word);
    }
    unordered_set<string>set1;
    for(int i=0;i<banned.size();i++)
    {
      set1.insert(banned[i]);
    }
    vector<string>v;
    for(int j=0;j<words.size();j++)
    {
      if(set1.find(words[j])==set1.end())
      {
        v.push_back(words[j]);
      }
    }
    unordered_map<string,int>freq;
    for(int k=0;k<v.size();k++)
    {
      freq[v[k]]++;
    }
    vector<int>f;
    for(auto it:freq)
    {
      f.push_back(it.second);
    }
    int maxfreq=findMax(f);
    string ans="";
    for(auto it:freq)
    {
      if(it.second==maxfreq)
      {
           ans+=it.first;
           break;
      }
    }
    return ans;
    }
};
