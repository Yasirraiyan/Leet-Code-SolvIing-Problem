рждрзБржорж┐ ржпрзЗ рж╕ржорж╕рзНржпрж╛ржЯрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржХрж░ржЫрзЛ рж╕рзЗржЯрж╛ рж╣ржЪрзНржЫрзЗ:
ржкрзНрж░рждрж┐ржЯрж┐ ржЧрж╛ржбрж╝рж┐ ржПржХржЯрж╛ рж╕ржВржЦрзНржпрж╛ рж░рзЗржЦрж╛рж░ (number line) ржПржХржЯрж╛ ржЕржВрж╢ ржХржнрж╛рж░ ржХрж░рзЗ тАФ ржкрзНрж░рждрж┐ржЯрж┐ ржЧрж╛ржбрж╝рж┐рж░ ржЬржирзНржп рж╢рзБрж░рзБ (start) ржПржмржВ рж╢рзЗрж╖ (end) ржкрзЯрзЗржирзНржЯ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред
рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ тАФ ржПржЗ рж╕ржХрж▓ ржЧрж╛ржбрж╝рж┐рж░ ржжрзНржмрж╛рж░рж╛ ржХржнрж╛рж░ рж╣ржУржпрж╝рж╛ ржЗржЙржирж┐ржХ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ (integer points) ржЧрзБрж▓рзЛрж░ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░рж╛ред

тЬЕ ржЙржжрж╛рж╣рж░ржг ржмрзНржпрж╛ржЦрзНржпрж╛ (Example):
Input: [[3,6],[1,5],[4,7]]
Output: 7
Explanation:

ржкрзНрж░ржержо ржЧрж╛рзЬрж┐: 3 тЖТ 6 тЖТ ржХржнрж╛рж░ ржХрж░рзЗ: 3, 4, 5, 6

ржжрзНржмрж┐рждрзАрзЯ ржЧрж╛рзЬрж┐: 1 тЖТ 5 тЖТ ржХржнрж╛рж░ ржХрж░рзЗ: 1, 2, 3, 4, 5

рждрзГрждрзАрзЯ ржЧрж╛рзЬрж┐: 4 тЖТ 7 тЖТ ржХржнрж╛рж░ ржХрж░рзЗ: 4, 5, 6, 7

рж╕ржм ржЧрзБрж▓рж╛ ржЗржЙржирж┐ржХ integer point: 1, 2, 3, 4, 5, 6, 7 тЖТ ржорзЛржЯ 7 ржЯрж╛ point
рждрж╛ржЗ ржЙрждрзНрждрж░ = 7 тЬЕ

ЁЯза рждрзБржорж┐ ржХрзАржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рж▓рзЗ (Approach):
ржкрзНрж░рждрж┐ржЯрж╛ ржЧрж╛ржбрж╝рж┐рж░ ржЬржирзНржп рждрж╛рж░ рж╢рзБрж░рзБ ржерзЗржХрзЗ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд ржкрзНрж░рждрж┐ржЯрж╛ ржкрзЯрзЗржирзНржЯ ржмрзЗрж░ ржХрж░рзЛред

рж╕ржм ржкржпрж╝рзЗржирзНржЯ ржПржХржЯрж┐ vector-ржП рж░рж╛ржЦрзЛред

рждрж╛рж░ржкрж░ ржПржХржЯрж╛ unordered_map ржжрж┐рзЯрзЗ ржмрзЗрж░ ржХрж░рзЛ ржХрждржЧрзБрж▓рзЛ ржЗржЙржирж┐ржХ ржкржпрж╝рзЗржирзНржЯ ржЖржЫрзЗред

рж╕рзЗржЯрж╛рж░ size рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛред

ЁЯФН рждрзЛржорж╛рж░ ржХрзЛржбрзЗрж░ ржзрж╛ржк-ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ (Line-by-line Bangla Explanation):
cpp
Copy
Edit
class Solution 
{
public:
ЁЯСЙ ржХрзНрж▓рж╛рж╕ рж╢рзБрж░рзБ ржХрж░рзЗржЫрзЛ Solution ржирж╛ржорзЗ, LeetCode ржПрж░ рж╕рзНржЯрж╛ржЗрж▓ ржЕржирзБржпрж╛рзЯрзАред

cpp
Copy
Edit
vector<int>GetAll(int low,int high)
{
  vector<int>ans;
  for(int k=low;k<=high;k++)
  {
     ans.push_back(k);
  }
  return ans;
}
ЁЯФ╣ GetAll() ржлрж╛ржВрж╢ржи:
ржХрж╛ржЬ: low ржерзЗржХрзЗ high ржкрж░рзНржпржирзНржд ржкрзНрж░рждрж┐ржЯрж╛ integer point ржмрзЗрж░ ржХрж░рзЗ ржПржХржЯрж╛ vector-ржП рж░рж╛ржЦрзЗред

ржЙржжрж╛рж╣рж░ржг: low = 3, high = 6 тЖТ return: [3, 4, 5, 6]

cpp
Copy
Edit
int numberOfPoints(vector<vector<int>>& nums) {
    vector<int>v;
v ржирж╛ржоржХ ржПржХржЯрж╛ vector ржирзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ рж╕ржм ржкржпрж╝рзЗржирзНржЯ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред

cpp
Copy
Edit
for(int i=0;i<nums.size();i++)
{
    int low=nums[i][0];
    int high=nums[i][1];
ржкрзНрж░рждрж┐ржЯрж╛ ржЧрж╛ржбрж╝рж┐рж░ ржЬржирзНржп start ржУ end ржмрзЗрж░ ржХрж░ржЫрзЛред

ржЙржжрж╛рж╣рж░ржг: nums[i] = [1, 3] тЖТ low = 1, high = 3

cpp
Copy
Edit
   vector<int> temp=GetAll(low,high);
   for (auto point : temp) 
   {
        v.push_back(point);
   }
GetAll() ржлрж╛ржВрж╢ржирзЗрж░ ржорж╛ржзрзНржпржорзЗ [low, high] ржПрж░ ржнрж┐рждрж░рзЗрж░ рж╕ржм integer point ржмрзЗрж░ ржХрж░рзЗ v рждрзЗ рж░рж╛ржЦржЫрзЛред

cpp
Copy
Edit
unordered_map<int,int>freq;
for(int k=0;k<v.size();k++)
{
  freq[v[k]]++;
}
ржПржЦржи рж╕ржм ржкржпрж╝рзЗржирзНржЯ v рждрзЗ ржЖржЫрзЗ, ржХрж┐ржирзНрждрзБ рж░рж┐ржкрж┐ржЯрзЗржб рж╣рждрзЗ ржкрж╛рж░рзЗред

рждрж╛ржЗ unordered_map ржжрж┐рзЯрзЗ frequency рж╣рж┐рж╕рзЗржм ржХрж░ржЫрзЛред

freq[point] = ржХрждржмрж╛рж░ ржПрж╕рзЗржЫрзЗ

cpp
Copy
Edit
vector<int>vv;
for(auto it:freq)
{
  vv.push_back(it.first);
}
freq map ржерзЗржХрзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ key (ржорж╛ржирзЗ ржЗржЙржирж┐ржХ ржкржпрж╝рзЗржирзНржЯ) ржЧрзБрж▓рзЛ ржмрзЗрж░ ржХрж░ржЫрзЛ vv рждрзЗ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред

cpp
Copy
Edit
int ans=vv.size();
return ans;
ржЗржЙржирж┐ржХ ржкржпрж╝рзЗржирзНржЯ ржХрждржЯрж╛ ржЫрж┐рж▓рзЛ тЖТ vv.size() тЖТ ржПржЗржЯрж╛ржЗ ржЙрждрзНрждрж░ тЬЕ

тЬЕ Accepted ржХрзЗржи рж╣рж▓рзЛ:
рж╕ржорж╕рзНржд integer ржкрзЯрзЗржирзНржЯ ржарж┐ржХржнрж╛ржмрзЗ ржХржнрж╛рж░ ржХрж░ржЫрзЛред

ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржмрж╛ржж ржжрж┐рзЯрзЗржЫрзЛ unordered_map ржжрж┐рзЯрзЗред

ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐ acceptable:

ржпржжрж┐ N ржЧрж╛ржбрж╝рж┐ ржерж╛ржХрзЗ, ржПржмржВ ржкрзНрж░рждрзНржпрзЗржХрзЗ K point ржХржнрж╛рж░ ржХрж░рзЗ, рждрж╛рж╣рж▓рзЗ approx O(N*K) рж╕ржорзЯ рж▓рж╛ржЧржмрзЗред

ржЗржЙржирж┐ржХ ржкрзЯрзЗржирзНржЯ ржЧрзБрж▓рзЛ unordered_map ржжрж┐рзЯрзЗ ржмрзЗрж░ ржХрж░рж╛рзЯ ржжрзНрж░рзБржд рж╣рзЯрзЗржЫрзЗред

ЁЯФЪ ржЙржкрж╕ржВрж╣рж╛рж░ (Summary):
Approach:

ржкрзНрж░рждрж┐ржЯрж╛ ржЧрж╛ржбрж╝рж┐рж░ [start, end] ржПрж░ рж╕ржм ржкрзЯрзЗржирзНржЯ ржмрзЗрж░ ржХрж░рзЛред

рж╕ржм ржкрзЯрзЗржирзНржЯ vector-ржП рж░рж╛ржЦрзЛред

unordered_map ржжрж┐рзЯрзЗ ржЗржЙржирж┐ржХ ржкржпрж╝рзЗржирзНржЯ ржмрзЗрж░ ржХрж░рзЛред

рж╕рзЗржЧрзБрж▓рзЛрж░ рж╕ржВржЦрзНржпрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛред

Full Code:
----------

  class Solution 
{
public:
vector<int>GetAll(int low,int high)
{
  vector<int>ans;
  for(int k=low;k<=high;k++)
  {
     ans.push_back(k);
  }
  return ans;
}
    int numberOfPoints(vector<vector<int>>& nums) {
        vector<int>v;
        for(int i=0;i<nums.size();i++)
        {
      //    for(int j=0;j<nums[i].size();j++)
        //  {
            int low=nums[i][0];
            int high=nums[i][1];
           vector<int> temp=GetAll(low,high);
           for (auto point : temp) 
           {
                v.push_back(point);
            }
        //  }
        }
        unordered_map<int,int>freq;
        for(int k=0;k<v.size();k++)
        {
          freq[v[k]]++;
        }
        vector<int>vv;
        for(auto it:freq)
        {
          vv.push_back(it.first);
        }
        int ans=vv.size();
        return ans;
    }
};
