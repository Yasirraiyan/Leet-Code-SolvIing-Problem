Approach:
----------
  üîç ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Problem Analysis)
‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú:

lowLimit ‡¶•‡ßá‡¶ï‡ßá highLimit ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:

‡¶∏‡ßá‡¶á ‡¶¨‡¶≤‡ßá‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã (e.g., 321 ‚Üí 3+2+1 = 6),

‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ = ‡¶¨‡¶ï‡ßç‡¶∏ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‚Üí ‡¶ì‡¶á ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶¨‡¶≤‡¶ü‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßã,

‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶™‡¶∞, ‡¶¶‡ßá‡¶ñ‡ßã ‡¶ï‡ßã‡¶® ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡¶≤ ‡¶Ü‡¶õ‡ßá ‚Üí ‡¶∏‡ßá‡¶á ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ return ‡¶ï‡¶∞‡ßã‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶¨‡¶æ‡¶á ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
cpp
Copy
Edit
int digitsum(int n)
{
    int sum=0;
    while(n>0)
    {
        sum+=n%10;
        n=n/10;
    }
    return sum;
}
üîπ digitsum() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®:
‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
‡¶Ø‡ßá‡¶Æ‡¶® 123 ‚Üí 1+2+3 = 6

cpp
Copy
Edit
int countBalls(int lowLimit, int highLimit)
{
    int n=highLimit-lowLimit+1;
    unordered_map<int,int>freq;
    for(int i=lowLimit;i<=highLimit;i++)
    {
        freq[digitsum(i)]++;
    }
üîπ unordered_map freq:

Key = box number (i.e., digit sum)

Value = ‡¶∏‡ßá‡¶á ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶ï‡¶§‡¶ü‡¶ø ‡¶¨‡¶≤ ‡¶ó‡ßá‡¶õ‡ßá

‡¶§‡ßÅ‡¶Æ‡¶ø lowLimit ‡¶•‡ßá‡¶ï‡ßá highLimit ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶á box-‡¶è count ‡¶¨‡¶æ‡ßú‡¶ø‡ßü‡ßá‡¶õ‡ßã‡•§

cpp
Copy
Edit
    vector<int>reserve;
    for(auto it:freq)
    {
        reserve.push_back(it.second);
    }
üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø freq map ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ value (ball count per box) ‡¶è‡¶ï‡¶ü‡¶ø reserve vector-‡¶è ‡¶§‡ßÅ‡¶≤‡ßá‡¶õ‡ßã‡•§
‡¶Ø‡¶æ‡¶∞ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø: max ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§

cpp
Copy
Edit
    int max=reserve[0];
    for(int j=1;j<reserve.size();j++)
    {
        if(reserve[j]>max)
        {
            max=reserve[j];
        }
    }
    return max;
}
üîπ ‡¶∏‡¶¨ value-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá max ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá return ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

üìå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡¶≤‡ßá (‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ‡¶ß‡¶æ‡¶∞‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£)
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡ßá‡¶õ‡¶ø‡¶≤‡ßá ‚Äì ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø unique box-‡¶è ‡¶Ø‡¶æ‡¶¨‡ßá, ‡¶Ø‡ßá‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶π‡¶¨‡ßá ‡¶§‡¶æ‡¶∞ digit sum‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡ßá‡¶õ‡¶ø‡¶≤‡ßá ‚Äì ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶ï‡ßã‡¶® box-‡¶è ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡¶≤ ‡¶ú‡¶Æ‡ßá‡¶õ‡ßá‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø unordered_map ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‚Äì ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø efficiently ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø box-‡¶è‡¶∞ ‡¶¨‡¶≤ count ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã (O(1) time per insert)‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶¨ values ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá maximum count ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶¨ ‡¶è‡¶ï‡¶¶‡¶Æ perfect logical flow‡•§

üî• ‡¶ï‡ßá‡¶® ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° Accepted ‡¶π‡ßü‡ßá‡¶õ‡ßá?
‚úîÔ∏è ‡¶§‡ßÅ‡¶Æ‡¶ø constraints ‡¶Æ‡ßá‡¶®‡ßá‡¶á O(N) time-complexity-‡¶§‡ßá efficiently ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§
‚úîÔ∏è ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßã‡¶®‡ßã library ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø solution ‡¶¶‡ßá‡¶ñ‡ßá ‡¶ï‡¶∞‡ßã‡¶®‡¶ø ‚Äî logic-‡¶ü‡¶æ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§
‚úîÔ∏è ‡¶§‡ßÅ‡¶Æ‡¶ø corner cases-‡¶ì handle ‡¶ï‡¶∞‡ßá‡¶õ‡ßã ‡¶Ø‡ßá‡¶Æ‡¶® lowLimit == highLimit‡•§

üß† ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶Æ‡¶§‡ßã:
digit sum ‚Üí ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ï‡ßá ‚Äú‡¶ï‡ßã‡¶® box-‡¶è ‡¶Ø‡¶æ‡¶¨‡ßá‚Äù ‡¶∏‡ßá‡¶ü‡¶æ ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá

unordered_map ‚Üí fast frequency count ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø best

value ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá max ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶á ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø

How Accepted Test by test case:
----------------------------------
  ‡¶ö‡¶≤ ‡¶è‡¶ï‡ßá‡¶¨‡¶æ‡¶∞‡ßá ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶Ç‡¶∂ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶§‡¶æ ‡¶§‡¶ø‡¶®‡¶ü‡¶æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡ßá‡¶∏‡ßá ‡¶ï‡ßá‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶≤‡¶õ‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡¶π ‡¶¨‡ßÅ‡¶ù‡¶ø ‚Äî Bangla ‡¶§‡ßá‡•§

‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°:
cpp
Copy
Edit
class Solution 
{
public:
  int digitsum(int n)
  {
    int sum=0;
    while(n>0)
    {
      sum+=n%10;
      n=n/10;
    }
    return sum;
  }

  int countBalls(int lowLimit, int highLimit)
  {
    int n = highLimit - lowLimit + 1;
    unordered_map<int, int> freq;

    for(int i = lowLimit; i <= highLimit; i++)
    {
      freq[digitsum(i)]++;
    }

    vector<int> reserve;
    for(auto it: freq)
    {
      reserve.push_back(it.second);
    }

    int max = reserve[0];
    for(int j = 1; j < reserve.size(); j++)
    {
      if(reserve[j] > max)
      {
        max = reserve[j];
      }
    }

    return max;
  }
};
üîç ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ Bangla-‡¶§‡ßá:
‚úÖ int digitsum(int n)
‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ n ‡¶è‡¶∞ digit ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

‡¶Ø‡ßá‡¶Æ‡¶®: 123 ‚Üí 1+2+3 = 6

cpp
Copy
Edit
while(n > 0)
{
  sum += n % 10;  // ‡¶∂‡ßá‡¶∑ digit ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã
  n = n / 10;     // ‡¶∂‡ßá‡¶∑ digit ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶æ‡¶ì
}
‚úÖ int countBalls(int lowLimit, int highLimit)
n = ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡¶ü‡¶ø ‡¶¨‡¶≤ ‡¶Ü‡¶õ‡ßá ‚Üí highLimit - lowLimit + 1

‚úÖ Unordered Map: freq[digitsum(i)]++
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶≤‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ i ‡¶è‡¶∞ digitsum(i) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá box ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá count ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ (Test Case 1):

i = 1 ‚Üí digitsum(1) = 1 ‚Üí box 1 ‚Üí freq[1] = 1

i = 10 ‚Üí digitsum(10) = 1 ‚Üí freq[1] = 2

‚úÖ Vector-‡¶è ‡¶Æ‡¶æ‡¶® ‡¶∞‡¶æ‡¶ñ‡¶æ
cpp
Copy
Edit
for(auto it : freq)
{
  reserve.push_back(it.second); // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶ï‡ßü‡¶ü‡¶æ ‡¶¨‡¶≤ ‡¶Ü‡¶õ‡ßá ‡¶∏‡ßá‡¶ü‡¶æ vector ‡¶è ‡¶∞‡¶æ‡¶ñ‡¶ø
}
Test Case 1-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:

freq = {1:2, 2:1, 3:1, ..., 9:1}

reserve = [2,1,1,1,...]

‚úÖ Max ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ:
cpp
Copy
Edit
int max = reserve[0];
for(int j = 1; j < reserve.size(); j++)
{
  if(reserve[j] > max)
    max = reserve[j];
}
‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ï‡ßü‡¶ü‡¶æ ‡¶¨‡¶≤ ‡¶ï‡ßã‡¶® ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶Ü‡¶õ‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

üß™ Test Case 1: lowLimit=1, highLimit=10
Process:
cpp
Copy
Edit
for(i = 1; i <= 10; i++)
  freq[digitsum(i)]++;
i = 1 ‚Üí sum = 1 ‚Üí freq[1] = 1

i = 10 ‚Üí sum = 1 ‚Üí freq[1] = 2

freq:

vbnet
Copy
Edit
1 ‚Üí 2 balls
2 to 9 ‚Üí 1 ball each
max = 2 ‚Üí ‚úÖ Output: 2

üß™ Test Case 2: lowLimit=5, highLimit=15
Process:
cpp
Copy
Edit
for(i = 5; i <= 15; i++)
i = 5 ‚Üí sum = 5

i = 14 ‚Üí sum = 5 ‚Üí freq[5] = 2

i = 6,15 ‚Üí sum = 6 ‚Üí freq[6] = 2

freq:

Copy
Edit
5 ‚Üí 2 balls
6 ‚Üí 2 balls
others ‚Üí 1
max = 2 ‚Üí ‚úÖ Output: 2

üß™ Test Case 3: lowLimit=19, highLimit=28
Process:
i = 19 ‚Üí sum = 10 ‚Üí freq[10] = 1

i = 28 ‚Üí sum = 10 ‚Üí freq[10] = 2

freq:

Copy
Edit
10 ‚Üí 2 balls
others ‚Üí 1
max = 2 ‚Üí ‚úÖ Output: 2

‚úÖ Summary (Bangla):
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ digit sum ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã‡•§

‡¶∏‡ßá‡¶ü‡¶æ ‡¶ï‡ßã‡¶® box number ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ß‡¶∞‡ßá count ‡¶¨‡¶æ‡ßú‡¶æ‡¶ö‡ßç‡¶õ‡ßã‡•§

‡¶∂‡ßá‡¶∑‡ßá ‡¶∏‡¶¨ box ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡¶ü‡¶æ‡¶∞ count ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã‡•§

  Full Code:
---------------
  class Solution 
{
public:
  int digitsum(int n)
  {
    int sum=0;
    while(n>0)
    {
      sum+=n%10;
      n=n/10;
    }
    return sum;
  }
    int countBalls(int lowLimit, int highLimit)
     {
        int n=highLimit-lowLimit+1;
        unordered_map<int,int>freq;
        for(int i=lowLimit;i<=highLimit;i++)
        {
       
            freq[digitsum(i)]++;
         
        }
        vector<int>reserve;
        for(auto it:freq)
        {
            reserve.push_back(it.second);
        }
        int max=reserve[0];
        for(int j=1;j<reserve.size();j++)
        {
          if(reserve[j]>max)
          {
            max=reserve[j];
          }
        }
        return max;

    }
};
