üîç ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Understanding the Question)
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ n ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá:

n¬≤ ‡¶ï‡ßá Hexadecimal (base-16) ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡•§

n¬≥ ‡¶ï‡ßá Hexatrigesimal (base-36) ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡¶ø‡¶§ string ‡¶ï‡ßá ‡¶ú‡ßã‡ßú‡¶æ ‡¶¶‡¶ø‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç return ‡¶ï‡¶∞‡¶¨‡ßá‡•§

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ
Example 1:

vbnet
Copy
Edit
Input: n = 13
n¬≤ = 169 ‚Üí hexadecimal = A9
n¬≥ = 2197 ‚Üí hexatrigesimal = 1P1
Output: "A91P1"
Example 2:

yaml
Copy
Edit
Input: n = 36
n¬≤ = 1296 ‚Üí hexadecimal = 510
n¬≥ = 46656 ‚Üí hexatrigesimal = 1000
Output: "5101000"
üß† ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶≠‡¶æ‡¶¨‡¶¨‡ßá (Thinking the Approach)
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¶‡ßá‡¶ñ‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá‡¶á ‡¶¨‡ßÅ‡¶ù‡¶¨‡ßá, ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡ßÅ‡¶ü‡ßã base conversion ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá:

Base 10 ‡¶•‡ßá‡¶ï‡ßá Base 16

Base 10 ‡¶•‡ßá‡¶ï‡ßá Base 36

‡¶§‡¶æ‡¶á ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:

n¬≤ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá Hexadecimal ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì‡•§

n¬≥ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá Base 36 ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ‡¶∞ Concatenation return ‡¶ï‡¶∞‡ßã‡•§

‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶è‡¶á ‡¶§‡¶ø‡¶®‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶Ü‡¶õ‡ßá‡•§

üß™ Code Explanation Line by Line (Bangla)
cpp
Copy
Edit
class Solution {
public:
‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡ßá Solution ‡¶®‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶≤‡ßã‡•§

üî∏ Hexadecimal Converter Function: hexdec
cpp
Copy
Edit
string hexdec(int n)
{
    string ans = "";
    while(n > 0)
    {
        int rem = n % 16;
n ‡¶ï‡ßá 16 ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã ‚Äî ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® digit‡•§

cpp
Copy
Edit
        if(rem < 10)
        {
            ans += to_string(rem); // 0-9 ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        }
‡¶Ø‡¶¶‡¶ø ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ 0 ‡¶•‡ßá‡¶ï‡ßá 9 ‡¶π‡ßü, ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã‡•§

cpp
Copy
Edit
        if(rem >= 10 && rem <= 15)
        {
            ans += char('A' + (rem - 10)); // 10=A, 11=B, ..., 15=F
        }
‡¶Ø‡¶¶‡¶ø ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ 10-15 ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá 'A' ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã‡•§

cpp
Copy
Edit
        n = n / 16;
    }
    reverse(ans.begin(), ans.end()); // ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø
    return ans;
}
‡¶∂‡ßá‡¶∑‡ßá ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§

üî∏ Base-36 Converter Function: hextri
cpp
Copy
Edit
string hextri(int n)
{
    string ans = "";
    while(n > 0)
    {
        int rem = n % 36;
‡¶è‡¶¨‡¶æ‡¶∞ 36 ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã‡•§

cpp
Copy
Edit
        if(rem < 10)
        {
            ans += to_string(rem);
        }
        if(rem >= 10 && rem <= 35)
        {
            ans += char('A' + (rem - 10)); // 10=A, ..., 35=Z
        }
‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶ì ‡¶è‡¶ï‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ 0-9 ‡¶π‡¶≤‡ßá ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ, ‡¶Ü‡¶∞ 10-35 ‡¶π‡¶≤‡ßá A-Z ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã‡•§

cpp
Copy
Edit
        n = n / 36;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}
‡¶∂‡ßá‡¶∑‡ßá ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá return ‡¶ï‡¶∞‡ßã‡•§

üî∏ Main Function: concatHex36
cpp
Copy
Edit
string concatHex36(int n) 
{
    long long a = n * n;
    long long b = n * n * n;
n¬≤ ‡¶è‡¶¨‡¶Ç n¬≥ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡ßã‡•§ long long ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßã ‡¶Ø‡¶æ‡¶§‡ßá overflow ‡¶®‡¶æ ‡¶π‡ßü‡•§

cpp
Copy
Edit
    string s1 = hexdec(a);  // hexadecimal string
    string s2 = hextri(b);  // base-36 string
‡¶¶‡ßÅ‡¶ü‡ßã converter function ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßã‡•§

cpp
Copy
Edit
    string ans = s1 + s2;  // concatenate
    return ans;
}
‡¶∂‡ßá‡¶∑‡ßá ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ return ‡¶ï‡¶∞‡ßã‡•§

üß™ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø
‚úÖ Input: n = 13
cpp
Copy
Edit
n¬≤ = 169 ‚Üí hexdec(169) = "A9"
n¬≥ = 2197 ‚Üí hextri(2197) = "1P1"
Result: A91P1
‚úÖ Input: n = 36
cpp
Copy
Edit
n¬≤ = 1296 ‚Üí hexdec(1296) = "510"
n¬≥ = 46656 ‚Üí hextri(46656) = "1000"
Result: 5101000
üü¢ Time & Space Complexity:
hexdec = O(log‚ÇÅ‚ÇÜ(n¬≤)) = O(log n)

hextri = O(log‚ÇÉ‚ÇÜ(n¬≥)) = O(log n)

So, total time = O(log n)

Space: O(log n) for each string

‚úÖ ‡¶ï‡ßá‡¶®‡ßã ‡¶ï‡ßã‡¶° Accept ‡¶π‡ßü‡ßá‡¶õ‡ßá?
‡¶§‡ßÅ‡¶Æ‡¶ø base conversion ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶≤‡¶ø‡¶ñ‡ßá‡¶õ‡ßã‡•§

String concatenation ‡¶†‡¶ø‡¶ï‡¶Æ‡¶§‡ßã ‡¶ï‡¶∞‡ßá‡¶õ‡ßã‡•§

Edge case (e.g. 0, 1) ‡¶¨‡¶æ‡¶¶‡ßá ‡¶∏‡¶¨ ‡¶ï‡ßá‡¶∏ ‡¶ï‡¶≠‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§

Full Code:
-----------

  class Solution {
public:
 string hexdec(int n)
 {
    string ans="";
    while(n>0)
    {
      int rem=n%16;
      if(rem<10)
      {
        ans+=to_string(rem);
      }
      if(rem>=10&&rem<=15)
      {
        ans+=char('A'+(rem-10));
      }
      n=n/16;
    }
    reverse(ans.begin(), ans.end());
    return ans;
 }
 string hextri(int n)
 {
   string ans="";
    while(n>0)
    {
      int rem=n%36;
      if(rem<10)
      {
        ans+=to_string(rem);
      }
      if(rem>=10&&rem<=35)
      {
        ans+=char('A'+(rem-10));
      }
      n=n/36;
    }
    reverse(ans.begin(), ans.end());
    return ans;
 }
    string concatHex36(int n) 
    {
        long long a=n*n;
        long long b=n*n*n;
        string s1=hexdec(a);
        string s2=hextri(b);
        string ans=s1+s2;
        return ans;
    }
};
