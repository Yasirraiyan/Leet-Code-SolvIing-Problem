ЁЯФН ржкрзНрж░рж╢рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Understanding the Problem):

рждрзЛржорж╛ржХрзЗ ржжрзБржЯрж┐ ржмрж╛ржЗржирж╛рж░рж┐ ржЯрзНрж░рж┐ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ тАФ p ржПржмржВ qред
рждрзБржорж┐ ржЪрзЗржХ ржХрж░ржмрзЗ:

1. ржЯрзНрж░рж┐ ржжрзБржЯрж┐рж░ ржЧржаржи (structure) ржПржХржЗ ржХрж┐ ржирж╛ред


2. ржкрзНрж░рждрж┐ржЯрж┐ ржирзЛржбрзЗрж░ ржорж╛ржи (value) ржПржХржЗ ржХрж┐ ржирж╛ред




---

тЬЕ ржЯрзЗрж╕рзНржЯржХрзЗрж╕ржЧрзБрж▓рзЛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж┐:

ЁЯФ╣ Example 1:

p = [1,2,3], q = [1,2,3]
       1              1
      / \            / \
     2   3          2   3

ЁЯСЙ ржЧржаржи ржПржмржВ ржорж╛ржи тАФ ржЙржнрзЯржЗ ржПржХ тЖТ Output: true

ЁЯФ╣ Example 2:

p = [1,2], q = [1,null,2]
       1           1
      /             \
     2               2

ЁЯСЙ ржЧржаржи ржЖрж▓рж╛ржжрж╛ (ржПржХржЯрж╛рж░ left ржЖржЫрзЗ, ржЖрж░рзЗржХржЯрж╛рж░ right) тЖТ Output: false

ЁЯФ╣ Example 3:

p = [1,2,1], q = [1,1,2]
       1           1
      / \         / \
     2   1       1   2

ЁЯСЙ ржЧржаржи ржарж┐ржХ ржЖржЫрзЗ ржХрж┐ржирзНрждрзБ ржорж╛ржи ржнрж┐ржирзНржи тЖТ Output: false


---

ЁЯТб рж╕ржорж╛ржзрж╛ржирзЗрж░ ржЖржЗржбрж┐рзЯрж╛ (Thinking Approach):

рждрзБржорж┐ ржжрзБржЗржЯрж╛ ржЯрзНрж░рж┐ржХрзЗ level-order traversal (BFS) ржХрж░рзЗ ржкрзНрж░рждрж┐ржЯрж┐ node ржПрж░ pointer ржмрж╛ nullptr рж╕рж╣ ржПржХржЯрж╛ vector ржП ржПржирзЗржЫрзЛред

рждрж╛рж░ржкрж░ рж╕рзЗржЗ ржжрзБржЯрж┐ vector рждрзБрж▓ржирж╛ ржХрж░рзЗржЫрзЛ:

ржпржжрж┐ size ржЖрж▓рж╛ржжрж╛ рж╣рзЯ тЖТ false

ржпржжрж┐ ржПржХржЗ index-ржП ржПржХржЬржи null ржЖрж░рзЗржХржЬржи non-null рж╣рзЯ тЖТ false

ржпржжрж┐ ржжрзБржЗржЯрж╛ node ржЖржЫрзЗ ржХрж┐ржирзНрждрзБ рждрж╛ржжрзЗрж░ value ржнрж┐ржирзНржи рж╣рзЯ тЖТ false

рж╕ржм match рж╣рж▓рзЗ тЖТ true



---

ЁЯУШ Step-by-step ржмрзНржпрж╛ржЦрзНржпрж╛ (Line-by-line Explanation in Bangla)

vector<TreeNode*> BFS(TreeNode* p)

ЁЯФ╣ BFS() function ржкрзБрж░рзЛ tree ржХрзЗ BFS ржХрж░рзЗ рж╕ржм ржирзЛржб vector ржП рж░рж╛ржЦрзЗ, ржПржоржиржХрж┐ nullptr ржУред

if(p==nullptr) return v;

ЁЯФ╣ ржпржжрж┐ root ржЗ null рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржЦрж╛рж▓рж┐ vector ржлрзЗрж░рждред

queue<TreeNode*>q1;
q1.push(p);

ЁЯФ╣ BFS рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ queue ржжрж┐рзЯрзЗ тАФ root push ржХрж░рзЛред

while(!q1.empty())

ЁЯФ╣ ржпрждржХрзНрж╖ржг queue ржЦрж╛рж▓рж┐ ржирж╛, loop ржЪрж▓ржмрзЗред

TreeNode* curr=q1.front();
v.push_back(curr);
q1.pop();

ЁЯФ╣ queue ржерзЗржХрзЗ node ржмрзЗрж░ ржХрж░рзЗ vector ржП рж░рж╛ржЦрзЛред

if(curr!=nullptr)
{
    q1.push(curr->left);
    q1.push(curr->right);
}

ЁЯФ╣ ржпржжрж┐ curr null ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рждрж╛рж░ left ржУ right push ржХрж░рзЛ тАФ рждрж╛ ржирж╛ рж╣рж▓рзЗ nullptr ржкрзБрж╢ рж╣ржмрзЗ ржирж╛ред

ЁЯФ╣ ржПржХрж╛рж░ржгрзЗ рждрзБржорж┐ nullptr ржУ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░ржЫрзЛ vector-ржП тЖТ ржпрж╛рждрзЗ ржЧржаржи ржорзЗрж▓рж╛ржирзЛ ржпрж╛рзЯред


---

bool isSameTree(TreeNode* p, TreeNode* q)

ЁЯФ╣ Main function тАФ ржжрзБржЗ tree ржерзЗржХрзЗ vector ржмрзЗрж░ ржХрж░рзЛ BFS ржжрж┐рзЯрзЗред

if(v1.size()!=v2.size()) return false;

ЁЯФ╣ ржпржжрж┐ BFS ржПрж░ result size ржЖрж▓рж╛ржжрж╛ тЖТ ржЧржаржи ржЖрж▓рж╛ржжрж╛ тЖТ false

for(int i=0;i<v1.size();i++)
{
    if(v1[i]==nullptr&&v2[i]==nullptr) continue;
    if(v1[i]==nullptr||v2[i]==nullptr) return false;

ЁЯФ╣ ржпржжрж┐ ржжрзБржЬржирзЗржЗ null тЖТ ржарж┐ржХ ржЖржЫрзЗ
ЁЯФ╣ ржпржжрж┐ ржПржХржЬржи null ржЖрж░рзЗржХржЬржи ржирж╛ рж╣рзЯ тЖТ ржЧржаржи ржЖрж▓рж╛ржжрж╛ тЖТ false

if(v1[i]->val!=v2[i]->val)
{
    issame=false;
    break;
}

ЁЯФ╣ ржпржжрж┐ value mismatch рж╣рзЯ тЖТ false


---

ЁЯУР ржорзНржпрж╛ржерзЗржорзЗржЯрж┐ржХрзНржпрж╛рж▓ ржнрж╛ржмржирж╛:

ржПржХржЯрж╛ Binary Tree рж╣рж▓ Directed Graph (DAG)-ржПрж░ special case, ржпрзЗржЦрж╛ржирзЗ:

Root ржерзЗржХрзЗ ржбрж╛ржи ржУ ржмрж╛ржо ржжрж┐ржХрзЗ ржжрзБржЯрж┐ branch

Height ржмрж╛ level ржЕржирзБрж╕рж╛рж░рзЗ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ level-ржПрж░ node рждрзБрж▓ржирж╛ ржХрж░рж┐ред


BFS ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ level-order traversal ржХрж░рж▓рзЗ:

ржкрзНрж░рждрж┐ржЯрж┐ level-ржПрж░ рж╕ржм node ржжрзЗржЦрждрзЗ ржкрж╛рж░рж┐

ржЖржорж░рж╛ null pointers ржУ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржкрж╛рж░рж┐, рждрж╛ржЗ structure match ржУ ржХрж░рж╛ ржпрж╛рзЯред



---

тЬЕ Accepted ржХрзЗржи рж╣рзЯ?

1. рж╕ржм ржирзЛржб ржарж┐ржХржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░ржЫрзЛ (even nullptr)


2. ржЧржаржи + ржорж╛ржи ржжрзБржЗржЯрж╛ржЗ ржЪрзЗржХ ржХрж░ржЫрзЛ


3. Edge cases (e.g., both null, one null, size mismatch) ржХржнрж╛рж░ ржХрж░ржЫрзЛ




---

ЁЯФБ Test by Test Case:

Case 1:

p = [1,2,3], q = [1,2,3]
BFS(p) = [1,2,3,null,null,null,null]
BFS(q) = [1,2,3,null,null,null,null]
тЖТ Same тЖТ true

Case 2:

p = [1,2], q = [1,null,2]
BFS(p) = [1,2,null,null]
BFS(q) = [1,null,2,null]
тЖТ Mismatch at index 1 тЖТ false

Case 3:

p = [1,2,1], q = [1,1,2]
BFS(p) = [1,2,1,null,null,null,null]
BFS(q) = [1,1,2,null,null,null,null]
тЖТ Mismatch at index 1 or 2 тЖТ false

Full Code:
------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution
{
public:
    vector<TreeNode*> BFS(TreeNode* p)
    {
        vector<TreeNode*>v;
        if(p==nullptr) return v;
        queue<TreeNode*>q1;
        q1.push(p);
        while(!q1.empty())
            {
                TreeNode* curr=q1.front();
                
                v.push_back(curr);
                q1.pop();
                
                if(curr!=nullptr)
                {
                    q1.push(curr->left);
                    
                    q1.push(curr->right);
                }
                
                
                
            }
        return v;
    }
                
                
        
    bool isSameTree(TreeNode* p, TreeNode* q) 
    {
        
        vector<TreeNode*>v1=BFS(p);
        vector<TreeNode*>v2=BFS(q);
        if(v1.size()!=v2.size()) return false;
        bool issame=true;
        for(int i=0;i<v1.size();i++)
            {
                if(v1[i]==nullptr&&v2[i]==nullptr) continue;
                if(v1[i]==nullptr||v2[i]==nullptr) return false;
                
                        if(v1[i]->val!=v2[i]->val)
                        {
                            issame=false;
                            break;
                        }
                    }
                        
                        
            
        return issame;
        
    }
}; 
