üî∂ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ (Approach from Question):

> ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶¨‡¶≤‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø Queue ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶¨‡ßá:



1. push(x) ‚Üí queue-‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ insert ‡¶ï‡¶∞‡¶¨‡ßá‡•§


2. pop() ‚Üí queue-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá‡¶∞ (first) ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶∞‡¶æ‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ return ‡¶ï‡¶∞‡¶¨‡ßá‡•§


3. peek() ‚Üí queue-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá‡¶∞ (first) ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∏‡¶∞‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§


4. empty() ‚Üí queue ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá‡•§



‚û°Ô∏è ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶è‡¶ü‡¶æ FIFO (First-In-First-Out), ‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ C++ STL-‡¶è‡¶∞ queue<int> ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá‡¶á ‡¶π‡ßü‡•§


---

‚úÖ ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® (Line-by-line explanation):

class MyQueue {

‚û§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø MyQueue ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶õ‡ßã, ‡¶Ø‡ßá‡¶ü‡¶æ Queue ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§

public:
    queue<int> q;

‚û§ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø C++ STL ‡¶è‡¶∞ queue ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã ‡¶Ø‡¶æ‡¶§‡ßá int ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§


---

üî∏ Constructor:

MyQueue() {
    // ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ queue ‡¶®‡¶ø‡¶ú‡ßá‡¶á initialize ‡¶π‡ßü
}


---

üî∏ Push Function:

void push(int x) {
    q.push(x); // ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü queue-‡¶è‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá insert ‡¶π‡¶ö‡ßç‡¶õ‡ßá
}

üß† Math/Logic: FIFO-‡¶è‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ ‚Äì ‡¶Ø‡¶æ‡¶ï‡ßá ‡¶Ü‡¶ó‡ßá insert ‡¶ï‡¶∞‡ßã, ‡¶§‡¶æ‡¶ï‡ßá‡¶á ‡¶Ü‡¶ó‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
‚û°Ô∏è ‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ queue.push(x) ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡¶ø‡•§


---

üî∏ Pop Function:

int pop() {
    int ans;
    int top = -1;
    if (!q.empty()) {
        top = q.front(); // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü (queue-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ)
        q.pop();         // ‡¶∏‡ßá‡¶ü‡¶ø‡¶ï‡ßá queue ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶≤‡ßã
    }
    return top;
}

üß† Math:

Queue: [10, 20, 30]

Pop ‚Üí ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü 10 ‡¶Ø‡¶æ‡¶¨‡ßá

q.front() = 10

q.pop() ‚Üí 10 ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶≤, queue ‡¶π‡ßü [20, 30]


‚úÖ Return ‡¶ï‡¶∞‡¶ø top = 10


---

üî∏ Peek Function:

int peek() {
    int front = q.front();
    return front;
}

üß† Logic: peek() ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ø‡ßá ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶ï‡ßá ‡¶Ü‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∏‡¶∞‡¶æ‡ßü ‡¶®‡¶æ‡•§
‚û°Ô∏è ‡¶ß‡¶∞‡ßã Queue = [5, 8, 9] ‚Üí peek() ‚Üí return 5


---

üî∏ Empty Function:

bool empty() {
    bool empty = false;
    if (q.empty()) empty = true;
    return empty;
}

‚ú¥Ô∏è ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ò‡ßÅ‡¶∞‡¶ø‡ßü‡ßá ‡¶≤‡¶ø‡¶ñ‡ßá‡¶õ‡ßã, ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá:

return q.empty();

üß† Math: Queue ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶π‡¶≤‡ßá q.empty() ‚Üí true
‚û°Ô∏è ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‚Üí false


---

‚úÖ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡ßú‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∞‡ßã‡¶°‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡ßá?

Step	‡¶ï‡ßÄ ‡¶≠‡¶æ‡¶¨‡¶¨‡ßá	‡¶ï‡ßá‡¶® ‡¶ï‡¶∞‡¶¨‡ßã

1Ô∏è‚É£	‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá Queue ‡¶¨‡¶≤‡ßá‡¶õ‡ßá? FIFO ‡¶ï‡¶ø?	‡¶§‡¶æ‡¶π‡¶≤‡ßá STL queue ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
2Ô∏è‚É£	push ‡¶Æ‡¶æ‡¶®‡ßá insert at end	‚Üí q.push(x)
3Ô∏è‚É£	pop ‡¶Æ‡¶æ‡¶®‡ßá remove from front	‚Üí q.front() ‡¶®‡¶ø‡ßü‡ßá q.pop()
4Ô∏è‚É£	peek ‡¶Æ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¶‡ßá‡¶ñ‡¶¨‡ßá	‚Üí q.front() return
5Ô∏è‚É£	empty ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ	‚Üí q.empty()



---

‚úÖ Testcase ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á

MyQueue* obj = new MyQueue();
obj->push(1);         // queue = [1]
obj->push(2);         // queue = [1, 2]
int a = obj->peek();  // a = 1 (front)
int b = obj->pop();   // b = 1 (front removed), queue = [2]
bool c = obj->empty();// false, ‡¶ï‡¶æ‡¶∞‡¶£ queue ‡¶§‡ßá ‡¶è‡¶ñ‡¶®‡ßã 2 ‡¶Ü‡¶õ‡ßá


---

‚úÖ Test Result:

Function	Return	Queue State

push(1)	void	[1]
push(2)	void	[1, 2]
peek()	1	[1, 2]
pop()	1	[2]
empty()	false	[2]



---

‚úÖ ‡¶ï‡ßá‡¶® Accepted?

FIFO ‡¶Ü‡¶ö‡¶∞‡¶£ ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá follow ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§

STL queue ‡¶¶‡¶ø‡ßü‡ßá efficiently implement ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡•§

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡¶ø‡¶≤, ‡¶§‡ßá‡¶Æ‡¶®‡¶á output ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§



---

üîö ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá:

‚úÖ ‡¶Ø‡¶ñ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá queue implement ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßá:

‡¶Ø‡¶¶‡¶ø STL use allowed ‡¶π‡ßü ‚Üí ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø std::queue ‡¶®‡¶æ‡¶ì‡•§

FIFO ‡¶Æ‡¶æ‡¶®‡ßá:

push ‚Üí q.push(x)

pop ‚Üí q.front(); q.pop();

peek ‚Üí q.front()

empty ‚Üí q.empty()

Full Code:
------------

class MyQueue 
{
public:
    queue<int>q;
    MyQueue() 
    {
        
    }
    
    void push(int x) 
    {
        q.push(x);
    }
    
    int pop() 
    {
        int ans;
        int top=-1;
        if(!q.empty())
        {
            top=q.front();
            q.pop();
            //q.remove(top);
        }
      //  ans=top%st.size();
        return top;
    }
    
    int peek() 
    {
        int front=q.front();
        
        return front;
    }
    
    bool empty()
    {
        bool empty=false;
        if(q.empty()) empty=true;
         return empty;
    }
};
