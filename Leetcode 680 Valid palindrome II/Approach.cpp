‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞

üëâ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ‡¶§‡¶ñ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç‡¶ü‡¶ø‡¶ï‡ßá ‡¶™‡¶æ‡¶≤‡¶ø‡¶®‡¶°‡ßç‡¶∞‡ßã‡¶Æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶ï‡¶ø ‡¶®‡¶æ?

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶®)
class Solution
{
public:
 bool Palindrome(string a)
 {
    bool test=false;
    string b="";
    for(int j=a.size()-1;j>=0;j--)
    {
        b+=a[j];
    }
    if(a==b)
    {
        test=true;
    }
    return test;
 }

‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßÄ ‡¶π‡¶ö‡ßç‡¶õ‡ßá?

Palindrome() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶®‡¶ø‡¶≤‡ßá ‡¶â‡¶≤‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶¨‡¶æ‡¶®‡¶æ‡ßü (b)‡•§

‡¶Ø‡¶¶‡¶ø ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶Ü‡¶∞ ‡¶â‡¶≤‡ßç‡¶ü‡¶æ‡¶®‡ßã ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶π‡ßü ‚Üí true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá, ‡¶®‡¶æ‡¶π‡¶≤‡ßá false‡•§

‡¶ï‡¶æ‡¶ú‡¶ü‡¶æ ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶™‡¶æ‡¶≤‡¶ø‡¶®‡¶°‡ßç‡¶∞‡ßã‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

 bool validPalindrome(string s)
 {
    if(Palindrome(s)) return true;


‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡¶≤‡ßá‡¶® s ‡¶Ü‡¶ó‡ßá‡¶á ‡¶™‡¶æ‡¶≤‡¶ø‡¶®‡¶°‡ßç‡¶∞‡ßã‡¶Æ ‡¶ï‡¶ø ‡¶®‡¶æ‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶π‡ßü ‚Üí ‡¶Ü‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á, true ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡¶ø‡¶®‡•§

    int low=0;
    int high=s.size()-1;
    if(!Palindrome(s))
    {
        while(low<high)
        {
            if(s[low]==s[high])
            {
                low++;
                high--;
            }


low ‡¶è‡¶¨‡¶Ç high ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶≤‡ßá‡¶® ‚Üí ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ (low=0), ‡¶°‡¶æ‡¶® ‡¶¶‡¶ø‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ (high=n-1)‡•§

‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶¨‡¶æ‡¶Æ ‡¶Ü‡¶∞ ‡¶°‡¶æ‡¶® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‚Üí ‡¶è‡¶ó‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶® (low++, high--)‡•§

‡¶Ø‡¶¶‡¶ø mismatch ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≤‡ßÅ‡¶™ ‡¶∂‡ßá‡¶∑‡ßá true ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

            else
            {
                string a = s.substr(low+1, high-low);    // skip left
                string b = s.substr(low, high-low);      // skip right
                if(Palindrome(a)||Palindrome(b)) return true;
                else return false; 
            }


‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï‡•§

‡¶Ø‡¶¶‡¶ø mismatch ‡¶π‡ßü (s[low] != s[high]):

Option 1: ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶® ‚Üí a = s.substr(low+1, high-low)

Option 2: ‡¶°‡¶æ‡¶® ‡¶¶‡¶ø‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶® ‚Üí b = s.substr(low, high-low)

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® a ‡¶¨‡¶æ b ‡¶è‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶™‡¶æ‡¶≤‡¶ø‡¶®‡¶°‡ßç‡¶∞‡ßã‡¶Æ ‡¶π‡¶≤‡ßá ‚Üí return true.

‡¶®‡¶æ‡¶π‡¶≤‡ßá return false.

        }
    }
    return true;
 }
};


‡¶≤‡ßÅ‡¶™ ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶Æ‡¶æ‡¶®‡ßá mismatch ‡¶™‡¶æ‡¶á‡¶®‡¶ø ‡¶¨‡¶æ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶†‡¶ø‡¶ï ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá ‚Üí true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ü‡ßç‡¶∞‡ßá‡¶∏
Example 1: s = "aba"

‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá‡¶á Palindrome("aba") = true ‚Üí return true.

Example 2: s = "abca"

Palindrome("abca") = false.

low=0, high=3 ‚Üí 'a'=='a' ‚Üí low=1, high=2

‡¶è‡¶ñ‡¶® 'b' != 'c' mismatch

skip left ‚Üí "ca" ‚Üí ‡¶™‡¶æ‡¶≤‡¶ø‡¶®‡¶°‡ßç‡¶∞‡ßã‡¶Æ ‡¶®‡¶æ

skip right ‚Üí "bc" ‚Üí ‡¶™‡¶æ‡¶≤‡¶ø‡¶®‡¶°‡ßç‡¶∞‡ßã‡¶Æ ‡¶®‡¶æ

‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá substr ‡¶è‡¶ï‡¶ü‡ßÅ tricky ‚Üí actually ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡ßá "bc" ‡¶Ü‡¶∞ "ca" ‚Üí ‡¶Ø‡ßá‡¶ü‡¶æ fail ‡¶ï‡¶∞‡¶¨‡ßá‡•§
(‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° accepted ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ length calculation‡ßá mismatch ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ì ‡¶è‡¶ï‡¶™‡¶æ‡¶∂ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶†‡¶ø‡¶ï substring ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶õ‡ßá‡•§)

Example 3: s = "abc"

Palindrome("abc") = false.

mismatch ‡¶™‡ßá‡¶≤‡ßá skip ‡¶ï‡¶∞‡¶≤‡ßá "bc" ‡¶Ü‡¶∞ "ab" ‚Üí ‡¶ï‡ßã‡¶®‡ßã‡¶ü‡¶æ‡¶á ‡¶™‡¶æ‡¶≤‡¶ø‡¶®‡¶°‡ßç‡¶∞‡ßã‡¶Æ ‡¶®‡¶æ ‚Üí false ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®‡•§

‡¶ú‡¶ü‡¶ø‡¶≤‡¶§‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Complexity)

Palindrome() ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ O(n).

worst case-‡¶è mismatch ‡¶è‡¶≤‡ßá ‡¶¶‡ßÅ‡¶á‡¶¨‡¶æ‡¶∞ substring+Palindrome ‡¶ï‡¶≤ ‚Üí O(n¬≤) worst case.

‡¶§‡¶¨‡ßÅ‡¶ì ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ input limit 10^5 ‡¶π‡¶≤‡ßá‡¶ì ‡¶¨‡ßá‡¶∂‡¶ø mismatch ‡¶π‡ßü ‡¶®‡¶æ (‡¶™‡ßç‡¶∞‡¶•‡¶Æ mismatch-‡¶è ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑)‡•§

‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ (Why Accepted?)

‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶∏‡¶†‡¶ø‡¶ï ‚Üí ‡¶¶‡ßÅ‡¶á-‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá mismatch ‡¶è‡¶≤‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡¶®‡•§

‡¶Ø‡¶¶‡¶ø‡¶ì ‡¶ï‡ßã‡¶°‡ßá substr ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡ßü ‡¶Ö‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶ï‡¶™‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá (O(n) space+time), ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ test case-‡¶è‡¶ì efficient enough, ‡¶§‡¶æ‡¶á Accepted.


Full Code:
-----------

  class Solution
 {
public:
 bool Palindrome(string a)
 {
    bool test=false;
    string b="";
    for(int j=a.size()-1;j>=0;j--)
    {
        b+=a[j];
    }
    if(a==b)
    {
        test=true;
    }
    return test;
 }
    bool validPalindrome(string s)
     {
        if(Palindrome(s)) return true;
        int low=0;
        int high=s.size()-1;
        if(!Palindrome(s))
        {
            while(low<high)
            {
                if(s[low]==s[high])
                {
                    low++;
                    high--;
                }
                  else
                 {
                  string a = s.substr(low+1, high-low);    // skip left
                string b = s.substr(low, high-low);     
                if(Palindrome(a)||Palindrome(b)) return true;
                else
                return false; 
            }
        }
        }
        return true;
    }
};
