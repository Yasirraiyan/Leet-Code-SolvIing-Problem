рждрзБржорж┐ ржпрзЗ ржкрзНрж░рж╢рзНржиржЯрж╛ ржмрж▓рзЗржЫрзЛ, рж╕рзЗржЯрж╛рж░ ржорзВрж▓ ржмрж┐рж╖рзЯ рж╣ржЪрзНржЫрзЗ:
ржжрзБржЗржЯрж┐ ржнрж┐ржирзНржи ржЕрзНржпрж╛рж░рзЗ (nums1 ржУ nums2) ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред
рждрзЛржорж╛ржХрзЗ ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗ:

answer1 тАУ ржХрждржЧрзБрж▓рзЛ index i ржЖржЫрзЗ ржПржоржи, ржпрж╛ржжрзЗрж░ nums1[i] ржорж╛ржи nums2 рждрзЗ ржЖржЫрзЗред

answer2 тАУ ржХрждржЧрзБрж▓рзЛ index i ржЖржЫрзЗ ржПржоржи, ржпрж╛ржжрзЗрж░ nums2[i] ржорж╛ржи nums1 рждрзЗ ржЖржЫрзЗред

ржЙржжрж╛рж╣рж░ржг:
text
Copy
Edit
Input: nums1 = [2,3,2], nums2 = [1,2]
Output: [2,1]
ЁЯСЙ nums1 ржПрж░ index 0 ржПржмржВ 2 рждрзЗ 2 ржЖржЫрзЗ ржпрж╛ nums2-рждрзЗ ржЖржЫрзЗ тЖТ count = 2
ЁЯСЙ nums2 ржПрж░ index 1 рждрзЗ 2 ржЖржЫрзЗ ржпрж╛ nums1-ржП ржЖржЫрзЗ тЖТ count = 1
тЖТ Final ржЙрждрзНрждрж░: [2,1]

тЬЕ Step-by-step Thinking & Approach (Bangla)
ржкрзНрж░ржержорзЗ ржкрзНрж░рж╢рзНржиржЯрж╛ ржкрзЬрзЗржЗ ржнрж╛ржмрзЛ:

тАЬржЖржорж╛рж░ nums1[i] ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ element ржХрж┐ nums2 ржПрж░ ржоржзрзНржпрзЗ ржЖржЫрзЗ?тАЭ

ржЖрж░ ржарж┐ржХ ржПржХржЗржнрж╛ржмрзЗ nums2[i] ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ element ржХрж┐ nums1 ржПрж░ ржоржзрзНржпрзЗ ржЖржЫрзЗ?

рждрзБржорж┐ ржпржжрж┐ ржкрзНрж░рждрж┐ржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржмрж╛рж░ржмрж╛рж░ ржЦрзБржБржЬрждрзЗ ржпрж╛ржУ O(n * m) рж╣ржмрзЗ, ржпрзЗржЯрж╛ рж╕ржорзЯ ржирж╖рзНржЯ ржХрж░рзЗред
рждрж╛ржЗ ржЖржорж░рж╛ unordered_set ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ тАУ ржХрж╛рж░ржг ржПрждрзЗ ржЦрзЛржБржЬрж╛рж░ рж╕ржорзЯ O(1)ред

unordered_set ржПрж░ ржХрж╛ржЬ:

ржПржЯрж╛ ржПржХржЯрж╛ HashSet ржЯрж╛ржЗржк ржбрзЗржЯрж╛ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ред ржПржХржЯрж╛ ржнрзНржпрж╛рж▓рзБ ржЖржЫрзЗ ржХрж┐ржирж╛ рж╕рзЗржЯрж╛ ржЦрзБржм ржжрзНрж░рзБржд ржЪрзЗржХ ржХрж░рж╛ ржпрж╛рзЯред

Approach:

ржкрзНрж░ржержорзЗ nums1 ржЖрж░ nums2 ржПрж░ рж╕ржм ржнрзНржпрж╛рж▓рзБ ржжрж┐рзЯрзЗ ржжрзБржЗржЯрж╛ unordered_set ржмрж╛ржирж╛ржУ: set1 ржПржмржВ set2

рждрж╛рж░ржкрж░ nums1 ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ element ржЪрзЗржХ ржХрж░рзЛ set2 рждрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ тАУ ржпржжрж┐ ржерж╛ржХрзЗ, count2 ржмрж╛рзЬрж╛ржУред

ржЖржмрж╛рж░ nums2 ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ element ржЪрзЗржХ ржХрж░рзЛ set1 рждрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ тАУ ржпржжрж┐ ржерж╛ржХрзЗ, count1 ржмрж╛рзЬрж╛ржУред

ЁЯФН Code Explanation (Bangla line by line)
cpp
Copy
Edit
class Solution 
{
public:
    vector<int> findIntersectionValues(vector<int>& nums1, vector<int>& nums2) 
    {
        unordered_set<int> set1;
        unordered_set<int> set2;
ЁЯФ╣ set1 рж╣ржЪрзНржЫрзЗ nums1 ржПрж░ unique values рж░рж╛ржЦржмрзЗ
ЁЯФ╣ set2 рж╣ржЪрзНржЫрзЗ nums2 ржПрж░ unique values рж░рж╛ржЦржмрзЗ

cpp
Copy
Edit
        int count1=0;
        int count2=0;
ЁЯФ╣ count1 = ржХрждржЧрзБрж▓рзЛ index nums2-ржПрж░ ржоржзрзНржпрзЗ ржЖржЫрзЗ ржпрж╛ nums1-ржП ржЫрж┐рж▓
ЁЯФ╣ count2 = ржХрждржЧрзБрж▓рзЛ index nums1-ржПрж░ ржоржзрзНржпрзЗ ржЖржЫрзЗ ржпрж╛ nums2-ржП ржЫрж┐рж▓

cpp
Copy
Edit
        for(int i=0;i<nums1.size();i++)
        {
            set1.insert(nums1[i]);
        }
ЁЯФ╣ nums1 ржПрж░ рж╕ржм element set1 ржП рж░рж╛ржЦржЫрж┐ ржпрж╛рждрзЗ ржкрж░рзЗ ржЦрзЛржБржЬ ржХрж░рж╛ рж╕рж╣ржЬ рж╣рзЯ

cpp
Copy
Edit
        for(int j=0;j<nums2.size();j++)
        {
            set2.insert(nums2[j]);
        }
ЁЯФ╣ ржПржХржЗржнрж╛ржмрзЗ nums2 ржПрж░ рж╕ржм ржнрзНржпрж╛рж▓рзБ set2 рждрзЗ рж░рж╛ржЦржЫрж┐

cpp
Copy
Edit
        vector<int> ans;
ЁЯФ╣ рж╢рзЗрж╖рзЗ return ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж╛ vector ржмрж╛ржирж╛рж▓рж╛ржо

ЁЯФ╜ ржПржЦржи рж╢рзБрж░рзБ ржХрж░ржмрзЛ ржЧржгржирж╛:

cpp
Copy
Edit
        for(int k=0;k<nums1.size();k++)
        {
            if(set2.find(nums1[k])!=set2.end())
            {
                count2++;
            }
        }
ЁЯФ╣ nums1[k] ржПрж░ ржорж╛ржи set2 рждрзЗ ржерж╛ржХрж▓рзЗ, рждрж╛рж░ ржорж╛ржирзЗ nums1[k] тЖТ nums2 рждрзЗ ржЖржЫрзЗ
ЁЯФ╣ рждрж╛ржЗ count2++

cpp
Copy
Edit
        for(int i=0;i<nums2.size();i++)
        {
            if(set1.find(nums2[i])!=set1.end())
            {
                count1++;
            }
        }
ЁЯФ╣ ржарж┐ржХ ржПржХржЗржнрж╛ржмрзЗ, nums2[i] ржПрж░ ржорж╛ржи ржпржжрж┐ set1 рждрзЗ ржерж╛ржХрзЗ тЖТ nums2[i] тЖТ nums1 рждрзЗ ржЖржЫрзЗ
ЁЯФ╣ рждрж╛ржЗ count1++

cpp
Copy
Edit
        ans.push_back(count2);
        ans.push_back(count1);
        return ans;
    }
};
ЁЯФ╣ рж╢рзЗрж╖ржорзЗрж╢ count2 ржЖрж░ count1 ржХрзЗ return ржХрж░рж▓рж╛ржо тЖТ answer1, answer2 рж╣рж┐рж╕рзЗржмрзЗ

тЬЕ Test with Example:
Input:
cpp
Copy
Edit
nums1 = [4,3,2,3,1]
nums2 = [2,2,5,2,3,6]
Execution:
set1 = {1, 2, 3, 4}

set2 = {2, 3, 5, 6}

тЬФя╕П nums1 тЖТ index 1 (3), 2 (2), 3 (3) тЖТ all in set2 тЖТ count2 = 3
тЬФя╕П nums2 тЖТ index 0 (2), 1 (2), 3 (2), 4 (3) тЖТ in set1 тЖТ count1 = 4

тЖТ Final Output: [3, 4]

ЁЯФЪ Complexity:
Time: O(n + m) тЖТ ржПржХржмрж╛рж░ ржХрж░рзЗ рж╕ржм loop (nums1 + nums2)

Space: O(n + m) тЖТ ржжрзБржЗржЯрж╛ set ржПрж░ ржЬржирзНржп

FUll Code:
----------

  class Solution 
{
public:
    vector<int> findIntersectionValues(vector<int>& nums1, vector<int>& nums2) 
    {
        unordered_set<int>set1;
        unordered_set<int>set2;
        int count1=0;
        int count2=0;
        for(int i=0;i<nums1.size();i++)
        {
          set1.insert(nums1[i]);
        }
        for(int j=0;j<nums2.size();j++)
        {
          set2.insert(nums2[j]);
        }
        vector<int>ans;
        for(int k=0;k<nums1.size();k++)
        {
          if(set2.find(nums1[k])!=set2.end())
          {
            count2++;
          }
        }
        for(int i=0;i<nums2.size();i++)
        {
          if(set1.find(nums2[i])!=set1.end())
          {
            count1++;
          }
        }
        ans.push_back(count2);
        ans.push_back(count1);
        return ans;
        

        
    }
};
