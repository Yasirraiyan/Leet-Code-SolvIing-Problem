‚úÖ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶ø (Problem Summary - ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ):
‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ProductOfNumbers ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶Æ‡ßá‡¶•‡¶° ‡¶•‡¶æ‡¶ï‡¶¨‡ßá: add(int num) ‡¶ì getProduct(int k)

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ getProduct(k) ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü, ‡¶∂‡ßá‡¶∑‡ßá‡¶∞ k ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‚úÖ Naive/‡¶∏‡ßã‡¶ú‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® (‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶ï‡ßã‡¶°):
cpp
Copy
Edit
class ProductOfNumbers {
public:
    vector<int>stream;

    ProductOfNumbers() {
        stream.clear();
    }

    void add(int num) {
        stream.push_back(num);
    }

    int getProduct(int k) {
        if(k > stream.size()) return 0;

        int p = 1;
        for(int i = stream.size() - k; i < stream.size(); i++) {
            p *= stream[i];
            if(p == 0) return 0; // shortcut: ‡¶Ø‡¶¶‡¶ø 0 ‡¶π‡ßü, ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ 0
        }
        return p;
    }
};
‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø:
cpp
Copy
Edit
ProductOfNumbers productOfNumbers;
productOfNumbers.add(3);        // stream = [3]
productOfNumbers.add(0);        // stream = [3, 0]
productOfNumbers.add(2);        // stream = [3, 0, 2]
productOfNumbers.add(5);        // stream = [3, 0, 2, 5]
productOfNumbers.add(4);        // stream = [3, 0, 2, 5, 4]

productOfNumbers.getProduct(2); // 5*4 = 20
productOfNumbers.getProduct(3); // 2*5*4 = 40
productOfNumbers.getProduct(4); // 0*2*5*4 = 0
productOfNumbers.add(8);        // stream = [3, 0, 2, 5, 4, 8]
productOfNumbers.getProduct(2); // 4*8 = 32
‚ö†Ô∏è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (Time Complexity):
getProduct(k) ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡¶æ‡¶∞ k ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‚Üí O(k)‡•§

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶¨‡¶≤‡ßá‡¶õ‡ßá, k ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá 4*10^4 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§! ‡¶§‡¶æ‡¶á ‡¶è‡¶á ‡¶ï‡ßã‡¶° Slow ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

‚úÖ Efficient (Optimized) ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‚Üí Prefix Product approach (O(1))
‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ prefix product array ‡¶∞‡¶æ‡¶ñ‡¶¨ ‚Äî ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá prefix[i] ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤ stream[0]*stream[1]*...*stream[i] ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤‡•§

‡¶Ø‡ßá‡¶Æ‡¶®:

makefile
Copy
Edit
stream:       [3, 0, 2, 5, 4, 8]
prefixProd:   [3, 0, 2, 10, 40, 320] (wrong if zero in between)

‚û°Ô∏è ‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶¨:
- ‡¶Ø‡¶ñ‡¶® 0 ‡¶Ü‡¶∏‡¶¨‡ßá, prefixProduct ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶¨‡•§
üí° ‡¶®‡¶§‡ßÅ‡¶® Strategy:
cpp
Copy
Edit
class ProductOfNumbers {
public:
    vector<int> prefixProd; // store running product
    int zeroIndex = -1;     // index where last 0 occurred

    ProductOfNumbers() {
        prefixProd.push_back(1); // initial 1 (neutral element of multiplication)
    }

    void add(int num) {
        if(num == 0) {
            prefixProd.clear();
            prefixProd.push_back(1); // reset after 0
        } else {
            int last = prefixProd.back();
            prefixProd.push_back(last * num);
        }
    }

    int getProduct(int k) {
        if(k >= prefixProd.size()) return 0; // contains 0

        int n = prefixProd.size();
        return prefixProd[n - 1] / prefixProd[n - 1 - k];
    }
};
‚úÖ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü):
prefixProd[i] ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ product(stream[0..i-1])

‡¶Ø‡¶¶‡¶ø 0 ‡¶Ü‡¶∏‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßÅ‡¶∞‡¶æ prefix ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì‡•§ ‡¶ï‡¶æ‡¶∞‡¶£ 0 ‡¶è‡¶∞ ‡¶™‡¶∞‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü 0 ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

getProduct(k) ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:

‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ prefix ‡¶Æ‡¶æ‡¶® ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶á ‚Üí prefix[n] / prefix[n-k]

‡¶è‡¶§‡ßá ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ï‡ßç‡¶∏‡¶ø‡¶ü‡¶ø ‡¶π‡ßü O(1)

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø:
cpp
Copy
Edit
Input:
["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

Prefix ‡¶è‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®:
- add(3) => [1, 3]
- add(0) => reset ‚Üí [1]
- add(2) => [1, 2]
- add(5) => [1, 2, 10]
- add(4) => [1, 2, 10, 40]

getProduct(2) => 40 / 10 = 4  
getProduct(3) => 40 / 2 = 20  
getProduct(4) => 40 / 1 = 40, but stream has 0 ‚Üí reset point ‚Üí ‚ùå wrong! ‚Üí handled by size check ‚Üí return 0

add(8) => [1, 2, 10, 40, 320]
getProduct(2) => 320 / 40 = 8
üß† Time & Space Complexity:
Operation	Time Complexity
add(num)	O(1)
getProduct(k)	O(1)

Space: O(n), where n is number of non-zero elements added since last 0.

üîé Bonus Test Code (LeetCode style):
cpp
Copy
Edit
ProductOfNumbers productOfNumbers;
productOfNumbers.add(3);        
productOfNumbers.add(0);        
productOfNumbers.add(2);        
productOfNumbers.add(5);        
productOfNumbers.add(4);        
cout << productOfNumbers.getProduct(2) << endl; // 20
cout << productOfNumbers.getProduct(3) << endl; // 40
cout << productOfNumbers.getProduct(4) << endl; // 0
productOfNumbers.add(8);        
cout << productOfNumbers.getProduct(2) << endl; // 32
üîö ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ O(k) time ‡¶è ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§, ‡¶†‡¶ø‡¶ï ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶≤‡ßá‡¶ì large input ‡¶è slow‡•§

Prefix product ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá O(1) time ‡¶è ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

Prefix array reset ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ø‡¶ñ‡¶® 0 ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

Full Code:
----------

class ProductOfNumbers 
{
public:
// ProductOfNumbers p;
vector<int>stream;
    ProductOfNumbers()
     {
       // this->p=stream;
       this->stream=stream;
    }
    
    void add(int num)
     {
        stream.push_back(num);
    }
    
    int getProduct(int k) 
    {
      if(k>stream.size()) return 0;
       int p=stream[stream.size()-1];
      if (k == 1) return p == 0 ? 0 : p;
        //int p=stream[stream.size()-1];
        int count=0;
      for(int j=stream.size()-2;j>=0;j--)
      {
         p*=stream[j];
         count++;
         if(count==k-1)
         {
          break;
         }
      }
      return p;
    }
};

/**
 * Your ProductOfNumbers object will be instantiated and called as such:
 * ProductOfNumbers* obj = new ProductOfNumbers();
 * obj->add(num);
 * int param_2 = obj->getProduct(k);
 */
