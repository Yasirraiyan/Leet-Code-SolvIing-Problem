ЁЯФН Step 1: ржкрзНрж░ржмрж▓рзЗржо ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Reading the Problem Carefully)
ржЪрж┐ржирзНрждрж╛ ржХрж░рзЛ:
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ BST ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред BST-ржПрж░ ржЧрзБржгржЧржд ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╣рж▓рзЛ тАУ

ржмрж╛ржо рж╕рж╛ржмржЯрзНрж░рж┐рж░ ржкрзНрж░рждрж┐ржЯрж┐ ржнрзНржпрж╛рж▓рзБ root.val ржПрж░ ржЪрзЗрзЯрзЗ ржЫрзЛржЯ,

ржбрж╛ржи рж╕рж╛ржмржЯрзНрж░рж┐рж░ ржкрзНрж░рждрж┐ржЯрж┐ ржнрзНржпрж╛рж▓рзБ root.val ржПрж░ ржЪрзЗрзЯрзЗ ржмрзЬред

рждрзЛржорж╛рж░ ржХрж╛ржЬ: BST-ржПрж░ ржпрзЗржХрзЛржирзЛ ржжрзБржЗ ржнрж┐ржирзНржи ржнрж┐ржирзНржи ржирзЛржбрзЗрж░ ржоржзрзНржпрзЗ ржпрзЗржЗ ржжрзБржЗржЯрж╛ ржнрзНржпрж╛рж▓рзБрж░ absolute difference рж╕ржмржЪрзЗрзЯрзЗ ржХржо, рж╕рзЗржЯрж╛ ржмрзЗрж░ ржХрж░рж╛ред

ЁЯСЙ ржоржирзЗ рж░рж╛ржЦрзЛ:
Minimum absolute difference ржкрзЗрждрзЗ ржЪрж╛ржЗрж▓рзЗ sorted order-ржП adjacent element ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ difference рж╣рж┐рж╕рзЗржм ржХрж░рж▓рзЗржЗ рж╣рзЯред

ЁЯТб Approach ржЪрж┐ржирзНрждрж╛:
тЬЕ Core idea:
BST-ржПрж░ inorder traversal ржХрж░рж▓рзЗ ржнрзНржпрж╛рж▓рзБржЧрзБрж▓рзЛ ascending order-ржП ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред ржХрж┐ржирзНрждрзБ рждрзБржорж┐ ржПржЦрж╛ржирзЗ BFS (level order traversal) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЛ, рждрж╛рж░ржкрж░ sort ржХрж░рзЗржЫрзЛред ржПржЯрж╛ ржХрж╛ржЬ ржХрж░ржмрзЗ ржарж┐ржХржЗ, ржХрж┐ржирзНрждрзБ optimal ржирж╛ (time: O(n log n))ред

тЬЕ рждрзЛржорж╛рж░ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ (line-by-line Bangla)
cpp
Copy
Edit
vector<int>BFS(TreeNode* root)
тЮбя╕П ржПржХржЯрж┐ helper ржлрж╛ржВрж╢ржи ржмрж╛ржирж┐рзЯрзЗржЫрзЛ, ржпрзЗржЯрж╛ BST-ржПрж░ рж╕ржм node-ржХрзЗ level order traversal (BFS) ржХрж░рзЗ vector<int> рждрзЗ рж░рзЗржЦрзЗ ржжрзЗржмрзЗред

cpp
Copy
Edit
queue<TreeNode*>q;
q.push(root);
vector<int>v;
тЮбя╕П queue ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ BFS ржХрж░ржЫрзЛ, ржЖрж░ v рждрзЗ ржнрзНржпрж╛рж▓рзБржЧрзБрж▓рзЛ рж░рж╛ржЦржЫрзЛред

cpp
Copy
Edit
while(!q.empty())
{
    TreeNode* front = q.front();
тЮбя╕П queue ржерзЗржХрзЗ рж╕рж╛ржоржирзЗ ржпрзЗржЯрж╛ ржЖржЫрзЗ рж╕рзЗржЯрж╛ ржмрзЗрж░ ржХрж░ржЫрзЛред

cpp
Copy
Edit
    if(front!=nullptr)
    {
        v.push_back(front->val);
    }
тЮбя╕П ржпржжрж┐ ржирж╛рж▓ ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рждрж╛рж░ ржнрзНржпрж╛рж▓рзБ v рждрзЗ рж░рж╛ржЦржЫрзЛред

cpp
Copy
Edit
    if(front->left!=nullptr)
    {
        q.push(front->left);
    }
    if(front->right!=nullptr)
    {
        q.push(front->right);
    }
    q.pop();
}
тЮбя╕П рждрж╛рж░ ржмрж╛ржо ржУ ржбрж╛ржи рж╕ржирзНрждрж╛ржи ржерж╛ржХрж▓рзЗ queue рждрзЗ ржжрж┐ржЪрзНржЫрзЛ ржПржмржВ рж╕рж╛ржоржирзЗ ржерзЗржХрзЗ pop ржХрж░ржЫрзЛред ржПржнрж╛ржмрзЗ рж╕ржм ржирзЛржб ржПржХржмрж╛рж░ ржХрж░рзЗ ржнрж┐ржЬрж┐ржЯ рж╣ржмрзЗред

cpp
Copy
Edit
int findmin(vector<int>&arr)
тЮбя╕П ржПржЗ ржлрж╛ржВрж╢ржиржЯрж╛ vector ржерзЗржХрзЗ ржорж┐ржирж┐ржорж╛ржо ржнрзНржпрж╛рж▓рзБ ржмрзЗрж░ ржХрж░рзЗ ржжрзЗрзЯред

cpp
Copy
Edit
sort(vv.begin(), vv.end());
тЮбя╕П BFS ржжрж┐рзЯрзЗ ржпрзЗрж╣рзЗрждрзБ sorted order ржкрж╛ржЗржирж┐, рждрж╛ржЗ ржПржЦржи sort ржХрж░ржЫрзЛред

cpp
Copy
Edit
for(int j=0; j<vv.size(); j++)
{
    if(j+1<vv.size())
    {
        r.push_back(abs(vv[j] - vv[j+1]));
    }
}
тЮбя╕П Sorted array ржерзЗржХрзЗ adjacent element ржЧрзБрж▓рзЛрж░ absolute difference ржирж┐ржЪрзНржЫрзЛред

cpp
Copy
Edit
int mindiff = findmin(r);
return mindiff;
тЮбя╕П рж╕ржм ржбрж┐ржлрж╛рж░рзЗржирзНрж╕ ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржЫрзЛред

ЁЯзк Test Case ржжрж┐рзЯрзЗ Line-by-Line ржЪрж▓рж┐
Example 1:
css
Copy
Edit
Input: root = [4,2,6,1,3]
BST Tree:

markdown
Copy
Edit
      4
     / \
    2   6
   / \
  1   3
BFS Output:
v = [4,2,6,1,3]
Sorted: vv = [1,2,3,4,6]

Adjacent differences:

|2-1| = 1

|3-2| = 1

|4-3| = 1

|6-4| = 2

So, min = 1 тЗТ тЬЕ Output: 1

тП▒я╕П Time & Space Complexity:
Type	Value
Time	O(n log n) тЖТ for sort
Space	O(n) тЖТ for vector storage

Full Code:
-----------

  /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
vector<int>BFS(TreeNode* root)
{
  queue<TreeNode*>q;
  q.push(root);
  vector<int>v;
  while(!q.empty())
  {
    TreeNode* front=q.front();
    if(front!=nullptr)
    {
    v.push_back(front->val);
    }
    if(front->left!=nullptr)
    {
      q.push(front->left);
    }
     if(front->right!=nullptr)
    {
      q.push(front->right);
    }
    q.pop();
  }
  return v;
}
int findmin(vector<int>&arr)
{
  int min=arr[0];
  for(int i=1;i<arr.size();i++)
  {
    if(arr[i]<min)
    {
      min=arr[i];
    }
  }
  return min;
}
    int getMinimumDifference(TreeNode* root) 
    {
        vector<int>vv=BFS(root);
        vector<int>r;
        sort(vv.begin(),vv.end());
        for(int j=0;j<vv.size();j++)
        {
          if(j+1<vv.size())
          {
            r.push_back(abs(vv[j]-vv[j+1]));
          }
        }
        int mindiff=findmin(r);
        return mindiff;
    }
};
