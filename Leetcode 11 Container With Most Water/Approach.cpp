ред

ЁЯФО Problem ржкрзЬрж╛рж░ рж╕ржорзЯ ржХрзА ржЪрж┐ржирзНрждрж╛ ржХрж░рждрзЗ рж╣ржмрзЗ?

ржкрзНрж░рж╢рзНржирзЗ ржмрж▓рж╛ ржЖржЫрзЗ:

ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ height[] ржирж╛ржорзЗ ржПржХржЯрж╛ array ржЖржЫрзЗ, ржкрзНрж░рждрж┐ржЯрж┐ index-ржП ржПржХржЯрж╛ vertical line ржЖржЫрзЗред

i-th line ржПрж░ coordinate рж╣рж▓рзЛ (i, 0) ржерзЗржХрзЗ (i, height[i]) ржкрж░рзНржпржирзНрждред

ржжрзБржЗржЯрж╛ line ржЖрж░ x-axis ржорж┐рж▓рзЗ ржПржХржЯрж╛ container ржмрж╛ржирж╛ржмрзЗред

Container ржПрж░ area = (distance between two lines) ├Ч (minimum of two line heights)
ЁЯСЙ ржХрж╛рж░ржг ржкрж╛ржирж┐ рж╕ржмрж╕ржорзЯ ржЫрзЛржЯ рж▓рж╛ржЗржирзЗрж░ ржЙржкрж░рзЗ ржжрж┐рзЯрзЗ ржмрзЗрж░рж┐рзЯрзЗ ржпрж╛ржмрзЗред

ржПржЦржи goal рж╣рж▓рзЛ max area ржмрзЗрж░ ржХрж░рж╛ред

ЁЯза ржкрзНрж░ржержорзЗ ржорж╛ржерж╛рзЯ ржЖрж╕рж╛ brute force approach:

рж╕ржм pair (i, j) ржирж┐рзЯрзЗ ржжрзЗржЦрж┐ред
Area = (j - i) * min(height[i], height[j])

рж╕ржмржЧрзБрж▓рзЛ area ржмрзЗрж░ ржХрж░рж┐, max ржЯрж╛ ржирзЗржЗред

ржХрж┐ржирзНрждрзБ complexity рж╣ржмрзЗ O(n┬▓)ред
n ржмрзЬ рж╣рж▓рзЗ (ржпрзЗржоржи 10тБ╡) time limit exceed рж╣ржмрзЗред

ЁЯТб ржЪрж┐ржирзНрждрж╛: Efficient solution ржжрж░ржХрж╛рж░

ржкрзНрж░рж╢рзНржирзЗ array sorted ржирж╛, рждрж╛ржЗ sorting ржХрж░рзЗ ржХрж╛ржЬ рж╣ржмрзЗ ржирж╛ред
ржХрж┐ржирзНрждрзБ ржЖржорж░рж╛ observe ржХрж░рждрзЗ ржкрж╛рж░рж┐:

Area ржирж┐рж░рзНржнрж░ ржХрж░ржЫрзЗ ржжрзБржЗржЯрж╛ ржЬрж┐ржирж┐рж╕рзЗрж░ ржЙржкрж░:

Width = (right - left)

Height = min(height[left], height[right])

Width ржмрзЗрж╢рж┐ рж╣ржмрзЗ ржпржжрж┐ ржЖржорж░рж╛ ржжрзВрж░рзЗрж░ index ржирзЗржЗ, height ржмрзЗрж╢рж┐ рж╣ржмрзЗ ржпржжрж┐ line ржПрж░ height ржмрзЬ рж╣рзЯред

тЪб Two Pointer Approach (Greedy Idea)

рж╢рзБрж░рзБрждрзЗ left = 0, right = n-1 ржирж┐ржЗ тЖТ рж╕рж░рзНржмрзЛржЪрзНржЪ width possibleред

Area = (right-left) * min(height[left], height[right])

ржПржЦржи ржкрзНрж░рж╢рзНржи: pointer move ржХрж░ржмрзЛ ржХрзЛржи ржжрж┐ржХрзЗ?

ЁЯСЙ Logic:

Area increase ржХрж░рждрзЗ рж╣рж▓рзЗ height ржмрж╛рзЬрж╛ржирзЛ ржжрж░ржХрж╛рж░ (ржХрж╛рж░ржг width рждрзЛ ржХржоржмрзЗржЗ ржпржжрж┐ ржЖржорж░рж╛ pointer move ржХрж░рж┐)ред

ржЫрзЛржЯ height ржХрзЗ ржмрж╛ржж ржжрж┐рзЯрзЗ ржмрзЬ height ржПрж░ ржжрж┐ржХрзЗ move ржХрж░рждрзЗ рж╣ржмрзЗред

ржЕрж░рзНржерж╛рзО:

ржпржжрж┐ height[left] < height[right] тЖТ left++ (ржХрж╛рж░ржг left ржЫрзЛржЯ, ржУржЯрж╛ рж░рзЗржЦрзЗ ржжрж┐рж▓рзЗ height increase рж╣ржмрзЗ ржирж╛)ред

ржирж╛рж╣рж▓рзЗ тЖТ right-- (ржХрж╛рж░ржг right ржЫрзЛржЯ ржмрж╛ рж╕ржорж╛ржи, ржУржЯрж╛ ржмрж╛ржж ржжрж┐рждрзЗ рж╣ржмрзЗ)ред

ржПржнрж╛ржмрзЗ ржЪрж▓рждрзЗ ржЪрж▓рждрзЗ ржЖржорж░рж╛ рж╕ржм possible case consider ржХрж░рж┐ред

тЬЕ Example ржжрж┐рзЯрзЗ ржмрзБржЭрж┐

Input: height = [1,8,6,2,5,4,8,3,7]

left=0 (1), right=8 (7)
Area = min(1,7) * (8-0) = 1*8 = 8
тЖТ left ржЫрзЛржЯ, рждрж╛ржЗ left++

left=1 (8), right=8 (7)
Area = min(8,7)(7) = 77 = 49 тЬЕ (max)
тЖТ right ржЫрзЛржЯ, рждрж╛ржЗ right--

left=1 (8), right=7 (3)
Area = min(8,3)*6 = 18 тЖТ ржЫрзЛржЯ

left=1 (8), right=6 (8)
Area = min(8,8)*5 = 40 тЖТ ржЫрзЛржЯ

...ржПржнрж╛ржмрзЗ рж╕ржм case check рж╣ржмрзЗред рж╢рзЗрж╖рзЗ max = 49ред

тП▒ Complexity

Brute force: O(n┬▓) тЭМ

Two pointers: O(n) тЬЕ

Space: O(1)

ЁЯУМ ржмрзБржЭрзЗ ржирзЗрзЯрж╛рж░ Trick

ржкрзНрж░рж╢рзНржирзЗ ржпржжрж┐ ржжрзЗржЦрж╛ ржпрж╛рзЯ:

Pair ржирж┐рждрзЗ рж╣ржмрзЗред

Area/Profit/Maximization ржХрж░рждрзЗ рж╣ржмрзЗред

LeftтАУRight рж╕рзАржорж╛рж░ ржоржзрзНржпрзЗ optimize ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯСЙ рждржЦржиржЗ two pointer approach ржЯрзНрж░рж╛ржЗ ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯФС рж╕ржВржХрзНрж╖рзЗржкрзЗ Rule of Thumb:

Problem ржП pair, distance, area type formula ржерж╛ржХрж▓рзЗ тЖТ two pointer ржЪрж┐ржирзНрждрж╛ ржХрж░рзЛред

Brute force O(n┬▓) ржоржирзЗ ржЖрж╕ржмрзЗ, рждрж╛рж░ржкрж░ ржнрж╛ржмржмрзЗ ржХрж┐ржнрж╛ржмрзЗ ржПржХржжрж┐ржХрзЗ move ржХрж░рж▓рзЗ ржЕржирзНржп ржжрж┐ржХ ржмрж╛ржж ржжрзЗржУрзЯрж╛ ржпрж╛рзЯред

Logic: ржЫрзЛржЯ height ржмрж╛ржж ржжрж┐рждрзЗ рж╣ржмрзЗ тЖТ ржХрж╛рж░ржг ржЫрзЛржЯ height ржерж╛ржХрж▓рзЗ area ржЖрж░ ржмрж╛рзЬржмрзЗ ржирж╛ред

рждрж╛рж╣рж▓рзЗ рждрзБржорж┐ ржПржЦржи ржерзЗржХрзЗ question ржкрзЬрзЗржЗ ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗ:

Formula = (width ├Ч min height)

Two pointer move тЖТ ржЫрзЛржЯ height ржмрж╛ржжред

ржПржнрж╛ржмрзЗ linear time solution рж╣ржмрзЗред

ЁЯСЙ ржЪрж╛ржЗрж▓рзЗ ржЖржорж┐ brute force vs two pointer ржжрзБржЯрзЛ approach code рж▓рж┐ржЦрзЗ dry run ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рж┐ред рждрзБржорж┐ ржЪрж╛ржЗржЫрзЛ ржХрж┐ рж╕рзЗржЯрж╛?

You said:
Here which approach use
ChatGPT said:

ржПржЗ code-ржП ржпрзЗржЯрж╛ use ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ рж╕рзЗржЯрж╛ рж╣рж▓рзЛ ЁЯСЙ Two Pointer Approachред

ЁЯФО Proof ржпрзЗ ржПржЯрж╛ Two Pointer:
int left = 0;                    // ржПржХржжржо ржмрж╛ржБржжрж┐ржХ ржерзЗржХрзЗ рж╢рзБрж░рзБ
int right = height.size()-1;     // ржПржХржжржо ржбрж╛ржиржжрж┐ржХ ржерзЗржХрзЗ рж╢рзБрж░рзБ


тЮбя╕П ржжрзБржЗ ржкрж╛рж╢рзЗ pointer рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗред

while(left <= right && right < height.size())
{
    a = min(height[left], height[right]) * (right - left);
    ...
    if(height[left] < height[right])
        left++;
    else
        right--;
}


тЮбя╕П ржкрзНрж░рждрж┐ржмрж╛рж░ ржЫрзЛржЯ height ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ (left++ ржмрж╛ right--)ред
ржПржЯрж╛ржЗ two pointer-ржПрж░ ржорзВрж▓ logicред

тЪб Approach Summary

рж╢рзБрж░рзБрж░ ржжрж┐ржХрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ width ржирзЗржУрзЯрж╛ рж╣рзЯ (left = 0, right = n-1)ред

рждрж╛рж░ржкрж░ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ pointer move ржХрж░рзЗ area maximize ржХрж░рж╛ рж╣рзЯред

Brute force-ржПрж░ ржорждрзЛ рж╕ржм pair check ржХрж░рждрзЗ рж╣рзЯ ржирж╛, ржХрж╛рж░ржг ржЫрзЛржЯ height рж░рж╛ржЦрж▓рзЗ ржХрзЛржирзЛ future area ржмрзЬ рж╣ржмрзЗ ржирж╛ред

ЁЯСЙ рждрж╛ржЗ final verdict:
ржПржЗ solution O(n) time, O(1) space-ржП Two Pointer Technique ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЗред

рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ ржЖржорж┐ brute force ржЖрж░ two pointer ржПрж░ ржоржзрзНржпрзЗ step-by-step dry run ржжрзЗржЦрж┐рзЯрзЗ ржкрж╛рж░рзНржержХрзНржпржЯрж╛ clear ржХрж░рждрзЗ ржкрж╛рж░рж┐ред рж╕рзЗржЯрж╛ ржХрж┐ ржХрж░рзЗ ржжрзЗржм?



Full Code:
-----------

class Solution 
{
public:
    int maxArea(vector<int>& height)
    {
        int left=0;
        int right=height.size()-1;
        vector<int>v;
        int a;
        int maxArea=0;
        while(left<=right&&right<height.size())
            {
            a=min(height[left],height[right])*(right-left);
                if(maxArea<a)
                {
                    maxArea=a;;
                }
                if(height[left]<height[right])
                {
                    left++;
                }
                else
                {
                    right--;
                }
            }
        return maxArea;
    }
};
