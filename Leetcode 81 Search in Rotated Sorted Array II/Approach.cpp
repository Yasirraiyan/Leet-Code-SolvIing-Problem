тЬЕ рждрзЛржорж╛рж░ ржХрзЛржбрзЗрж░ ржкрзВрж░рзНржг ржмрзНржпрж╛ржЦрзНржпрж╛:
ЁЯФ╕ Step 1: sort(nums.begin(), nums.end());
cpp
Copy
Edit
sort(nums.begin(), nums.end());
тЮбя╕П ржПржЗ рж▓рж╛ржЗржирзЗ рждрзБржорж┐ rotated sorted array ржХрзЗ рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ normal sorted array ржмрж╛ржирж┐рзЯрзЗ ржлрзЗрж▓ржЫрзЛред

ЁЯФБ ржЙржжрж╛рж╣рж░ржг:
Input:
nums = [2,5,6,0,0,1,2]
After sorting:
nums = [0,0,1,2,2,5,6]

ЁЯФ╣ Time complexity of sort(): O(n log n)

ЁЯФ╕ Step 2: Binary Search ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЦрзЛржБржЬрж╛
cpp
Copy
Edit
int low=0;
int high=nums.size()-1;
bool find=false;
while(low<=high)
{
    int mid = low + (high - low) / 2;
    if(nums[mid] < target) low = mid + 1;
    else if(nums[mid] > target) high = mid - 1;
    else {
        find = true;
        break;
    }
}
return find;
тЮбя╕П ржПржЦржи рждрзБржорж┐ classic Binary Search algorithm ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЛред

ЁЯФБ Example:

Sorted nums = [0,0,1,2,2,5,6]

Let's say target = 0

Binary search efficiently ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░ржмрзЗ 0 ржЖржЫрзЗ ржХрж┐ржирж╛ред

ЁЯФ╣ Binary search ржПрж░ time complexity: O(log n)

тЬЕ Final Time Complexity:
Sorting: O(n log n)

Binary Search: O(log n)

Total: O(n log n)

ЁЯФ╕ ржпрзЗрж╣рзЗрждрзБ input size тЙд 5000, рждрж╛ржЗ ржПржЗ approach ржПржЦржирзЛ acceptable.

Full Code:
-----------

  class Solution 
{
public:
    bool search(vector<int>& nums, int target) 
    {
        sort(nums.begin(),nums.end());
        int low=0;
        int high=nums.size()-1;
        bool find=false;
        int mid;
        while(low<=high)
        {
              mid=low+(high-low)/2;
              if(nums[mid]<target)
              {
                low=mid+1;
              }
              if(nums[mid]>target)
              {
                high=mid-1;
              }
          if(nums[mid]==target)
              {
                find=true;
                break;
                //return mid;

              }
        }
        return find;
    }
};
