тЬЕ ЁЯФН ржХрзЛржбрзЗрж░ ржХрж╛ржЬ ржХрзА?

ржкрзНрж░рж╢рзНржиржЯрж╛ ржЪрж╛рзЯ:

> BST-ржПрж░ ржпрзЗржХрзЛржирзЛ ржжрзБржЗржЯрж╛ ржЖрж▓рж╛ржжрж╛ ржирзЛржбрзЗрж░ ржоржзрзНржпрзЗ ржнрзНржпрж╛рж▓рзБрж░ ржорж┐ржирж┐ржорж╛ржо ржбрж┐ржлрж╛рж░рзЗржирзНрж╕ ржмрзЗрж░ ржХрж░рзЛред




---

ЁЯФз Step-by-step рждрзЛржорж╛рж░ ржХрзЛржбрзЗрж░ ржХрж╛ржЬ:


---

тЬЕ Step 1: findmin(vector<int>& arr)

int findmin(vector<int>&arr)
{
    int min=arr[0];
    for(int j=1;j<arr.size();j++)
    {
        if(arr[j]<min)
        {
            min=arr[j];
        }
    }
    return min;
}

ЁЯФ╣ ржХрж╛ржЬ:
ржПржЗ ржлрж╛ржВрж╢ржи ржПржХржЯрж╛ ржнрзЗржХрзНржЯрж░рзЗрж░ ржоржзрзНржпрзЗ ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржЫрзЛржЯ ржорж╛ржи ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред

ЁЯза ржЙржжрж╛рж╣рж░ржг:

arr = {3, 5, 1, 6};
тЖТ findmin(arr) тЖТ 1


---

тЬЕ Step 2: BFS(TreeNode* root)

vector<int>BFS(TreeNode* root)
{
    queue<TreeNode*> q;
    q.push(root);
    vector<int> v;
    while(!q.empty())
    {
        TreeNode* front = q.front();
        if(front != nullptr)
        {
            v.push_back(front->val);
        }
        if(front->left) q.push(front->left);
        if(front->right) q.push(front->right);
        q.pop();
    }
    return v;
}

ЁЯФ╣ ржХрж╛ржЬ:
ржПржЗ ржлрж╛ржВрж╢ржи ржкрзБрж░рзЛ BST-ржХрзЗ Level Order Traversal (BFS) ржХрж░рзЗ рж╕ржм ржирзЛржбрзЗрж░ ржнрзНржпрж╛рж▓рзБ ржПржХржЯрж╛ vector-ржП рж░рж╛ржЦрзЗред

ЁЯУМ ржпрзЗрж╣рзЗрждрзБ Level Order тЖТ unsorted values ржЖрж╕ржмрзЗ
тЮбя╕П рждрж╛ржЗ ржкрж░рзЗ sort ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯза ржЙржжрж╛рж╣рж░ржг:

BST: [4, 2, 6, 1, 3]

Traversal тЖТ BFS тЖТ [4, 2, 6, 1, 3]


---

тЬЕ Step 3: minDiffInBST(TreeNode* root)

vector<int> vv = BFS(root);

ЁЯФ╕ BST ржерзЗржХрзЗ рж╕ржм value ржмрзЗрж░ ржХрж░рж▓ vv рждрзЗред

sort(vv.begin(), vv.end());

ЁЯФ╕ sort ржХрж░рж▓ тЖТ BST-рж░ ржЗржиржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рж╛ржнрж╛рж░рзНрж╕рж╛рж▓рзЗрж░ ржоржд sorted рж╣рж▓рзЛред

ЁЯза Example:

BFS тЖТ [4, 2, 6, 1, 3]
sort тЖТ [1, 2, 3, 4, 6]


---

тЬЕ Step 4: Difference ржмрзЗрж░ ржХрж░рзЛ

for(int i=1; i<vv.size(); i++)
{
    v.push_back(abs(vv[i] - vv[i-1]));
}

ЁЯФ╣ ржПржЦрж╛ржирзЗ adjacent element ржПрж░ ржоржзрзНржпрзЗ difference ржмрзЗрж░ ржХрж░рзЗ ржирж┐ржЪрзНржЫрзЗред

ЁЯза Example:

vv = [1, 2, 3, 4, 6]
тЖТ Differences:
|2-1| = 1
|3-2| = 1
|4-3| = 1
|6-4| = 2
тЖТ v = [1, 1, 1, 2]


---

тЬЕ Step 5: ржорж┐ржирж┐ржорж╛ржо ржмрзЗрж░ ржХрж░рзЛ

int mindiff = findmin(v);
return mindiff;

ЁЯФ╣ Difference vector v ржерзЗржХрзЗ рж╕рж░рзНржмржирж┐ржорзНржи ржорж╛ржи ржмрзЗрж░ ржХрж░рзЗ рж╕рзЗржЯрж╛ржЗ return ржХрж░ржЫрзЗред

ЁЯза ржПржЦрж╛ржирзЗ v = [1, 1, 1, 2] тЖТ return 1


---

тЬЕ ЁЯФО Output Test:

Test Case 1:

Input: [4, 2, 6, 1, 3]
Sorted order: [1, 2, 3, 4, 6]
Difference: [1, 1, 1, 2]
Output: 1 тЬЕ

Test Case 2:

Input: [1, 0, 48, null, null, 12, 49]
Sorted: [0, 1, 12, 48, 49]
Difference: [1, 11, 36, 1]
Output: 1 тЬЕ


---

ЁЯУК Time Complexity:

ржХрж╛ржЬ	Time

BFS traversal	O(n)
Sort	O(n log n)
Difference Calculation	O(n)
Find min	O(n)


тЮбя╕П Overall: O(n log n)


---

ЁЯза Mathematical Logic:

BST тЖТ ржЗржиржЕрж░рзНржбрж╛рж░ ржХрж░рж▓рзЗ Sorted Array ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ

Sorted array тЖТ adjacent elements-er ржоржзрзНржпрзЗржЗ ржорж┐ржирж┐ржорж╛ржо ржбрж┐ржлрж╛рж░рзЗржирзНрж╕ ржерж╛ржХрзЗ

рждрж╛ржЗ рж╢рзБржзрзБ adjacent ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ difference ржирж┐рзЯрзЗ min ржХрж░рж▓рзЗржЗ рж╕ржорж╛ржзрж╛ржи тЬЕ



---

тЬЕ рждрзЛржорж╛рж░ ржХрзЛржб Accepted рж╣рзЯ ржХрзЗржи?

рждрзЛржорж╛рж░ ржХрзЛржб:

1. BST ржерзЗржХрзЗ рж╕ржм ржнрзНржпрж╛рж▓рзБ ржирзЗрзЯ (BFS)


2. Sort ржХрж░рзЗ тЖТ ржЗржиржЕрж░рзНржбрж╛рж░ ржПрж░ ржоржд рж╕рж╛ржЬрж╛рзЯ


3. Adjacent difference ржирзЗрзЯ


4. рж╕рзЗржЦрж╛ржи ржерзЗржХрзЗ min ржмрзЗрж░ ржХрж░рзЗ



ЁЯФД ржорж╛ржирзЗ, ржЗржиржЕрж░рзНржбрж╛рж░ ржирж╛ ржХрж░рж▓рзЗржУ рждрзБржорж┐ рж╕ржарж┐ржХржнрж╛ржмрзЗ BST ржХрзЗ sort ржХрж░рзЗ ржирж┐ржЪрзНржЫрзЛред that's why correct result ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред


---

ЁЯФЪ ржЙржкрж╕ржВрж╣рж╛рж░:

тЬФя╕П рждрзЛржорж╛рж░ ржХрзЛржб ржкрзБрж░рзЛржкрзБрж░рж┐ рж╕ржарж┐ржХ тЬЕ
тЬФя╕П BFS ржХрж░рж╛рж░ ржХрж╛рж░ржгрзЗ ржПржХржЯрзБ ржмрзЗрж╢рж┐ time рж▓рж╛ржЧрзЗ (sort рж▓рж╛ржЧржЫрзЗ)
тЬФя╕П ржХрж┐ржирзНрждрзБ ржХрж╛ржЬрзЗрж░ ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХрждрж╛ ржПржХржжржо ржарж┐ржХ
тЬФя╕П ржЗржиржЕрж░рзНржбрж╛рж░ ржХрж░рж▓рзЗ O(n) ржП ржХрж╛ржЬржЯрж╛ рж╣ржмрзЗ (sort рж▓рж╛ржЧрзЗ ржирж╛)

Full Code:
------------

class Solution 
{
public:
    int findmin(vector<int>&arr)
    {
        int min=arr[0];
        for(int j=1;j<arr.size();j++)
            {
                if(arr[j]<min)
                {
                    min=arr[j];
                }
            }
        return min;
    }
    vector<int>BFS(TreeNode* root)
    {
        queue<TreeNode*>q;
        q.push(root);
        vector<int>v;
        while(!q.empty())
            {
                TreeNode* front=q.front();
                if(front!=nullptr)
                {
                v.push_back(front->val);
                }
                if(front->left) q.push(front->left);
                if(front->right) q.push(front->right);
                q.pop();
            }
        return v;
    }
    int minDiffInBST(TreeNode* root)
    {
        vector<int>vv=BFS(root);
        vector<int>v;
        sort(vv.begin(),vv.end());
        for(int i=1;i<vv.size();i++)
            {
                v.push_back(abs(vv[i]-vv[i-1]));
            }
        int mindiff=findmin(v);
        return mindiff;
    }
};
