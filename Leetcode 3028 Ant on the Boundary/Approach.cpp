üî∂ Problem-‡¶è‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø:
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ‡¶ü‡¶ø boundary-‡¶§‡ßá (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® 0 ‡¶§‡ßá) ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ü‡¶∏‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ó‡ßÅ‡¶®‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡•§

‚úÖ Approach ‡¶¨‡ßÅ‡¶ù‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá:
üîπ Step 1: ‡¶ö‡¶≤‡¶æ‡¶´‡ßá‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡ßã (Prefix Sum / Running Sum)
‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶¨‡ßÅ‡¶ù‡¶ø ‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶ß‡¶∞‡ßã,

‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® 0-‡¶§‡ßá‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø nums[i] ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:

‡¶Ø‡¶¶‡¶ø nums[i] > 0, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶°‡¶æ‡¶®‡ßá ‡¶Ø‡¶æ‡ßü‡•§

‡¶Ø‡¶¶‡¶ø nums[i] < 0, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡¶æ‡¶Æ‡ßá ‡¶Ø‡¶æ‡ßü‡•§

‡¶§‡¶æ‡¶π‡¶≤‡ßá nums ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡ßá ‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá‡•§ ‡¶è‡¶ï‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡ßü prefix sum‡•§

üîπ Step 2: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶Ø‡¶¶‡¶ø 0 ‡¶π‡ßü (return to boundary), ‡¶§‡¶æ‡¶π‡¶≤‡ßá count ‡¶¨‡¶æ‡ßú‡¶æ‡¶ì‡•§
‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶§‡¶ñ‡¶®‡¶á count ‡¶ï‡¶∞‡¶¨‡ßã, ‡¶Ø‡¶ñ‡¶® prefix sum ‡¶Ü‡¶¨‡¶æ‡¶∞ 0 ‡¶π‡ßü‡•§

‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ ‡¶Ø‡¶ñ‡¶® ‡¶ö‡¶≤‡¶æ‡¶∞ ‡¶™‡¶∞ 0 ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá ‡¶Ü‡¶∏‡ßá, ‡¶§‡¶ñ‡¶® return to boundary ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ß‡¶∞‡¶æ ‡¶π‡ßü‡•§

‚úÖ Code Explanation in Bangla Line-by-Line:
cpp
Copy
Edit
class Solution 
{
public:
    int returnToBoundaryCount(vector<int>& nums) 
    {
        // prefix sum ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø psum ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ vector ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
        vector<int> psum(nums.size(), 0);
        
        // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶π‡¶≤ nums[0] ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ
        psum[0] = nums[0];

        // ‡¶™‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡¶õ‡¶ø
        for(int i = 1; i < nums.size(); i++)
        {
            psum[i] = psum[i - 1] + nums[i];  // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ sum + ‡¶®‡¶§‡ßÅ‡¶® nums[i]
        }

        int count = 0;

        // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ prefix sum 0 ‡¶π‡¶≤‡ßá, ‡¶Æ‡¶æ‡¶®‡ßá ‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ boundary ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá‡¶õ‡ßá
        for(int j = 0; j < psum.size(); j++)
        {
            if(psum[j] == 0)
            {
                count++;  // ‡¶´‡¶ø‡¶∞‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶¨‡¶≤‡ßá count ‡¶¨‡¶æ‡ßú‡¶æ‡¶≤‡¶æ‡¶Æ
            }
        }

        return count;  // ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡¶¨‡¶æ‡¶∞ ‡¶´‡¶ø‡¶∞‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶§‡¶æ return ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
    }
};
üß† ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶Æ‡¶® approach ‡¶≠‡¶æ‡¶¨‡¶¨‡ßá?
‚úÖ ‡¶Ø‡¶ñ‡¶®‡¶á ‡¶ö‡¶≤‡¶æ‡¶´‡ßá‡¶∞‡¶æ‡¶∞ tracking ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü, ‡¶§‡¶ñ‡¶® prefix sum ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

‚úÖ ‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßá ‚Üí ‡¶§‡¶æ‡¶á ‡¶ö‡¶≤‡¶æ‡¶∞ ‡¶™‡¶∞ position ‡¶ó‡ßÅ‡¶≤‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§

‚úÖ ‡¶Ø‡¶¶‡¶ø position == 0, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶™‡¶ø‡¶Å‡¶™‡ßú‡¶æ ‡¶Ü‡¶¨‡¶æ‡¶∞ boundary-‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá‡¶õ‡ßá‡•§

‚úÖ ‡¶∏‡¶¨ ‡¶ö‡¶≤‡¶æ‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶ï‡¶§‡¶¨‡¶æ‡¶∞ position 0 ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ó‡ßÅ‡¶®‡¶≤‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

üß™ Test Example 1:
cpp
Copy
Edit
Input: nums = [2, 3, -5]
‡¶ö‡¶≤‡¶æ‡¶´‡ßá‡¶∞‡¶æ:

‡¶∂‡ßÅ‡¶∞‡ßÅ: 0

move 1: +2 ‚Üí position = 2

move 2: +3 ‚Üí position = 5

move 3: -5 ‚Üí position = 0 ‚úÖ (1 return)

‚úÖ Output: 1

üß™ Test Example 2:
cpp
Copy
Edit
Input: nums = [3, 2, -3, -4]
‡¶ö‡¶≤‡¶æ‡¶´‡ßá‡¶∞‡¶æ:

‡¶∂‡ßÅ‡¶∞‡ßÅ: 0

move 1: +3 ‚Üí position = 3

move 2: +2 ‚Üí position = 5

move 3: -3 ‚Üí position = 2

move 4: -4 ‚Üí position = -2

üî¥ ‡¶ï‡¶ñ‡¶®‡ßã‡¶á ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® 0 ‡¶π‡ßü‡¶®‡¶ø ‚Üí output: 0

‚úÖ Complexity:
Time: O(n) ‚Üí prefix sum ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ traverse ‡¶ï‡¶∞‡ßá count ‡¶ï‡¶∞‡¶æ‡•§

Space: O(n) ‚Üí psum array ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá‡•§

Full Code:
----------

  class Solution 
{
public:
    int returnToBoundaryCount(vector<int>& nums) 
    {
      vector<int>psum(nums.size(),0);
        psum[0]=nums[0];
        for(int i=1;i<nums.size();i++)
        {
          psum[i]=psum[i-1]+nums[i];
        }
       
        int count=0;

        for(int j=0;j<psum.size();j++)
        {
          if(psum[j]==0)
          {
          count++;
        }
        }
       
       return count;

    }
};
