ржкрзНрж░рж╢рзНржирзЗрж░ рж╕рж╛рж░ржорж░рзНржо
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛рж░ ржЕрзНржпрж╛рж░рзЗ nums ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред рждрзБржорж┐ ржПржоржи partition ржЧрзБрж▓рзЛ ржЦрзБржБржЬрждрзЗ рж╣ржмрзЗ ржпрзЗржЦрж╛ржирзЗ ржЕрзНржпрж╛рж░рзЗржЯрж╛ржХрзЗ ржжрзБржЗ ржнрж╛ржЧрзЗ ржнрж╛ржЧ ржХрж░рж╛ ржпрж╛рзЯ, ржЕрж░рзНржерж╛рзО ржХрзЛржирзЛ index i (ржпрзЗржЦрж╛ржирзЗ 0 <= i < n-1) ржпрзЗржЦрж╛ржи ржерзЗржХрзЗ ржЕрзНржпрж╛рж░рзЗржЯрж╛рж░:

ржмрж╛ржо (left) ржЕржВрж╢ рж╣ржмрзЗ nums[0...i]

ржбрж╛ржи (right) ржЕржВрж╢ рж╣ржмрзЗ nums[i+1...n-1]

ржПржЦржи, рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ: ржмрзЗрж╕рж┐ржХ: ржУржЗрж╕ржм partition ржПрж░ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░рж╛ ржпрзЗржЦрж╛ржирзЗ ржмрж╛ржо ржУ ржбрж╛ржи рж╕рж╛ржмржЕрзНржпрж╛рж░рзЗржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓рзЗрж░ ржкрж╛рж░рзНржержХрзНржп (difference) ржЬрзЛрзЬ (even) рж╣ржмрзЗред

ржХрзЛржбрзЗрж░ ржорзВрж▓ ржзрж╛рж░ржгрж╛ (Approach)
1. Partition ржХрж░рж╛рж░ ржзрж╛рж░ржгрж╛:
ржкрзНрж░рждрж┐ржЯрж┐ partition i рждрзЗ:

Left subarray sum = 
ЁЭР┐
=
тИС
ЁЭСЧ
=
0
ЁЭСЦ
ЁЭСЫ
ЁЭСв
ЁЭСЪ
ЁЭСа
[
ЁЭСЧ
]
L=тИС 
j=0
i
тАЛ
 nums[j]

Right subarray sum = 
ЁЭСЕ
=
тИС
ЁЭСЧ
=
ЁЭСЦ
+
1
ЁЭСЫ
тИТ
1
ЁЭСЫ
ЁЭСв
ЁЭСЪ
ЁЭСа
[
ЁЭСЧ
]
R=тИС 
j=i+1
nтИТ1
тАЛ
 nums[j]

2. Difference:
difference
=
ЁЭР┐
тИТ
ЁЭСЕ
difference=LтИТR
ржЖржорж╛ржжрзЗрж░ ржжрзЗржЦрждрзЗ рж╣ржмрзЗ, ржПржЗ ржкрж╛рж░рзНржержХрзНржп 
ЁЭР┐
тИТ
ЁЭСЕ
LтИТR ржЬрзЛржбрж╝ ржХрж┐ржирж╛ред

3. ржХрзАржнрж╛ржмрзЗ difference ржЬрзЛржбрж╝ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░ржм?
ржПржХржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржЯрзНрж░рж┐ржХ ржЖржЫрзЗ:

ЁЭР┐
тИТ
ЁЭСЕ
=
(
ЁЭР┐
+
ЁЭСЕ
)
тИТ
2
ЁЭСЕ
=
ЁЭСЖ
тИТ
2
ЁЭСЕ
LтИТR=(L+R)тИТ2R=SтИТ2R
ржпрзЗржЦрж╛ржирзЗ 
ЁЭСЖ
=
S= ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗрж░ sumред

ЁЭСЖ
S ржПржмржВ 
2
ЁЭСЕ
2R ржПрж░ parity ржжрзЗржЦрзЗ ржкрж╛рж░рзНржержХрзНржпрзЗрж░ parity ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛ ржпрж╛ржмрзЗред

ржпрзЗрж╣рзЗрждрзБ 
2
ЁЭСЕ
2R рж╕ржм рж╕ржорзЯ ржЬрзЛрзЬ, ржкрж╛рж░рзНржержХрзНржпрзЗрж░ parity 
ЁЭСЖ
S ржПрж░ parity ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗред

ржХрж┐ржирзНрждрзБ ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ ржкрзНрж░рждрзНржпрзЗржХ partition ржП sum ржмрзЗрж░ ржХрж░рзЗ рж╕рж░рж╛рж╕рж░рж┐ parity ржЪрзЗржХ ржХрж░ржмрзЛ, ржпрж╛ рж╕рзНржкрж╖рзНржЯ ржУ рж╕рж╣ржЬред

ржХрзЛржбрзЗрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржУ ржмрзНржпрж╛ржЦрзНржпрж╛
cpp
Copy
Edit
int count=0; // ржпрзЗржЗ partition ржЧрзБрж▓рзЛрждрзЗ difference ржЬрзЛржбрж╝ рж╣ржмрзЗ, рждрж╛ржжрзЗрж░ рж╕ржВржЦрзНржпрж╛ рж░рж╛ржЦржмрзЗ
int sum=0;   // ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗрж░ ржорзЛржЯ sum
vector<int> psum(nums.size(),0); // suffix sum ржЕрзНржпрж╛рж░рзЗ (ржЕрзНржпрж╛рж░рзЗржЯрж╛рж░ рж╢рзЗрж╖ ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржпрзЛржЧржлрж▓)
ржПржЦрж╛ржирзЗ suffix sum ржЕрзНржпрж╛рж░рзЗ psum ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛рждрзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ index ржерзЗржХрзЗ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд ржпрзЛржЧржлрж▓ ржжрзНрж░рзБржд ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред

cpp
Copy
Edit
psum[nums.size()-1] = nums[nums.size()-1]; // рж╢рзЗрж╖ ржЙржкрж╛ржжрж╛ржи ржжрж┐рзЯрзЗ suffix sum рж╢рзБрж░рзБ
cpp
Copy
Edit
for(int i=0; i<nums.size(); i++) {
    sum += nums[i]; // ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗрж░ sum ржмрзЗрж░ ржХрж░рж╛
}
cpp
Copy
Edit
for(int i=nums.size()-2; i>=0; i--) {
    psum[i] = psum[i+1] + nums[i]; // suffix sum рждрзИрж░рж┐ ржХрж░рж╛
}
ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ ржкрзЗржЫржи ржерзЗржХрзЗ рж╕рж╛ржоржирзЗ suffix sum рждрзИрж░рж┐ ржХрж░ржЫрж┐ред

ржЕрж░рзНржерж╛рзО psum[i] рж╣рж▓рзЛ nums[i] ржерзЗржХрзЗ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд рж╕ржм ржЙржкрж╛ржжрж╛ржирзЗрж░ ржпрзЛржЧржлрж▓ред

cpp
Copy
Edit
int sum3 = 0; // prefix sum (left subarray sum) рж╣рж┐рж╕рж╛ржмрзЗрж░ ржЬржирзНржп
for(int i=0; i<nums.size()-1; i++) {
    sum3 += nums[i]; // left subarray sum ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржХрзНрж░ржорж╛ржирзНржмрзЯрзЗ
    int sum2 = sum3 - psum[i+1]; // difference = left sum - right sum
    if((abs(sum2)) % 2 == 0) { // difference ржЬрзЛржбрж╝ ржХрж┐ржирж╛ ржЪрзЗржХ
        count++; // ржЬрзЛржбрж╝ рж╣рж▓рзЗ count ржмрж╛рзЬрж╛ржирзЛ
    }
}
ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржЯрж┐ partition point i ржПрж░ ржЬржирзНржп left ржПржмржВ right subarray sum ржмрзЗрж░ ржХрж░ржЫрж┐ред

ржкрж╛рж░рзНржержХрзНржп 
ЁЭСа
ЁЭСв
ЁЭСЪ
2
sum2 ржХрзЗ ржЬрзЛржбрж╝ ржХрж┐ржирж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░ржЫрж┐ред

ржпрзЗрж╕ржм partition ржПрж░ ржкрж╛рж░рзНржержХрзНржп ржЬрзЛржбрж╝, рж╕рзЗржЧрзБрж▓рзЛ ржЧржгржирж╛ ржХрж░ржЫрж┐ред

cpp
Copy
Edit
return count; // ржорзЛржЯ ржЬрзЛржбрж╝ ржкрж╛рж░рзНржержХрзНржпрзЗрж░ partition рж╕ржВржЦрзНржпрж╛ рж░рж┐ржЯрж╛рж░рзНржи
ржЙржжрж╛рж╣рж░ржгрж╕рж╣ ржмрзНржпрж╛ржЦрзНржпрж╛
nums = [10, 10, 3, 7, 6]

ржкрзБрж░рзЛ sum = 36

suffix sums:

psum[4] = 6

psum[3] = 7 + 6 = 13

psum[2] = 3 + 13 = 16

psum[1] = 10 + 16 = 26

psum[0] = 10 + 26 = 36

Partition points: 
ЁЭСЦ
=
0
,
1
,
2
,
3
i=0,1,2,3

i	left sum (sum3)	right sum (psum[i+1])	difference (sum3 - psum[i+1])	parity (even/odd)
0	10	26	10 - 26 = -16	even
1	20	16	20 - 16 = 4	even
2	23	13	23 - 13 = 10	even
3	30	6	30 - 6 = 24	even

рж╕ржмржЧрзБрж▓рзЛ partition ржПрж░ ржкрж╛рж░рзНржержХрзНржп ржЬрзЛржбрж╝ тЖТ ржлрж▓рж╛ржлрж▓ = 4

ржХрзЛржб рж▓рзЗржЦрж╛рж░ ржкржжрзНржзрждрж┐ (How you think & write code):
ржкрзНрж░ржержорзЗржЗ ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗржЯрж╛рж░ sum ржмрзЗрж░ ржХрж░рзЛред (ржмрж╛ suffix sum ржПрж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗ)ред

suffix sum ржЕрзНржпрж╛рж░рзЗ рждрзИрж░рж┐ ржХрж░рзЛ ржпрж╛рждрзЗ ржбрж╛ржи ржжрж┐ржХрзЗрж░ рж╕рж╛ржмржЕрзНржпрж╛рж░рзЗржЧрзБрж▓рзЛрж░ sum ржжрзНрж░рзБржд ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред

prefix sum (sum3) ржжрж┐рзЯрзЗ ржмрж╛ржо ржжрж┐ржХрзЗрж░ рж╕рж╛ржмржЕрзНржпрж╛рж░рзЗржЧрзБрж▓рзЛрж░ sum ржХрзНрж░ржорж╛ржирзНржмрзЯрзЗ ржпрзЛржЧ ржХрж░рзЛред

ржкрзНрж░рждрж┐ржЯрж┐ partition point ржП ржкрж╛рж░рзНржержХрзНржп ржмрзЗрж░ ржХрж░рзЗ parity ржЪрзЗржХ ржХрж░рзЛред

ржЬрзЛржбрж╝ ржкрж╛рж░рзНржержХрзНржпрзЗрж░ ржЬржирзНржп ржХрж╛ржЙржирзНржЯрж╛рж░ ржмрж╛рзЬрж╛ржУред

рж╢рзЗрж╖рзЗ ржХрж╛ржЙржирзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛред

ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржХрзМрж╢рж▓ (Technique applied):
Prefix sum and suffix sum technique:
ржПржХржжржо ржжрзНрж░рзБржд ржПржмржВ efficient ржЙржкрж╛рзЯрзЗ рж╕рж╛ржмржЕрзНржпрж╛рж░рзЗржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░рж╛рж░ ржЬржирзНржп prefix ржПржмржВ suffix sum ржЕрзНржпрж╛рж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

Parity check:
ржкрж╛рж░рзНржержХрзНржпрзЗрж░ even/odd ржЪрзЗржХ ржХрж░рж╛рж░ ржЬржирзНржп % 2 ржЕржкрж╛рж░рзЗрж╢ржи ржмрзНржпржмрж╣рж╛рж░ред

ржХрзЗржи ржХрзЛржб accepted рж╣рж▓рзЛ?
рж╕ржорзЯ ржЬржЯрж┐рж▓рждрж╛: 
ЁЭСВ(ЁЭСЫ)
O(n) ржпрзЗржЦрж╛ржирзЗ ЁЭСЫ
n рж╣ржЪрзНржЫрзЗ ржЕрзНржпрж╛рж░рзЗржЧрзБрж▓рзЛрж░ ржжрзИрж░рзНржШрзНржпред

рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржЯрж┐ рж▓рзБржкрзЗ suffix sum, ржЖрж░ ржПржХржЯрж┐ рж▓рзБржкрзЗ prefix sum ржУ ржкрж╛рж░рзНржержХрзНржп parity ржЪрзЗржХ ржХрж░рж╛ред

Full Code:
----------

  class Solution
 {
public:
    int countPartitions(vector<int>& nums) 
    {
      int count=0;
        int sum=0;
        vector<int>psum(nums.size(),0);
        psum[nums.size()-1]=nums[nums.size()-1];
         for(int i=0;i<nums.size();i++)
         {
          sum+=nums[i];
         }
        for(int i=nums.size()-2 ;i>=0;i--)
        {
        //  sum+=nums[i];
          psum[i]=psum[i+1]+nums[i];
        }
        int sum3=0;
        for(int i=0;i<nums.size()-1;i++)
        {
          sum3+=nums[i];
          int sum2=sum3-psum[i+1];
          if((abs(sum2))%2==0)
          {
            count++;
          }
        }
        return count;
    }
};
