рж╕ржорж╕рзНржпрж╛рж░ ржмрзНржпрж╛ржЦрзНржпрж╛ (Problem Explanation)

ржзрж░рж╛ ржпрж╛ржХ,

Input: head = [1,8,9]
тЮд ржПржЯрж┐ 189 ржХрзЗ represent ржХрж░рзЗред
тЮд Double ржХрж░рж▓рзЗ: 189 ├Ч 2 = 378
тЮд Output: [3,7,8]

Input: head = [9,9,9]
тЮд ржПржЯрж┐ 999 ржХрзЗ represent ржХрж░рзЗред
тЮд Double ржХрж░рж▓рзЗ: 999 ├Ч 2 = 1998
тЮд Output: [1,9,9,8]



---

тЬЕ рждрзБржорж┐ ржпрзЗ рж╕ржорж╛ржзрж╛ржи ржжрж┐рзЯрзЗржЫрзЛ, рж╕рзЗржЯрж╛рж░ ржзрж╛ржк-ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржмрж╛ржВрж▓рж╛ + ржорзНржпрж╛ржержорзЗржЯрж┐ржХрж╛рж▓рж┐


---

ЁЯФ╖ Step 1: Linked List тЖТ Vector (Digit Collection)

vector<int> reserve;
while(head != nullptr) {
    reserve.push_back(head->val);
    head = head->next;
}

тЮд ржмрзНржпрж╛ржЦрзНржпрж╛:

рждрзБржорж┐ ржкрзНрж░ржержорзЗ linked list-ржПрж░ ржкрзНрж░рждрж┐ржЯрж┐ node ржерзЗржХрзЗ digit ржирж┐рзЯрзЗ reserve ржирж╛ржорзЗ ржПржХржЯрж╛ vector-ржП рж░рж╛ржЦржЫрзЛред

ржХрж╛рж░ржг: linked list-ржП ржкрзЗржЫржи ржерзЗржХрзЗ ржпрж╛ржУрзЯрж╛ржЯрж╛ рж╕рж╣ржЬ ржирзЯ, ржХрж┐ржирзНрждрзБ vector-ржП рждрж╛ рж╕рж╣ржЬ тАФ ржЖрж░ double ржХрж░рж╛рж░ рж╕ржорзЯ ржЖржорж░рж╛ right to left ржпрзЗрждрзЗ ржЪрж╛ржЗ (ржпрзЗржоржи рж╣рж╛рждрзЗ carry ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рж┐)ред



---

ЁЯФ╖ Step 2: Right to Left тЖТ Double with Carry

int carry = 0;
vector<int> result;
for(int i = reserve.size() - 1; i >= 0; i--) {
    int sum = reserve[i] * 2 + carry;
    result.push_back(sum % 10);  // ржирждрзБржи digit
    carry = sum / 10;            // carry
}

тЮд ржмрзНржпрж╛ржЦрзНржпрж╛ (ржорзНржпрж╛ржержорзЗржЯрж┐ржХрж╛рж▓рж┐):

ржкрзНрж░рждрж┐ржЯрж┐ digit ржХрзЗ double ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржПржмржВ carry ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

ржЙржжрж╛рж╣рж░ржг:
[1,8,9] тЖТ reserve = [1,8,9]
ржЪрж▓ржмрзЗ i = 2 ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ i = 0 ржкрж░рзНржпржирзНрждред

i = 2 тЖТ 9 ├Ч 2 + 0 = 18 тЖТ result.push_back(8) + carry = 1

i = 1 тЖТ 8 ├Ч 2 + 1 = 17 тЖТ result.push_back(7) + carry = 1

i = 0 тЖТ 1 ├Ч 2 + 1 = 3 тЖТ result.push_back(3) + carry = 0


ЁЯСЙ result = [8, 7, 3]


---

ЁЯФ╖ Step 3: Extra Carry ржерж╛ржХрж▓рзЗ Handle

if(carry > 0) {
    result.push_back(carry);
}

ржпржжрж┐ рж╕ржм рж╢рзЗрж╖рзЗ ржХрзЛржирзЛ carry ржерзЗржХрзЗ ржпрж╛рзЯ (ржпрзЗржоржи: 999 ├Ч 2 = 1998 тЖТ carry = 1), рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ ржПржХржЯрж╛ ржирждрзБржи digit рж╣рзЯрзЗ ржпрж╛рзЯред


---

ЁЯФ╖ Step 4: Reverse ржХрж░рзЗ New Linked List ржмрж╛ржирж╛ржирзЛ

reverse(result.begin(), result.end());
ListNode* headd = new ListNode(result[0]);
ListNode* current = headd;
for(int j = 1; j < result.size(); j++) {
    current->next = new ListNode(result[j]);
    current = current->next;
}

тЮд ржмрзНржпрж╛ржЦрзНржпрж╛:

ржЖржорж░рж╛ ржпрзЗрж╣рзЗрждрзБ right to left ржХрж░рзЗ result рждрзИрж░рж┐ ржХрж░ржЫрж┐рж▓рж╛ржо, ржПржЦржи рж╕рзЗржЯрж╛ reverse ржХрж░рждрзЗ рж╣рзЯред

рждрж╛рж░ржкрж░ ржирждрзБржи linked list ржмрж╛ржирж┐рзЯрзЗ return ржХрж░рж┐ред



---

ЁЯФН ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ Test Case ржмрзНржпрж╛ржЦрзНржпрж╛:

тЬЕ Test Case 1:

Input: [1,8,9]
тЖТ reserve = [1,8,9]
тЖТ Doubling with carry:

9├Ч2 = 18 тЖТ push 8, carry 1  
8├Ч2+1 = 17 тЖТ push 7, carry 1  
1├Ч2+1 = 3 тЖТ push 3, carry 0  
Result before reverse: [8,7,3] тЖТ After reverse: [3,7,8]

тЬФ Output = [3,7,8]


---

тЬЕ Test Case 2:

Input: [9,9,9]
тЖТ reserve = [9,9,9]
тЖТ Doubling with carry:

9├Ч2 = 18 тЖТ push 8, carry 1  
9├Ч2+1 = 19 тЖТ push 9, carry 1  
9├Ч2+1 = 19 тЖТ push 9, carry 1  
тЖТ push carry = 1  
Result: [8,9,9,1] тЖТ After reverse: [1,9,9,8]

тЬФ Output = [1,9,9,8]


---

  Full Code:
--_------------
class Solution 
{
public:
    ListNode* doubleIt(ListNode* head) 
    {
             vector<int>reserve;
        while(head!=nullptr)
            {
                reserve.push_back(head->val);
                head=head->next;
            }
        long long gen=0;
        //for(int i=0;i<reserve.size();i++)
   int carry=0;
        vector<int>result;
        for(int i=reserve.size()-1;i>=0;i--)
            {
            int  sum=reserve[i]*2+carry;
                result.push_back(sum%10);
                carry=sum/10;
            }
         
             
        if(carry>0)
        {
            result.push_back(carry);
        }
        
        reverse(result.begin(),result.end());
        ListNode* headd=new ListNode(result[0]);ListNode* current=headd;
       for(int j=1;j<result.size();j++)
           {
               
               
               current->next=new ListNode(result[j]);
               current =current->next;
           }
        return headd;
    }
    
}; 
