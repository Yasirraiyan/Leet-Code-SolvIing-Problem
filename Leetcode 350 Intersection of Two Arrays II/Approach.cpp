тЬЕ Problem:
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays.

ЁЯУЭ Input:

cpp
Copy
Edit
nums1 = [1,2,2,1], nums2 = [2,2]
ЁЯФБ Expected Output:

cpp
Copy
Edit
[2,2]
ЁЯФН рждрзБржорж┐ ржпрзЗржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗржЫрзЛ (Approach Explained in Bangla):
ЁЯза Step-by-step Thinking:
ЁЯФН "Each element in the result must appear as many times as it shows in both arrays."

ржорж╛ржирзЗ nums1 ржП ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ рзи ржмрж╛рж░ ржерж╛ржХрж▓рзЗ, ржЖрж░ nums2 рждрзЗ рж╕рзЗржЯрж╛ рзй ржмрж╛рж░ ржерж╛ржХрж▓рзЗ, рждрж╛рж╣рж▓рзЗ 2 ржмрж╛рж░ржЗ output ржП ржерж╛ржХржмрзЗ (i.e., min(2,3) ржмрж╛рж░)

ЁЯза рждрж╛ржЗ рждрзБржорж┐ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗржЫрзЛ:

ржкрзНрж░рждрж┐ржЯрж╛ array ржПрж░ ржЬржирзНржп frequency count ржХрж░рзЛ

рждрж╛рж░ржкрж░ ржпрзЗржЧрзБрж▓рж╛ ржжрзБржЗржЯрж╛ array-рждрзЗ common тЖТ рждрж╛ржжрзЗрж░ minimum frequency ржЕржирзБржпрж╛рзЯрзА output ржП рж░рж╛ржЦрзЛ

тЬЕ рждрзЛржорж╛рж░ ржХрзЛржб: рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи Bangla ржмрзНржпрж╛ржЦрзНржпрж╛ рж╕рж╣
cpp
Copy
Edit
class Solution 
{
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) 
ЁЯФ╣ intersect ржирж╛ржорзЗрж░ function ржирж┐ржЪрзНржЫрзЗ ржжрзБржЗржЯрж╛ vector nums1 ржПржмржВ nums2
ЁЯФ╣ ржПржмржВ return ржХрж░ржмрзЗ intersection values-ржПрж░ vector

cpp
Copy
Edit
{
    unordered_set<int>set1;
    unordered_set<int>set2;
ЁЯФ╣ ржПржЦрж╛ржирзЗ set1 ржПржмржВ set2 рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ тАФ ржпрж╛рждрзЗ ржЖржорж░рж╛ рж╢рзБржзрзБ unique elements рж░рж╛ржЦрж┐
ЁЯФ╣ ржкрж░рзЗ ржЪрзЗржХ ржХрж░рж╛рж░ рж╕ржорзЯ efficient рж╣рзЯ

cpp
Copy
Edit
    vector<int>ans;
    unordered_map<int,int>freq1;
    unordered_map<int,int>freq2;
ЁЯФ╣ ans рж╣ржЪрзНржЫрзЗ final output vector
ЁЯФ╣ freq1 ржПржмржВ freq2 тЖТ ржжрзБржЗржЯрж╛ frequency map тЖТ nums1 ржПржмржВ nums2 ржПрж░ ржоржзрзНржпрзЗ ржкрзНрж░рждрж┐ржЯрж╛ рж╕ржВржЦрзНржпрж╛рж░ count рж░рж╛ржЦрж╛ рж╣ржмрзЗ

cpp
Copy
Edit
    for(int i=0;i<nums1.size();i++)
    {
        set1.insert(nums1[i]);
        freq1[nums1[i]]++;
    }
ЁЯФ╣ nums1 ржПрж░ ржкрзНрж░рждрж┐ржЯрж╛ рж╕ржВржЦрзНржпрж╛ set1-ржП рж░рж╛ржЦрж╛ рж╣ржЪрзНржЫрзЗ (unique value check ржПрж░ ржЬржирзНржп)
ЁЯФ╣ freq1-ржП рждрж╛рж░ frequency ржмрж╛рзЬрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ

cpp
Copy
Edit
    for(int j=0;j<nums2.size();j++)
    {
        set2.insert(nums2[j]);
        freq2[nums2[j]]++;
    }
ЁЯФ╣ ржПржХржЗ ржХрж╛ржЬ nums2 ржПрж░ ржЬржирзНржп тАФ unique check (set2) ржПржмржВ frequency count (freq2)

cpp
Copy
Edit
    for(int k=0;k<nums1.size();k++)
ЁЯФ╣ ржПржмрж╛рж░ ржЖржмрж╛рж░ nums1 ржШрзБрж░рзЗ ржжрзЗржЦрж╛ рж╣ржЪрзНржЫрзЗ

cpp
Copy
Edit
    {
        if((set2.find(nums1[k])!=set2.end()))
ЁЯФ╣ ржпржжрж┐ nums1[k] рж╕ржВржЦрзНржпрж╛ nums2 рждрзЗржУ ржерж╛ржХрзЗ (ржорж╛ржирзЗ set2 рждрзЗ ржЖржЫрзЗ)

cpp
Copy
Edit
        {
            int occur = min(freq1[nums1[k]], freq2[nums1[k]]);
ЁЯФ╣ рждрж╛рж╣рж▓рзЗ ржЖржорж░рж╛ ржПржЗ рж╕ржВржЦрзНржпрж╛ржЯрж╛рж░ minimum frequency ржмрзЗрж░ ржХрж░рж▓рж╛ржо
ржпрзЗржоржи:

nums1 = [1,2,2,1], nums2 = [2,2] тЖТ
2 ржЖржЫрзЗ: nums1 ржП 2 ржмрж╛рж░, nums2 ржП 2 ржмрж╛рж░
тЖТ output ржП 2 ржмрж╛рж░ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ

cpp
Copy
Edit
            while(occur--)
            {
                ans.push_back(nums1[k]);
            }
ЁЯФ╣ occur ржпрждржмрж╛рж░ рж╣ржмрзЗ рждрждржмрж╛рж░ nums1[k] ржХрзЗ ans ржП рж░рж╛ржЦрж╛ рж╣ржЪрзНржЫрзЗ

cpp
Copy
Edit
            freq1[nums1[k]] = 0;
            freq2[nums1[k]] = 0;
ЁЯФ╣ ржкрж░рзЗ ржпрзЗржи ржПржЗ рж╕ржВржЦрзНржпрж╛ ржЖржмрж╛рж░ ржирж╛ ржирзЗрзЯрж╛ рж╣рзЯ, рждрж╛ржЗ frequency reset ржХрж░рзЗ ржжрж┐ржЪрзНржЫрзЛ
(ржнрж╛рж▓рзЛ practice, ржирж╛ ржжрж┐рж▓рзЗ duplicate рж╣рзЯрзЗ ржпрзЗрждрзЛ)

cpp
Copy
Edit
        }
    }
    return ans;
}
ЁЯФ╣ рж╕ржмрж╢рзЗрж╖рзЗ result vector ans return ржХрж░ржЫрзЛ

ЁЯФО Test Case 1 Walkthrough (Line by Line):
Input:
cpp
Copy
Edit
nums1 = [1,2,2,1]
nums2 = [2,2]
Execution:
freq1: {1:2, 2:2}

freq2: {2:2}

Loop nums1:

1: set2-ржП ржирж╛ржЗ тЖТ skip

2: ржЖржЫрзЗ тЖТ min(2,2) = 2 тЖТ ans = [2,2], freq reset

2: freq1[2] = 0 тЖТ skip

1: set2-ржП ржирж╛ржЗ тЖТ skip

тЬЕ Final Output: [2,2]

ЁЯФО Test Case 2:
Input:
cpp
Copy
Edit
nums1 = [4,9,5]
nums2 = [9,4,9,8,4]
Execution:
freq1: {4:1, 9:1, 5:1}

freq2: {9:2, 4:2, 8:1}

Loop:

4: set2-ржП ржЖржЫрзЗ тЖТ min(1,2) = 1 тЖТ ans: [4]

9: set2-ржП ржЖржЫрзЗ тЖТ min(1,2) = 1 тЖТ ans: [4,9]

5: set2-ржП ржирж╛ржЗ тЖТ skip

тЬЕ Final Output: [4,9] or [9,4]

ЁЯза Time & Space Complexity:
тЬЕ Time: O(n + m) тЖТ n = size of nums1, m = size of nums2

тЬЕ Space: O(n + m) тЖТ set + frequency map

тЬЕ ржХрзЗржи ржПржЗ ржХрзЛржб Accepted рж╣ржмрзЗ:
рждрзБржорж┐ ржкрзНрж░рж╢рзНржирзЗ ржпрж╛ ржЪрж╛ржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ рждрж╛ ржПржХржжржо рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ handle ржХрж░рзЗржЫрзЛ:

Frequency match тЬЕ

Minimum ржмрж╛рж░ ржирзЗрзЯрж╛ тЬЕ

Order important ржирж╛ тАФ ржпрзЗржХрзЛржирзЛ order acceptable тЬЕ

ЁЯУЭ рждрзЛржорж╛рж░ ржХрзЛржб ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ рж╕ржВржХрзНрж╖рзЗржкрзЗ:
cpp
Copy
Edit
// Intersection with frequency count
class Solution 
{
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) 
    {
        unordered_set<int> set1, set2;
        unordered_map<int,int> freq1, freq2;
        vector<int> ans;

        for(int i=0; i<nums1.size(); i++) {
            set1.insert(nums1[i]);
            freq1[nums1[i]]++;
        }
        for(int j=0; j<nums2.size(); j++) {
            set2.insert(nums2[j]);
            freq2[nums2[j]]++;
        }

        for(int k=0; k<nums1.size(); k++) {
            if(set2.find(nums1[k]) != set2.end()) {
                int occur = min(freq1[nums1[k]], freq2[nums1[k]]);
                while(occur--) {
                    ans.push_back(nums1[k]);
                }
                freq1[nums1[k]] = 0;
                freq2[nums1[k]] = 0;
            }
        }

        return ans;
    }
};
