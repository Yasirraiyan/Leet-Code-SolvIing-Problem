ЁЯФ╢ ржкрзНрж░ржмрж▓рзЗржо ржмрзБржЭрж┐:
ржкрзНрж░ржмрж▓рзЗржо:
ржПржХржЯрж╛ рж╕рзНржЯрзНрж░рж┐ржВ s ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ ржпрзЗржЦрж╛ржирзЗ ржЫрзЛржЯ рж╣рж╛рждрзЗрж░ ржЗржВрж░рзЗржЬрж┐ ржЕржХрзНрж╖рж░ ржПржмржВ ржбрж┐ржЬрж┐ржЯ (0-9) ржорж┐рж╢рж╛ржирзЛ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред
рждрзЛржорж╛ржХрзЗ рж╕рзЗржЗ ржбрж┐ржЬрж┐ржЯ ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ ржжрзНржмрж┐рждрзАрзЯ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпрж╛ржЯрж┐ ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗред
ржпржжрж┐ рж╢рзБржзрзБ ржПржХржЯрж╛ ржмрж╛ ржПржХржЯрж╛ржУ ржбрж┐ржЬрж┐ржЯ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ -1 рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

тЬЕ ржЙржжрж╛рж╣рж░ржг рзз:
Input: "dfa12321afd"
Digits Found: 1, 2, 3
Sorted Unique Digits: 1, 2, 3
тЮбя╕П 2 is the second highest

ЁЯУШ рждрзЛржорж╛рж░ ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛
cpp
Copy
Edit
class Solution 
{
public:
ЁЯФ╕ Solution ржирж╛ржоржХ ржХрзНрж▓рж╛рж╕ ржбрж┐ржлрж╛ржЗржи ржХрж░рзЗржЫрзЛ тАФ ржпрзЗржЯрж╛ рж▓рзАржХрзЛржбрзЗрж░ ржХрж╛ржарж╛ржорзЛ ржЕржирзБржпрж╛рзЯрзА ржарж┐ржХ ржЖржЫрзЗред

ЁЯФ╖ Step 1: Find Max Number
cpp
Copy
Edit
int findmax(vector<int>&arr)
{
  int max=arr[0];
  for(int k=1;k<arr.size();k++)
  {
    if(arr[k]>max)
    {
      max=arr[k];
    }
  }
  return max;
}
ЁЯФ╕ ржПржХржЯрж┐ рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи ржпрж╛ ржПржХржЯрж╛ vector<int> ржПрж░ ржоржзрзНржпрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░рзЗред

ЁЯФ╖ Step 2: Find Min Number
cpp
Copy
Edit
int findmin(vector<int>&arr)
{
  int min=arr[0];
  for(int k=1;k<arr.size();k++)
  {
    if(arr[k]<min)
    {
      min=arr[k];
    }
  }
  return min;
}
ЁЯФ╕ ржарж┐ржХ ржЖржЧрзЗрж░ ржорждрзЛржЗ, ржПржЯрж╛ рж╕рж░рзНржмржирж┐ржорзНржи рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░рзЗред

ЁЯФ╖ Step 3: Extract Digits from String
cpp
Copy
Edit
int secondHighest(string s) 
{
  vector<int>v;
  for(int i=0;i<s.size();i++)
  {
    if(isdigit(s[i]))
    {
      v.push_back(s[i]-'0');
    }
  }
ЁЯФ╕ ржПржЦрж╛ржирзЗ рждрзБржорж┐ рж╕рзНржЯрзНрж░рж┐ржВ ржерзЗржХрзЗ ржкрзНрж░рждрж┐ржЯрж╛ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржЪрзЗржХ ржХрж░ржЫрзЛ:

ржпржжрж┐ рж╕рзЗржЯрж╛ ржбрж┐ржЬрж┐ржЯ рж╣рзЯ (isdigit(s[i]))

рждрж╛рж╣рж▓рзЗ char ржерзЗржХрзЗ int ржХрж░рждрзЗ s[i]-'0' ржХрж░рзЗ ржнрзЗржХрзНржЯрж░рзЗ v рждрзЗ рж░рж╛ржЦржЫрзЛред

Example:
'2' - '0' тЖТ 2
'3' - '0' тЖТ 3

ЁЯФ╖ Step 4: Frequency Count (For Uniqueness)
cpp
Copy
Edit
unordered_map<int,int>freq;
for(int j=0;j<v.size();j++)
{
  freq[v[j]]++;
}
ЁЯФ╕ рждрзБржорж┐ ржПржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржХрждржмрж╛рж░ ржЖржЫрзЗ рждрж╛ ржХрж╛ржЙржирзНржЯ ржХрж░ржЫрзЛред
ЁЯФ╕ ржПржЯрж╛ ржХрж░рж╛рж░ ржЙржжрзНржжрзЗрж╢рзНржп: рж╢рзБржзрзБ ржЗржЙржирж┐ржХ ржбрж┐ржЬрж┐ржЯ рж░рж╛ржЦрждрзЗ ржЪрж╛ржЗрж▓рзЗ frequency map ржжрж┐рзЯрзЗ ржкрж░рзЗ key ржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржирж┐рждрзЗ ржкрж╛рж░рзЛред

ЁЯФ╖ Step 5: Only Unique Digits рж░рж╛ржЦрзЛ
cpp
Copy
Edit
vector<int>vv;
for(auto it:freq)
{
  vv.push_back(it.first);
}
ЁЯФ╕ ржПржЦржи vv рждрзЗ рж░рж╛ржЦржЫрзЛ рж╢рзБржзрзБ ржЗржЙржирж┐ржХ рж╕ржВржЦрзНржпрж╛ржЧрзБрж▓рзЛ (freq map ржПрж░ key)ред

ЁЯФ╖ Step 6: Size Check (ржпржжрж┐ ржПржХржЯрж╛рж░ ржХржо рж╣рзЯ)
cpp
Copy
Edit
if(vv.size()<2)return -1;
ЁЯФ╕ ржпржжрж┐ ржЗржЙржирж┐ржХ ржбрж┐ржЬрж┐ржЯ рзиржЯрж╛рж░ ржХржо рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржжрзНржмрж┐рждрзАрзЯ рж╕рж░рзНржмрзЛржЪрзНржЪ ржирзЗржЗ тЖТ return -1;

ЁЯФ╖ Step 7: Sort + Final Result
cpp
Copy
Edit
int ans;
sort(vv.begin(), vv.end()); // Ascending sort
if(vv.size()>=2)
{
  if(vv.size()==3)
  {
    for(int i=0;i<vv.size();i++)
    {
      if(vv[i]!=findmax(vv)&&vv[i]!=findmin(vv))
      {
          ans=vv[i];
          break;
      }
    }
  }
}
ans=vv[vv.size()-2]; // second last -> 2nd highest
return ans;
ЁЯФ╕ рждрзБржорж┐ sort ржХрж░рзЗ ржирж┐ржЫрзЗ рж░рзЗржЦрзЗржЫрзЛ:

рж╕ржмрж╕ржорзЯ vv[vv.size()-2] рж╣ржмрзЗ ржжрзНржмрж┐рждрзАрзЯ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпрж╛

ржПржоржиржХрж┐ ржпржжрж┐ рждрж┐ржиржЯрж╛ ржЗржЙржирж┐ржХ рж╕ржВржЦрзНржпрж╛ ржерж╛ржХрзЗ, рждрзБржорж┐ ржЪрзЗржХ ржХрж░рзЗ ржоржзрзНржпрзЗрж░ржЯрж╛ ржирж┐ржЪрзНржЫрзЛ (ржпрзЗржЯрж╛ ржПржХржЯрзБ ржмрж╛рзЬрждрж┐ precaution, ржХрж┐ржирзНрждрзБ sort ржХрж░рж╛рзЯ ржПржЯрж╛ ржжрж░ржХрж╛рж░ рж╣рзЯ ржирж╛)

тЬЕ рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк (How You Thought & Solved)
ЁЯФ╣ рждрзБржорж┐ ржирж┐ржЪрзЗрж░ ржзрж╛ржкрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗржЫрзЛ:

ржбрж┐ржЬрж┐ржЯ ржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЛ рж╕рзНржЯрзНрж░рж┐ржВ ржерзЗржХрзЗ

ржПржХржЗ ржбрж┐ржЬрж┐ржЯ ржмрж╛ржж ржжрж┐рзЯрзЗ ржЗржЙржирж┐ржХ ржбрж┐ржЬрж┐ржЯ ржмрзЗрж░ ржХрж░рзЛ

ржжрзНржмрж┐рждрзАрзЯ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпрж╛ ржирж┐рж░рзНржгрзЯ ржХрж░рзЛ

ржХрзЗрж╕ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЛ ржпрзЗржЦрж╛ржирзЗ ржбрж┐ржЬрж┐ржЯржЗ ржирж╛ржЗ ржмрж╛ ржПржХржЯрж╛ ржорж╛рждрзНрж░

тЬЕ ржПржЗ рж▓ржЬрж┐ржХрзЗ ржнрзБрж▓ ржирж╛ржЗ, ржХрзЛржб ржХрж╛ржЬ ржХрж░рзЗред

Input: s = "dfa12321afd"
Digits: [1, 2, 3]
Sorted: [1, 2, 3]
2nd Highest = 2 тЬЕ

Input: s = "abc1111"
Digits: [1]
Unique: [1]
return -1 тЬЕ


Full Code:
-----------

class Solution 
{
public:
 int findmax(vector<int>&arr)
 {
  int max=arr[0];
  for(int k=1;k<arr.size();k++)
  {
    if(arr[k]>max)
    {
      max=arr[k];
    }
  }
  return max;
 }
 int findmin(vector<int>&arr)
 {
  int min=arr[0];
  for(int k=1;k<arr.size();k++)
  {
    if(arr[k]<min)
    {
      min=arr[k];
    }
  }
  return min;
 }
    int secondHighest(string s) 
    {
      vector<int>v;
      for(int i=0;i<s.size();i++)
      {
        if(isdigit(s[i]))
        {
          v.push_back(s[i]-'0');
        }
      }
      unordered_map<int,int>freq;
      for(int j=0;j<v.size();j++)
      {
        freq[v[j]]++;
      }
      vector<int>vv;
      for(auto it:freq)
      {
        vv.push_back(it.first);
      }
      if(vv.size()<2)return -1;
      int ans;
        sort(vv.begin(), vv.end());
      if(vv.size()>=2)
      {
          if(vv.size()==3)
          {
            for(int i=0;i<vv.size();i++)
            {
              if(vv[i]!=findmax(vv)&&vv[i]!=findmin(vv))
              {
                  ans=vv[i];
                  break;
              }
            }
          }
      }
      ans=vv[vv.size()-2];
      return ans;
    }
};
