тЬЕ Problem Summary (Bangla):
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ integer array nums ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ ржПржмржВ ржПржХржЯрж┐ integer k ржжрзЗржУрзЯрж╛ ржЖржЫрзЗред
рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ тАФ ржПржоржи ржПржХржЯрж┐ contiguous subarray ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛ ржпрж╛рж░ ржжрзИрж░рзНржШрзНржп k, ржПржмржВ ржпрж╛рж░ average value рж╕рж░рзНржмрзЛржЪрзНржЪред рждрж╛рж░ржкрж░ рж╕рзЗржЗ maximum average рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ рж╣ржмрзЗред

тЬЕ Example:
Input:
nums = [1, 12, -5, -6, 50, 3], k = 4

Explanation:
ржЖржорж░рж╛ ржпрзЗрж╕ржм subarray ржкрзЗрждрзЗ ржкрж╛рж░рж┐ ржпрж╛рж░ ржжрзИрж░рзНржШрзНржп 4:

[1, 12, -5, -6] тЖТ sum = 2 тЖТ avg = 0.5

[12, -5, -6, 50] тЖТ sum = 51 тЖТ avg = 12.75 тЬЕ

[-5, -6, 50, 3] тЖТ sum = 42 тЖТ avg = 10.5

Maximum average = 12.75

тЬЕ ржХрж┐ржнрж╛ржмрзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗ ржПржЗ ржкрзНрж░рж╢рзНржи рж╕ржорж╛ржзрж╛ржирзЗ?
ЁЯФН Step-by-step ржЪрж┐ржирзНрждрж╛ржнрж╛ржмржирж╛:
ржХрзА ржЪрж╛ржЗржЫрзЗ ржкрзНрж░рж╢рзНржирзЗ?
тЖТ length = k ржПрж░ рж╕ржм possible subarray ржЧрзБрж▓рзЛрж░ average ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗред
тЖТ рждрж╛рж░ржкрж░, ржпрзЗржЯрж╛рж░ average рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕рзЗржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ рж╣ржмрзЗред

Brute-force ржХрж░рж▓рзЗ ржХрзА рж╣ржмрзЗ?
ржкрзНрж░рждрж┐ржЯрж┐ k-length subarray ржзрж░рзЗ ржзрж░рзЗ average ржмрзЗрж░ ржХрж░ржмрзЛ тЖТ time complexity: O(n ├Ч k)
ржХрж┐ржирзНрждрзБ n рж╣рждрзЗ ржкрж╛рж░рзЗ 10тБ╡ ржкрж░рзНржпржирзНржд, рждрж╛ржЗ ржПржЗ ржкржжрзНржзрждрж┐рждрзЗ Time Limit Exceeded рж╣ржмрзЗред

Efficient ржЙржкрж╛рзЯ ржХрзА?
ржЖржорж░рж╛ ржЬрж╛ржирж┐ ржпрзЗ fixed size subarray ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржЖржорж░рж╛ Sliding Window Technique ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

тЬЕ Sliding Window Technique ржмрзНржпрж╛ржЦрзНржпрж╛ (Bangla):
ЁЯОп ржЙржжрзНржжрзЗрж╢рзНржп:
ржкрзНрж░ржержорзЗ k ржЙржкрж╛ржжрж╛ржи ржирж┐рзЯрзЗ ржПржХржЯрж┐ window рждрзИрж░рж┐ ржХрж░рзЛред ржПрж░ржкрж░ ржПржХржзрж╛ржкрзЗ ржПржХржШрж░ ржХрж░рзЗ ржбрж╛ржирзЗ рж╕рж░рж╛ржУ, ржПржмржВ рж╕рж░рзНржмрзЛржЪрзНржЪ sum (ржмрж╛ average) рж░рж╛ржЦрзЛред

тЬи Time Complexity:
O(n) тЖТ ржкрзБрж░рзЛ ржЕрзНржпрж╛рж░рзЗ ржПржХржмрж╛рж░ржЗ рж╕рзНржХрзНржпрж╛ржи ржХрж░ржЫрж┐ред

тЬЕ Code + Line by Line Bangla Explanation:
cpp
Copy
Edit
class Solution 
{
public:
    double findMaxAverage(vector<int>& nums, int k) 
    {
        int sum = 0;
ЁЯФ╕ ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ ржкрзНрж░ржержорзЗ k elements ржПрж░ ржЬржирзНржп sum ржмрзЗрж░ ржХрж░ржмрзЛред

cpp
Copy
Edit
        for (int i = 0; i < k; i++) 
        {
            sum += nums[i]; // ржкрзНрж░ржержо k ржЙржкрж╛ржжрж╛ржи ржпрзЛржЧ ржХрж░ржЫрж┐
        }
ЁЯФ╕ ржПржмрж╛рж░ ржЖржорж░рж╛ sum ржПрж░ ржорж╛ржи ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рж▓рж╛ржо maxsumред

cpp
Copy
Edit
        int maxsum = sum;
ЁЯФ╕ ржПржЦржи ржЖржорж░рж╛ sliding window рж╢рзБрж░рзБ ржХрж░ржмрзЛ index k ржерзЗржХрзЗ:

cpp
Copy
Edit
        for (int j = k; j < nums.size(); j++) 
        {
            sum += nums[j] - nums[j - k]; // ржирждрзБржи element ржпрзЛржЧ ржХрж░ржЫрж┐, ржкрзБрж░рж╛рждржи ржмрж╛ржж ржжрж┐ржЪрзНржЫрж┐
            maxsum = std::max(sum, maxsum); // рж╕рж░рзНржмрзЛржЪрзНржЪ sum рж╣рж╛рж▓ржирж╛ржЧрж╛ржж ржХрж░ржЫрж┐
        }
ЁЯФ╕ рж╢рзЗрж╖рзЗ average ржмрзЗрж░ ржХрж░ржЫрж┐:

cpp
Copy
Edit
        double ans = (double)maxsum / k;
        return ans;
    }
};
тЬЕ Test Case Walkthrough (nums = [1,12,-5,-6,50,3], k = 4):
Step 1:
sum = 1 + 12 + (-5) + (-6) = 2 тЖТ maxsum = 2

Step 2:
j = 4 тЖТ new element = 50, remove = 1
sum = 2 + 50 - 1 = 51 тЖТ maxsum = max(2, 51) = 51

Step 3:
j = 5 тЖТ new element = 3, remove = 12
sum = 51 + 3 - 12 = 42 тЖТ maxsum = max(51, 42) = 51

рж╢рзЗрж╖рзЗ average = 51 / 4 = 12.75

тЬЕ ржХрзЗржи ржПржЗ рж╕ржорж╛ржзрж╛ржи Accepted?
O(n) time ржПржмржВ O(1) space тЖТ Efficient

Sliding window ржПржоржи рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп ржкрж╛рж░ржлрзЗржХрзНржЯ ржпрзЗржЦрж╛ржирзЗ fixed-length subarray ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рждрзЗ рж╣рзЯ

Brute-force ржПрж░ рждрзБрж▓ржирж╛рзЯ ржЕржирзЗржХ ржжрзНрж░рзБржд ржПржмржВ рж╕рзАржорж╛ ржкрзЗрж░рзЛрзЯ ржирж╛

тЬЕ ржХрзЛржи Technique ржЗржЙржЬ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ?
Sliding Window Technique тЖТ ржпржЦржи contiguous fixed-size subarray ржПрж░ ржоржзрзНржпрзЗ maximum/minimum/sum/average ржмрзЗрж░ ржХрж░рждрзЗ рж╣рзЯ

Full Code:
-----------

  class Solution 
{
public:

    double findMaxAverage(vector<int>& nums, int k) 
    {
       int sum=0;
       for(int i=0;i<k;i++)
       {
        sum+=nums[i];
       }
       int maxsum=sum;
       int windowsum=sum;
       for(int j=k;j<nums.size();j++)
       {
            sum+=nums[j]-nums[j-k];
            maxsum=std::max(sum,maxsum);
       }
       double ans=(double)maxsum/k;
       return ans;
    }
};
