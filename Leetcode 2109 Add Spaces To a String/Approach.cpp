Problem Understanding (‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßÄ ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶π‡¶¨‡ßá)

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ string s ‡¶Ü‡¶õ‡ßá, ‡¶Ø‡ßá‡¶Æ‡¶® "LeetcodeHelpsMeLearn".

‡¶Ü‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø integer array spaces, ‡¶Ø‡ßá‡¶Æ‡¶® [8,13,15], ‡¶Ø‡¶æ ‡¶¨‡¶≤‡ßá ‡¶ï‡ßã‡¶•‡¶æ‡ßü space ‡¶¨‡¶∏‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

‡¶Æ‡¶æ‡¶®‡ßá, spaces[i] ‡¶π‡¶≤‡ßã ‡¶∏‡ßá‡¶á index ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá space ‡¶¨‡¶∏‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶Ü‡¶ó‡ßá‡•§

Output: ‡¶®‡¶§‡ßÅ‡¶® string, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßá‡¶á positions-‡¶è space ‡¶¨‡¶∏‡¶æ‡¶®‡ßã ‡¶Ü‡¶õ‡ßá‡•§

Example:

s = "LeetcodeHelpsMeLearn"
spaces = [8,13,15]
output = "Leetcode Helps Me Learn"


Index 8 ‚Üí 'H' ‡¶è‡¶∞ ‡¶Ü‡¶ó‡ßá space

Index 13 ‚Üí 'M' ‡¶è‡¶∞ ‡¶Ü‡¶ó‡ßá space

Index 15 ‚Üí 'L' ‡¶è‡¶∞ ‡¶Ü‡¶ó‡ßá space

Approach (‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá solve ‡¶ï‡¶∞‡¶¨)

Two pointers / iterative approach:

i ‚Üí string s ‡¶è‡¶∞ index track ‡¶ï‡¶∞‡¶¨‡ßá‡•§

j ‚Üí spaces array ‡¶è‡¶∞ index track ‡¶ï‡¶∞‡¶¨‡ßá‡•§

Step by step logic:

‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá empty string res ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì‡•§

loop ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì i from 0 to s.size()-1‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø step-‡¶è check ‡¶ï‡¶∞‡ßã:

‡¶Ø‡¶¶‡¶ø i == spaces[j] ‚Üí ‡¶§‡¶ñ‡¶® res ‡¶è ‡¶Ü‡¶ó‡ßá space ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ j++‡•§

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ s[i] add ‡¶ï‡¶∞‡ßã res ‡¶è‡•§

i++ ‡¶¶‡¶ø‡ßü‡ßá move ‡¶ï‡¶∞‡ßã next character-‡¶è‡•§

Technique:

‡¶è‡¶ü‡¶æ ‡¶π‡¶≤‡ßã two-pointer or single-pass traversal technique‡•§

‡¶Ü‡¶Æ‡¶∞‡¶æ s ‡¶Ü‡¶∞ spaces ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ array ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá traverse ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

Time complexity = O(n + m) ‚Üí n = s.size(), m = spaces.size()

Extra space = O(n + m) ‚Üí because new string res ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

Line by line Bangla explanation
class Solution {
public:
    string addSpaces(string s, vector<int>& spaces) {
        int i=0;              // i pointer: s string traverse ‡¶ï‡¶∞‡¶§‡ßá
        int j=0;              // j pointer: spaces array traverse ‡¶ï‡¶∞‡¶§‡ßá
        string res;           // final result string
        
        while(i<s.size())     // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø character traverse ‡¶ï‡¶∞‡¶¨
        {
            if(j<spaces.size() && i==spaces[j]) // check: i ‡¶ï‡¶ø spaces[j]-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá match ‡¶ï‡¶∞‡¶õ‡ßá?
            {
                res += ' ';   // ‡¶Ø‡¶¶‡¶ø match ‡¶ï‡¶∞‡ßá ‚Üí space add ‡¶ï‡¶∞‡ßã
                j++;          // next space index-‡¶è move ‡¶ï‡¶∞‡ßã
            }
            
            res += s[i];      // current character add ‡¶ï‡¶∞‡ßã
            i++;              // next character ‡¶è move ‡¶ï‡¶∞‡ßã
        }
        
        return res;           // final modified string return ‡¶ï‡¶∞‡ßã
    }
};

Step by step Example walkthrough

Example 1:

s = "LeetcodeHelpsMeLearn"
spaces = [8,13,15]


Initialize: i=0, j=0, res=""

Loop:

i=0 ‚Üí i!=spaces[j]=8 ‚Üí add 'L' ‚Üí res="L"

i=1 ‚Üí add 'e' ‚Üí res="Le"

...

i=8 ‚Üí i==spaces[j]=8 ‚Üí add space ‚Üí res="Leetcode " ‚Üí j++

i=8 ‚Üí add 'H' ‚Üí res="Leetcode H"

...

i=13 ‚Üí i==spaces[j]=13 ‚Üí add space ‚Üí res="Leetcode Helps " ‚Üí j++

i=13 ‚Üí add 'M' ‚Üí res="Leetcode Helps M"

...

i=15 ‚Üí i==spaces[j]=15 ‚Üí add space ‚Üí res="Leetcode Helps Me " ‚Üí j++

i=15 ‚Üí add 'L' ‚Üí res="Leetcode Helps Me L"

Continue until end.

Final Output: "Leetcode Helps Me Learn"

‚úÖ Accepted test cases:

‡¶ï‡ßá‡¶® accepted? ‡¶ï‡¶æ‡¶∞‡¶£:

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø index ‡¶†‡¶ø‡¶ï‡¶†‡¶æ‡¶ï check ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

Original string-‡¶è‡¶∞ order maintained ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

‡¶∏‡¶¨ spaces index properly inserted ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

Technique Summary

Two-pointer / single-pass:

‡¶è‡¶ï pointer ‡¶¶‡¶ø‡ßü‡ßá string traverse ‡¶ï‡¶∞‡¶æ‡•§

‡¶Ü‡¶∞‡ßá‡¶ï pointer ‡¶¶‡¶ø‡ßü‡ßá spaces array traverse ‡¶ï‡¶∞‡¶æ‡•§

Why efficient:

‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ string traverse ‡¶ï‡¶∞‡¶æ, ‡¶ï‡ßã‡¶® extra nested loop ‡¶®‡ßá‡¶á‡•§

Time complexity = O(n+m), Space complexity = O(n+m)

When to use:

‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ordered list ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ extra operations (‡¶Ø‡ßá‡¶Æ‡¶® space insertion) ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

Competitive programming-‡¶è index-based insertion/merge ‡¶™‡ßç‡¶∞‡ßã‡¶¨‡¶≤‡ßá‡¶Æ‡ßá ‡¶ñ‡ßÅ‡¶¨ useful‡•§

üí° Bangla short tips:

‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü problem ‡¶™‡ßú‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡ßã: ‡¶ï‡ßã‡¶•‡¶æ‡ßü pointer/loop use ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‡¶ï‡ßã‡¶® insertion/condition ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø? ‚Üí ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá pointer ‡¶¶‡¶ø‡ßü‡ßá track ‡¶ï‡¶∞‡ßã‡•§

‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ traverse ‚Üí efficient solution‡•§

Full Code:
-------------
  class Solution
 {
public:
    string addSpaces(string s, vector<int>& spaces) {
     int i=0;
     int j=0;
     string res;
     while(i<s.size())
     {
        if(j<spaces.size()&&i==spaces[j])
        {
            res+=' ';
            j++;
        }
        res+=s[i];
        i++;
     }
     return res;
    }
};

Full C
